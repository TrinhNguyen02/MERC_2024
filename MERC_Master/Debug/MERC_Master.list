
MERC_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f50  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800405c  0800405c  0001405c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004088  08004088  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004088  08004088  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004088  08004088  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004088  08004088  00014088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800408c  0800408c  0001408c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004090  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000010  0800409c  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  0800409c  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db11  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002071  00000000  00000000  0002db46  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e90  00000000  00000000  0002fbb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000db8  00000000  00000000  00030a48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017dd7  00000000  00000000  00031800  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b6a4  00000000  00000000  000495d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008b654  00000000  00000000  00054c7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e02cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dd8  00000000  00000000  000e034c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08004044 	.word	0x08004044

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08004044 	.word	0x08004044

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	; 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028a:	f1a4 0401 	sub.w	r4, r4, #1
 800028e:	d1e9      	bne.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	; 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2iz>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f0:	d215      	bcs.n	800091e <__aeabi_d2iz+0x36>
 80008f2:	d511      	bpl.n	8000918 <__aeabi_d2iz+0x30>
 80008f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008fc:	d912      	bls.n	8000924 <__aeabi_d2iz+0x3c>
 80008fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000906:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	bf18      	it	ne
 8000914:	4240      	negne	r0, r0
 8000916:	4770      	bx	lr
 8000918:	f04f 0000 	mov.w	r0, #0
 800091c:	4770      	bx	lr
 800091e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000922:	d105      	bne.n	8000930 <__aeabi_d2iz+0x48>
 8000924:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000928:	bf08      	it	eq
 800092a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800092e:	4770      	bx	lr
 8000930:	f04f 0000 	mov.w	r0, #0
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop

08000938 <constrain>:
extern int PWM;
extern double error;
extern int output;


void constrain(int* value, int min, int max) {
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
    if (*value <= min) {
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	68ba      	ldr	r2, [r7, #8]
 800094a:	429a      	cmp	r2, r3
 800094c:	db03      	blt.n	8000956 <constrain+0x1e>
        *value = min;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	68ba      	ldr	r2, [r7, #8]
 8000952:	601a      	str	r2, [r3, #0]
    } else if (*value >= max) {
        *value = max;
    }
}
 8000954:	e007      	b.n	8000966 <constrain+0x2e>
    } else if (*value >= max) {
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	429a      	cmp	r2, r3
 800095e:	dc02      	bgt.n	8000966 <constrain+0x2e>
        *value = max;
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	601a      	str	r2, [r3, #0]
}
 8000966:	bf00      	nop
 8000968:	3714      	adds	r7, #20
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr

08000970 <calcPD>:
int calcPD(int input, int setPoint, double kp, double kd) {
 8000970:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000974:	b084      	sub	sp, #16
 8000976:	af00      	add	r7, sp, #0
 8000978:	60f8      	str	r0, [r7, #12]
 800097a:	60b9      	str	r1, [r7, #8]
 800097c:	e9c7 2300 	strd	r2, r3, [r7]
    static int previous_error = 0;
    static int previous_setPoint = 0;
    error = (setPoint - input)*MAX_PWM/MAX_SPEED;
 8000980:	68ba      	ldr	r2, [r7, #8]
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	2264      	movs	r2, #100	; 0x64
 8000988:	fb02 f303 	mul.w	r3, r2, r3
 800098c:	4a40      	ldr	r2, [pc, #256]	; (8000a90 <calcPD+0x120>)
 800098e:	fb82 1203 	smull	r1, r2, r2, r3
 8000992:	1192      	asrs	r2, r2, #6
 8000994:	17db      	asrs	r3, r3, #31
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff fd29 	bl	80003f0 <__aeabi_i2d>
 800099e:	4603      	mov	r3, r0
 80009a0:	460c      	mov	r4, r1
 80009a2:	4a3c      	ldr	r2, [pc, #240]	; (8000a94 <calcPD+0x124>)
 80009a4:	e9c2 3400 	strd	r3, r4, [r2]
    if((setPoint - previous_setPoint) >= 100) {
 80009a8:	4b3b      	ldr	r3, [pc, #236]	; (8000a98 <calcPD+0x128>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	68ba      	ldr	r2, [r7, #8]
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	2b63      	cmp	r3, #99	; 0x63
 80009b2:	dd03      	ble.n	80009bc <calcPD+0x4c>
    	setPoint-= 50;
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	3b32      	subs	r3, #50	; 0x32
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	e009      	b.n	80009d0 <calcPD+0x60>
    }
    else if((setPoint - previous_setPoint) <= -100) {
 80009bc:	4b36      	ldr	r3, [pc, #216]	; (8000a98 <calcPD+0x128>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	68ba      	ldr	r2, [r7, #8]
 80009c2:	1ad3      	subs	r3, r2, r3
 80009c4:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80009c8:	da02      	bge.n	80009d0 <calcPD+0x60>
    	setPoint+= 50;
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	3332      	adds	r3, #50	; 0x32
 80009ce:	60bb      	str	r3, [r7, #8]
    }
    previous_setPoint = setPoint;
 80009d0:	4a31      	ldr	r2, [pc, #196]	; (8000a98 <calcPD+0x128>)
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	6013      	str	r3, [r2, #0]


    output = setPoint*MAX_PWM/MAX_SPEED + kp * error + kd * (error - previous_error);
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	2264      	movs	r2, #100	; 0x64
 80009da:	fb02 f303 	mul.w	r3, r2, r3
 80009de:	4a2c      	ldr	r2, [pc, #176]	; (8000a90 <calcPD+0x120>)
 80009e0:	fb82 1203 	smull	r1, r2, r2, r3
 80009e4:	1192      	asrs	r2, r2, #6
 80009e6:	17db      	asrs	r3, r3, #31
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff fd00 	bl	80003f0 <__aeabi_i2d>
 80009f0:	4604      	mov	r4, r0
 80009f2:	460d      	mov	r5, r1
 80009f4:	4b27      	ldr	r3, [pc, #156]	; (8000a94 <calcPD+0x124>)
 80009f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80009fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80009fe:	f7ff fd61 	bl	80004c4 <__aeabi_dmul>
 8000a02:	4602      	mov	r2, r0
 8000a04:	460b      	mov	r3, r1
 8000a06:	4620      	mov	r0, r4
 8000a08:	4629      	mov	r1, r5
 8000a0a:	f7ff fba5 	bl	8000158 <__adddf3>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	460c      	mov	r4, r1
 8000a12:	4698      	mov	r8, r3
 8000a14:	46a1      	mov	r9, r4
 8000a16:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <calcPD+0x124>)
 8000a18:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000a1c:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <calcPD+0x12c>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fce5 	bl	80003f0 <__aeabi_i2d>
 8000a26:	4602      	mov	r2, r0
 8000a28:	460b      	mov	r3, r1
 8000a2a:	4620      	mov	r0, r4
 8000a2c:	4629      	mov	r1, r5
 8000a2e:	f7ff fb91 	bl	8000154 <__aeabi_dsub>
 8000a32:	4603      	mov	r3, r0
 8000a34:	460c      	mov	r4, r1
 8000a36:	4618      	mov	r0, r3
 8000a38:	4621      	mov	r1, r4
 8000a3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000a3e:	f7ff fd41 	bl	80004c4 <__aeabi_dmul>
 8000a42:	4603      	mov	r3, r0
 8000a44:	460c      	mov	r4, r1
 8000a46:	461a      	mov	r2, r3
 8000a48:	4623      	mov	r3, r4
 8000a4a:	4640      	mov	r0, r8
 8000a4c:	4649      	mov	r1, r9
 8000a4e:	f7ff fb83 	bl	8000158 <__adddf3>
 8000a52:	4603      	mov	r3, r0
 8000a54:	460c      	mov	r4, r1
 8000a56:	4618      	mov	r0, r3
 8000a58:	4621      	mov	r1, r4
 8000a5a:	f7ff ff45 	bl	80008e8 <__aeabi_d2iz>
 8000a5e:	4602      	mov	r2, r0
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <calcPD+0x130>)
 8000a62:	601a      	str	r2, [r3, #0]

    previous_error = error;
 8000a64:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <calcPD+0x124>)
 8000a66:	cb18      	ldmia	r3, {r3, r4}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	4621      	mov	r1, r4
 8000a6c:	f7ff ff3c 	bl	80008e8 <__aeabi_d2iz>
 8000a70:	4602      	mov	r2, r0
 8000a72:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <calcPD+0x12c>)
 8000a74:	601a      	str	r2, [r3, #0]

    constrain(&output, -100, 100);
 8000a76:	2264      	movs	r2, #100	; 0x64
 8000a78:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8000a7c:	4808      	ldr	r0, [pc, #32]	; (8000aa0 <calcPD+0x130>)
 8000a7e:	f7ff ff5b 	bl	8000938 <constrain>
    return output;
 8000a82:	4b07      	ldr	r3, [pc, #28]	; (8000aa0 <calcPD+0x130>)
 8000a84:	681b      	ldr	r3, [r3, #0]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000a90:	60606061 	.word	0x60606061
 8000a94:	20000168 	.word	0x20000168
 8000a98:	2000002c 	.word	0x2000002c
 8000a9c:	20000030 	.word	0x20000030
 8000aa0:	20000094 	.word	0x20000094

08000aa4 <ctrlMotor>:
void ctrlMotor(motorStruct Motor_x, int16_t throttle, int16_t speed, double kp, double kd){
 8000aa4:	b590      	push	{r4, r7, lr}
 8000aa6:	b087      	sub	sp, #28
 8000aa8:	af02      	add	r7, sp, #8
 8000aaa:	1d3c      	adds	r4, r7, #4
 8000aac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000ab0:	807b      	strh	r3, [r7, #2]
	PWM = calcPD(speed, throttle, kp, kd);
 8000ab2:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8000ab6:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000aba:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8000abe:	e9cd 3400 	strd	r3, r4, [sp]
 8000ac2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000ac6:	f7ff ff53 	bl	8000970 <calcPD>
 8000aca:	4602      	mov	r2, r0
 8000acc:	4b4a      	ldr	r3, [pc, #296]	; (8000bf8 <ctrlMotor+0x154>)
 8000ace:	601a      	str	r2, [r3, #0]
	// channel B of tb6612 --> tim2 channel 2
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	2104      	movs	r1, #4
 8000ad4:	4849      	ldr	r0, [pc, #292]	; (8000bfc <ctrlMotor+0x158>)
 8000ad6:	f001 fa99 	bl	800200c <HAL_GPIO_WritePin>
	if( PWM == 0) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, RESET);
 8000ada:	4b47      	ldr	r3, [pc, #284]	; (8000bf8 <ctrlMotor+0x154>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d104      	bne.n	8000aec <ctrlMotor+0x48>
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2104      	movs	r1, #4
 8000ae6:	4845      	ldr	r0, [pc, #276]	; (8000bfc <ctrlMotor+0x158>)
 8000ae8:	f001 fa90 	bl	800200c <HAL_GPIO_WritePin>

	if (PWM > 0 ){
 8000aec:	4b42      	ldr	r3, [pc, #264]	; (8000bf8 <ctrlMotor+0x154>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	dd3e      	ble.n	8000b72 <ctrlMotor+0xce>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	2101      	movs	r1, #1
 8000af8:	4840      	ldr	r0, [pc, #256]	; (8000bfc <ctrlMotor+0x158>)
 8000afa:	f001 fa87 	bl	800200c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2102      	movs	r1, #2
 8000b02:	483e      	ldr	r0, [pc, #248]	; (8000bfc <ctrlMotor+0x158>)
 8000b04:	f001 fa82 	bl	800200c <HAL_GPIO_WritePin>
	    __HAL_TIM_SetCompare(Motor_x.htim,Motor_x.Channel,PWM*10);
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d10a      	bne.n	8000b24 <ctrlMotor+0x80>
 8000b0e:	4b3a      	ldr	r3, [pc, #232]	; (8000bf8 <ctrlMotor+0x154>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	4613      	mov	r3, r2
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	4413      	add	r3, r2
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	635a      	str	r2, [r3, #52]	; 0x34
	else if (PWM < 0 ){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, RESET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);
	    __HAL_TIM_SetCompare(Motor_x.htim,Motor_x.Channel,PWM*(-10));
	}
}
 8000b22:	e064      	b.n	8000bee <ctrlMotor+0x14a>
	    __HAL_TIM_SetCompare(Motor_x.htim,Motor_x.Channel,PWM*10);
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	2b04      	cmp	r3, #4
 8000b28:	d10a      	bne.n	8000b40 <ctrlMotor+0x9c>
 8000b2a:	4b33      	ldr	r3, [pc, #204]	; (8000bf8 <ctrlMotor+0x154>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	4613      	mov	r3, r2
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	4413      	add	r3, r2
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	461a      	mov	r2, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000b3e:	e056      	b.n	8000bee <ctrlMotor+0x14a>
	    __HAL_TIM_SetCompare(Motor_x.htim,Motor_x.Channel,PWM*10);
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	2b08      	cmp	r3, #8
 8000b44:	d10a      	bne.n	8000b5c <ctrlMotor+0xb8>
 8000b46:	4b2c      	ldr	r3, [pc, #176]	; (8000bf8 <ctrlMotor+0x154>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	4413      	add	r3, r2
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	461a      	mov	r2, r3
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000b5a:	e048      	b.n	8000bee <ctrlMotor+0x14a>
	    __HAL_TIM_SetCompare(Motor_x.htim,Motor_x.Channel,PWM*10);
 8000b5c:	4b26      	ldr	r3, [pc, #152]	; (8000bf8 <ctrlMotor+0x154>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4613      	mov	r3, r2
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	4413      	add	r3, r2
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	461a      	mov	r2, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000b70:	e03d      	b.n	8000bee <ctrlMotor+0x14a>
	else if (PWM < 0 ){
 8000b72:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <ctrlMotor+0x154>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	da39      	bge.n	8000bee <ctrlMotor+0x14a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	481f      	ldr	r0, [pc, #124]	; (8000bfc <ctrlMotor+0x158>)
 8000b80:	f001 fa44 	bl	800200c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);
 8000b84:	2201      	movs	r2, #1
 8000b86:	2102      	movs	r1, #2
 8000b88:	481c      	ldr	r0, [pc, #112]	; (8000bfc <ctrlMotor+0x158>)
 8000b8a:	f001 fa3f 	bl	800200c <HAL_GPIO_WritePin>
	    __HAL_TIM_SetCompare(Motor_x.htim,Motor_x.Channel,PWM*(-10));
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d109      	bne.n	8000ba8 <ctrlMotor+0x104>
 8000b94:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <ctrlMotor+0x154>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f06f 0209 	mvn.w	r2, #9
 8000b9c:	fb02 f203 	mul.w	r2, r2, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ba6:	e022      	b.n	8000bee <ctrlMotor+0x14a>
	    __HAL_TIM_SetCompare(Motor_x.htim,Motor_x.Channel,PWM*(-10));
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	2b04      	cmp	r3, #4
 8000bac:	d109      	bne.n	8000bc2 <ctrlMotor+0x11e>
 8000bae:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <ctrlMotor+0x154>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f06f 0209 	mvn.w	r2, #9
 8000bb6:	fb02 f203 	mul.w	r2, r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000bc0:	e015      	b.n	8000bee <ctrlMotor+0x14a>
	    __HAL_TIM_SetCompare(Motor_x.htim,Motor_x.Channel,PWM*(-10));
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	2b08      	cmp	r3, #8
 8000bc6:	d109      	bne.n	8000bdc <ctrlMotor+0x138>
 8000bc8:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <ctrlMotor+0x154>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f06f 0209 	mvn.w	r2, #9
 8000bd0:	fb02 f203 	mul.w	r2, r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000bda:	e008      	b.n	8000bee <ctrlMotor+0x14a>
	    __HAL_TIM_SetCompare(Motor_x.htim,Motor_x.Channel,PWM*(-10));
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <ctrlMotor+0x154>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f06f 0209 	mvn.w	r2, #9
 8000be4:	fb02 f203 	mul.w	r2, r2, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000bee:	bf00      	nop
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd90      	pop	{r4, r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000164 	.word	0x20000164
 8000bfc:	40010800 	.word	0x40010800

08000c00 <HAL_UARTEx_RxEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000c00:	b590      	push	{r4, r7, lr}
 8000c02:	b08b      	sub	sp, #44	; 0x2c
 8000c04:	af06      	add	r7, sp, #24
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	807b      	strh	r3, [r7, #2]
	uint8_t *rxBff = &speedBuffer;
 8000c0c:	4b23      	ldr	r3, [pc, #140]	; (8000c9c <HAL_UARTEx_RxEventCallback+0x9c>)
 8000c0e:	60fb      	str	r3, [r7, #12]
     HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxBuffer, RX_SIZE);
 8000c10:	220a      	movs	r2, #10
 8000c12:	4923      	ldr	r1, [pc, #140]	; (8000ca0 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000c14:	4823      	ldr	r0, [pc, #140]	; (8000ca4 <HAL_UARTEx_RxEventCallback+0xa4>)
 8000c16:	f002 fcc1 	bl	800359c <HAL_UARTEx_ReceiveToIdle_DMA>
     __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000c1a:	4b23      	ldr	r3, [pc, #140]	; (8000ca8 <HAL_UARTEx_RxEventCallback+0xa8>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b21      	ldr	r3, [pc, #132]	; (8000ca8 <HAL_UARTEx_RxEventCallback+0xa8>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f022 0204 	bic.w	r2, r2, #4
 8000c28:	601a      	str	r2, [r3, #0]
     if(rxBuffer[0]==0x55 && rxBuffer[9]==0xAA){
 8000c2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ca0 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b55      	cmp	r3, #85	; 0x55
 8000c30:	d130      	bne.n	8000c94 <HAL_UARTEx_RxEventCallback+0x94>
 8000c32:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000c34:	7a5b      	ldrb	r3, [r3, #9]
 8000c36:	2baa      	cmp	r3, #170	; 0xaa
 8000c38:	d12c      	bne.n	8000c94 <HAL_UARTEx_RxEventCallback+0x94>
    	 for(int i = 1; i <= 8; i++){
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	60bb      	str	r3, [r7, #8]
 8000c3e:	e00b      	b.n	8000c58 <HAL_UARTEx_RxEventCallback+0x58>
    		 *rxBff = rxBuffer[i];
 8000c40:	4a17      	ldr	r2, [pc, #92]	; (8000ca0 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	4413      	add	r3, r2
 8000c46:	781a      	ldrb	r2, [r3, #0]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	701a      	strb	r2, [r3, #0]
    		 rxBff++;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	60fb      	str	r3, [r7, #12]
    	 for(int i = 1; i <= 8; i++){
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	3301      	adds	r3, #1
 8000c56:	60bb      	str	r3, [r7, #8]
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	2b08      	cmp	r3, #8
 8000c5c:	ddf0      	ble.n	8000c40 <HAL_UARTEx_RxEventCallback+0x40>
    	 }
    	 HAL_IWDG_Refresh(&hiwdg);
 8000c5e:	4813      	ldr	r0, [pc, #76]	; (8000cac <HAL_UARTEx_RxEventCallback+0xac>)
 8000c60:	f001 fa2e 	bl	80020c0 <HAL_IWDG_Refresh>
     	 ctrlMotor(ctrlMotor_1, setPointSpeed.speed_1, speedBuffer.speed_1, 1.0 , 1.0);
 8000c64:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <HAL_UARTEx_RxEventCallback+0xb0>)
 8000c66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <HAL_UARTEx_RxEventCallback+0x9c>)
 8000c6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c72:	4619      	mov	r1, r3
 8000c74:	4a0f      	ldr	r2, [pc, #60]	; (8000cb4 <HAL_UARTEx_RxEventCallback+0xb4>)
 8000c76:	f04f 0300 	mov.w	r3, #0
 8000c7a:	4c0f      	ldr	r4, [pc, #60]	; (8000cb8 <HAL_UARTEx_RxEventCallback+0xb8>)
 8000c7c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	4c0c      	ldr	r4, [pc, #48]	; (8000cb8 <HAL_UARTEx_RxEventCallback+0xb8>)
 8000c86:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8000c8a:	9100      	str	r1, [sp, #0]
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c90:	f7ff ff08 	bl	8000aa4 <ctrlMotor>

     }
}
 8000c94:	bf00      	nop
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd90      	pop	{r4, r7, pc}
 8000c9c:	20000108 	.word	0x20000108
 8000ca0:	20000110 	.word	0x20000110
 8000ca4:	2000003c 	.word	0x2000003c
 8000ca8:	200000b0 	.word	0x200000b0
 8000cac:	20000098 	.word	0x20000098
 8000cb0:	20000100 	.word	0x20000100
 8000cb4:	200000f4 	.word	0x200000f4
 8000cb8:	3ff00000 	.word	0x3ff00000

08000cbc <initCtrlMotor>:

void initCtrlMotor(void){
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
	ctrlMotor_1.htim = &htim1;
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <initCtrlMotor+0x18>)
 8000cc2:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <initCtrlMotor+0x1c>)
 8000cc4:	601a      	str	r2, [r3, #0]
	ctrlMotor_1.Channel = TIM_CHANNEL_1;
 8000cc6:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <initCtrlMotor+0x18>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	605a      	str	r2, [r3, #4]

}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr
 8000cd4:	200000f4 	.word	0x200000f4
 8000cd8:	2000011c 	.word	0x2000011c

08000cdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce0:	f000 fc0a 	bl	80014f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ce4:	f000 f848 	bl	8000d78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce8:	f000 f9d0 	bl	800108c <MX_GPIO_Init>
  MX_DMA_Init();
 8000cec:	f000 f9b0 	bl	8001050 <MX_DMA_Init>
  MX_SPI1_Init();
 8000cf0:	f000 f8a4 	bl	8000e3c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000cf4:	f000 f982 	bl	8000ffc <MX_USART1_UART_Init>
  MX_IWDG_Init();
 8000cf8:	f000 f886 	bl	8000e08 <MX_IWDG_Init>
  MX_TIM1_Init();
 8000cfc:	f000 f8d6 	bl	8000eac <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d00:	2100      	movs	r1, #0
 8000d02:	4818      	ldr	r0, [pc, #96]	; (8000d64 <main+0x88>)
 8000d04:	f001 ffe0 	bl	8002cc8 <HAL_TIM_PWM_Start>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, rxBuffer, RX_SIZE);
 8000d08:	220a      	movs	r2, #10
 8000d0a:	4917      	ldr	r1, [pc, #92]	; (8000d68 <main+0x8c>)
 8000d0c:	4817      	ldr	r0, [pc, #92]	; (8000d6c <main+0x90>)
 8000d0e:	f002 fc45 	bl	800359c <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000d12:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <main+0x94>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <main+0x94>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f022 0204 	bic.w	r2, r2, #4
 8000d20:	601a      	str	r2, [r3, #0]

  initCtrlMotor();
 8000d22:	f7ff ffcb 	bl	8000cbc <initCtrlMotor>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  setPointSpeed.speed_1 = 150;
 8000d26:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <main+0x98>)
 8000d28:	2296      	movs	r2, #150	; 0x96
 8000d2a:	801a      	strh	r2, [r3, #0]
	  HAL_Delay(5000);
 8000d2c:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d30:	f000 fc44 	bl	80015bc <HAL_Delay>
	  setPointSpeed.speed_1 = 0;
 8000d34:	4b0f      	ldr	r3, [pc, #60]	; (8000d74 <main+0x98>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	801a      	strh	r2, [r3, #0]
	  HAL_Delay(5000);
 8000d3a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d3e:	f000 fc3d 	bl	80015bc <HAL_Delay>
	  setPointSpeed.speed_1 = -150;
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <main+0x98>)
 8000d44:	f64f 726a 	movw	r2, #65386	; 0xff6a
 8000d48:	801a      	strh	r2, [r3, #0]
	  HAL_Delay(5000);
 8000d4a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d4e:	f000 fc35 	bl	80015bc <HAL_Delay>
	  setPointSpeed.speed_1 = 0;
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <main+0x98>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	801a      	strh	r2, [r3, #0]
	  HAL_Delay(5000);
 8000d58:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d5c:	f000 fc2e 	bl	80015bc <HAL_Delay>
	  setPointSpeed.speed_1 = 150;
 8000d60:	e7e1      	b.n	8000d26 <main+0x4a>
 8000d62:	bf00      	nop
 8000d64:	2000011c 	.word	0x2000011c
 8000d68:	20000110 	.word	0x20000110
 8000d6c:	2000003c 	.word	0x2000003c
 8000d70:	200000b0 	.word	0x200000b0
 8000d74:	20000100 	.word	0x20000100

08000d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b090      	sub	sp, #64	; 0x40
 8000d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d7e:	f107 0318 	add.w	r3, r7, #24
 8000d82:	2228      	movs	r2, #40	; 0x28
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f003 f954 	bl	8004034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000d9a:	2309      	movs	r3, #9
 8000d9c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000da2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da8:	2301      	movs	r3, #1
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000dac:	2301      	movs	r3, #1
 8000dae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db0:	2302      	movs	r3, #2
 8000db2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000db4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000db8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000dba:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc0:	f107 0318 	add.w	r3, r7, #24
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f001 f98b 	bl	80020e0 <HAL_RCC_OscConfig>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000dd0:	f000 f9ba 	bl	8001148 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd4:	230f      	movs	r3, #15
 8000dd6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000de0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000de4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	2102      	movs	r1, #2
 8000dee:	4618      	mov	r0, r3
 8000df0:	f001 fbf6 	bl	80025e0 <HAL_RCC_ClockConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000dfa:	f000 f9a5 	bl	8001148 <Error_Handler>
  }
}
 8000dfe:	bf00      	nop
 8000e00:	3740      	adds	r7, #64	; 0x40
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000e0c:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <MX_IWDG_Init+0x2c>)
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <MX_IWDG_Init+0x30>)
 8000e10:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000e12:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <MX_IWDG_Init+0x2c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 149;
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <MX_IWDG_Init+0x2c>)
 8000e1a:	2295      	movs	r2, #149	; 0x95
 8000e1c:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000e1e:	4805      	ldr	r0, [pc, #20]	; (8000e34 <MX_IWDG_Init+0x2c>)
 8000e20:	f001 f90c 	bl	800203c <HAL_IWDG_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_IWDG_Init+0x26>
  {
    Error_Handler();
 8000e2a:	f000 f98d 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000098 	.word	0x20000098
 8000e38:	40003000 	.word	0x40003000

08000e3c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e40:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <MX_SPI1_Init+0x68>)
 8000e42:	4a19      	ldr	r2, [pc, #100]	; (8000ea8 <MX_SPI1_Init+0x6c>)
 8000e44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e46:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <MX_SPI1_Init+0x68>)
 8000e48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <MX_SPI1_Init+0x68>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <MX_SPI1_Init+0x68>)
 8000e56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e5a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e5c:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <MX_SPI1_Init+0x68>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <MX_SPI1_Init+0x68>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000e68:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <MX_SPI1_Init+0x68>)
 8000e6a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000e6e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <MX_SPI1_Init+0x68>)
 8000e72:	2228      	movs	r2, #40	; 0x28
 8000e74:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <MX_SPI1_Init+0x68>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e7c:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <MX_SPI1_Init+0x68>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e82:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <MX_SPI1_Init+0x68>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <MX_SPI1_Init+0x68>)
 8000e8a:	220a      	movs	r2, #10
 8000e8c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e8e:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <MX_SPI1_Init+0x68>)
 8000e90:	f001 fd42 	bl	8002918 <HAL_SPI_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000e9a:	f000 f955 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000170 	.word	0x20000170
 8000ea8:	40013000 	.word	0x40013000

08000eac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b092      	sub	sp, #72	; 0x48
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
 8000ecc:	615a      	str	r2, [r3, #20]
 8000ece:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ed0:	1d3b      	adds	r3, r7, #4
 8000ed2:	2220      	movs	r2, #32
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f003 f8ac 	bl	8004034 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000edc:	4b45      	ldr	r3, [pc, #276]	; (8000ff4 <MX_TIM1_Init+0x148>)
 8000ede:	4a46      	ldr	r2, [pc, #280]	; (8000ff8 <MX_TIM1_Init+0x14c>)
 8000ee0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000ee2:	4b44      	ldr	r3, [pc, #272]	; (8000ff4 <MX_TIM1_Init+0x148>)
 8000ee4:	2247      	movs	r2, #71	; 0x47
 8000ee6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee8:	4b42      	ldr	r3, [pc, #264]	; (8000ff4 <MX_TIM1_Init+0x148>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000eee:	4b41      	ldr	r3, [pc, #260]	; (8000ff4 <MX_TIM1_Init+0x148>)
 8000ef0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ef4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef6:	4b3f      	ldr	r3, [pc, #252]	; (8000ff4 <MX_TIM1_Init+0x148>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000efc:	4b3d      	ldr	r3, [pc, #244]	; (8000ff4 <MX_TIM1_Init+0x148>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f02:	4b3c      	ldr	r3, [pc, #240]	; (8000ff4 <MX_TIM1_Init+0x148>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f08:	483a      	ldr	r0, [pc, #232]	; (8000ff4 <MX_TIM1_Init+0x148>)
 8000f0a:	f001 fe8e 	bl	8002c2a <HAL_TIM_PWM_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000f14:	f000 f918 	bl	8001148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f24:	4619      	mov	r1, r3
 8000f26:	4833      	ldr	r0, [pc, #204]	; (8000ff4 <MX_TIM1_Init+0x148>)
 8000f28:	f002 fa3c 	bl	80033a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000f32:	f000 f909 	bl	8001148 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f36:	2360      	movs	r3, #96	; 0x60
 8000f38:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f42:	2300      	movs	r3, #0
 8000f44:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f56:	2200      	movs	r2, #0
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4826      	ldr	r0, [pc, #152]	; (8000ff4 <MX_TIM1_Init+0x148>)
 8000f5c:	f001 ff56 	bl	8002e0c <HAL_TIM_PWM_ConfigChannel>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000f66:	f000 f8ef 	bl	8001148 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f6e:	2204      	movs	r2, #4
 8000f70:	4619      	mov	r1, r3
 8000f72:	4820      	ldr	r0, [pc, #128]	; (8000ff4 <MX_TIM1_Init+0x148>)
 8000f74:	f001 ff4a 	bl	8002e0c <HAL_TIM_PWM_ConfigChannel>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000f7e:	f000 f8e3 	bl	8001148 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f86:	2208      	movs	r2, #8
 8000f88:	4619      	mov	r1, r3
 8000f8a:	481a      	ldr	r0, [pc, #104]	; (8000ff4 <MX_TIM1_Init+0x148>)
 8000f8c:	f001 ff3e 	bl	8002e0c <HAL_TIM_PWM_ConfigChannel>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8000f96:	f000 f8d7 	bl	8001148 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9e:	220c      	movs	r2, #12
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4814      	ldr	r0, [pc, #80]	; (8000ff4 <MX_TIM1_Init+0x148>)
 8000fa4:	f001 ff32 	bl	8002e0c <HAL_TIM_PWM_ConfigChannel>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000fae:	f000 f8cb 	bl	8001148 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4807      	ldr	r0, [pc, #28]	; (8000ff4 <MX_TIM1_Init+0x148>)
 8000fd6:	f002 fa43 	bl	8003460 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000fe0:	f000 f8b2 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fe4:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <MX_TIM1_Init+0x148>)
 8000fe6:	f000 f955 	bl	8001294 <HAL_TIM_MspPostInit>

}
 8000fea:	bf00      	nop
 8000fec:	3748      	adds	r7, #72	; 0x48
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	2000011c 	.word	0x2000011c
 8000ff8:	40012c00 	.word	0x40012c00

08000ffc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <MX_USART1_UART_Init+0x4c>)
 8001002:	4a12      	ldr	r2, [pc, #72]	; (800104c <MX_USART1_UART_Init+0x50>)
 8001004:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <MX_USART1_UART_Init+0x4c>)
 8001008:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800100c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800100e:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <MX_USART1_UART_Init+0x4c>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <MX_USART1_UART_Init+0x4c>)
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <MX_USART1_UART_Init+0x4c>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <MX_USART1_UART_Init+0x4c>)
 8001022:	220c      	movs	r2, #12
 8001024:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001026:	4b08      	ldr	r3, [pc, #32]	; (8001048 <MX_USART1_UART_Init+0x4c>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <MX_USART1_UART_Init+0x4c>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001032:	4805      	ldr	r0, [pc, #20]	; (8001048 <MX_USART1_UART_Init+0x4c>)
 8001034:	f002 fa65 	bl	8003502 <HAL_UART_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800103e:	f000 f883 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	2000003c 	.word	0x2000003c
 800104c:	40013800 	.word	0x40013800

08001050 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001056:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <MX_DMA_Init+0x38>)
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	4a0b      	ldr	r2, [pc, #44]	; (8001088 <MX_DMA_Init+0x38>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6153      	str	r3, [r2, #20]
 8001062:	4b09      	ldr	r3, [pc, #36]	; (8001088 <MX_DMA_Init+0x38>)
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	200f      	movs	r0, #15
 8001074:	f000 fb9b 	bl	80017ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001078:	200f      	movs	r0, #15
 800107a:	f000 fbb4 	bl	80017e6 <HAL_NVIC_EnableIRQ>

}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40021000 	.word	0x40021000

0800108c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001092:	f107 0310 	add.w	r3, r7, #16
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a0:	4b26      	ldr	r3, [pc, #152]	; (800113c <MX_GPIO_Init+0xb0>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	4a25      	ldr	r2, [pc, #148]	; (800113c <MX_GPIO_Init+0xb0>)
 80010a6:	f043 0320 	orr.w	r3, r3, #32
 80010aa:	6193      	str	r3, [r2, #24]
 80010ac:	4b23      	ldr	r3, [pc, #140]	; (800113c <MX_GPIO_Init+0xb0>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	f003 0320 	and.w	r3, r3, #32
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b8:	4b20      	ldr	r3, [pc, #128]	; (800113c <MX_GPIO_Init+0xb0>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	4a1f      	ldr	r2, [pc, #124]	; (800113c <MX_GPIO_Init+0xb0>)
 80010be:	f043 0304 	orr.w	r3, r3, #4
 80010c2:	6193      	str	r3, [r2, #24]
 80010c4:	4b1d      	ldr	r3, [pc, #116]	; (800113c <MX_GPIO_Init+0xb0>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d0:	4b1a      	ldr	r3, [pc, #104]	; (800113c <MX_GPIO_Init+0xb0>)
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	4a19      	ldr	r2, [pc, #100]	; (800113c <MX_GPIO_Init+0xb0>)
 80010d6:	f043 0308 	orr.w	r3, r3, #8
 80010da:	6193      	str	r3, [r2, #24]
 80010dc:	4b17      	ldr	r3, [pc, #92]	; (800113c <MX_GPIO_Init+0xb0>)
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	f003 0308 	and.w	r3, r3, #8
 80010e4:	607b      	str	r3, [r7, #4]
 80010e6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2107      	movs	r1, #7
 80010ec:	4814      	ldr	r0, [pc, #80]	; (8001140 <MX_GPIO_Init+0xb4>)
 80010ee:	f000 ff8d 	bl	800200c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2104      	movs	r1, #4
 80010f6:	4813      	ldr	r0, [pc, #76]	; (8001144 <MX_GPIO_Init+0xb8>)
 80010f8:	f000 ff88 	bl	800200c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80010fc:	2307      	movs	r3, #7
 80010fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001100:	2301      	movs	r3, #1
 8001102:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001108:	2302      	movs	r3, #2
 800110a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110c:	f107 0310 	add.w	r3, r7, #16
 8001110:	4619      	mov	r1, r3
 8001112:	480b      	ldr	r0, [pc, #44]	; (8001140 <MX_GPIO_Init+0xb4>)
 8001114:	f000 fe20 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001118:	2304      	movs	r3, #4
 800111a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800111c:	2301      	movs	r3, #1
 800111e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	2302      	movs	r3, #2
 8001126:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	4619      	mov	r1, r3
 800112e:	4805      	ldr	r0, [pc, #20]	; (8001144 <MX_GPIO_Init+0xb8>)
 8001130:	f000 fe12 	bl	8001d58 <HAL_GPIO_Init>

}
 8001134:	bf00      	nop
 8001136:	3720      	adds	r7, #32
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40021000 	.word	0x40021000
 8001140:	40010800 	.word	0x40010800
 8001144:	40010c00 	.word	0x40010c00

08001148 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800114c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800114e:	e7fe      	b.n	800114e <Error_Handler+0x6>

08001150 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <HAL_MspInit+0x5c>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	4a14      	ldr	r2, [pc, #80]	; (80011ac <HAL_MspInit+0x5c>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6193      	str	r3, [r2, #24]
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_MspInit+0x5c>)
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <HAL_MspInit+0x5c>)
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <HAL_MspInit+0x5c>)
 8001174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001178:	61d3      	str	r3, [r2, #28]
 800117a:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <HAL_MspInit+0x5c>)
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001186:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <HAL_MspInit+0x60>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <HAL_MspInit+0x60>)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a2:	bf00      	nop
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40010000 	.word	0x40010000

080011b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a1f      	ldr	r2, [pc, #124]	; (800124c <HAL_SPI_MspInit+0x98>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d137      	bne.n	8001244 <HAL_SPI_MspInit+0x90>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011d4:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <HAL_SPI_MspInit+0x9c>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	4a1d      	ldr	r2, [pc, #116]	; (8001250 <HAL_SPI_MspInit+0x9c>)
 80011da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011de:	6193      	str	r3, [r2, #24]
 80011e0:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <HAL_SPI_MspInit+0x9c>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ec:	4b18      	ldr	r3, [pc, #96]	; (8001250 <HAL_SPI_MspInit+0x9c>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	4a17      	ldr	r2, [pc, #92]	; (8001250 <HAL_SPI_MspInit+0x9c>)
 80011f2:	f043 0304 	orr.w	r3, r3, #4
 80011f6:	6193      	str	r3, [r2, #24]
 80011f8:	4b15      	ldr	r3, [pc, #84]	; (8001250 <HAL_SPI_MspInit+0x9c>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001204:	23b0      	movs	r3, #176	; 0xb0
 8001206:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001208:	2302      	movs	r3, #2
 800120a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800120c:	2303      	movs	r3, #3
 800120e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	4619      	mov	r1, r3
 8001216:	480f      	ldr	r0, [pc, #60]	; (8001254 <HAL_SPI_MspInit+0xa0>)
 8001218:	f000 fd9e 	bl	8001d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800121c:	2340      	movs	r3, #64	; 0x40
 800121e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001228:	f107 0310 	add.w	r3, r7, #16
 800122c:	4619      	mov	r1, r3
 800122e:	4809      	ldr	r0, [pc, #36]	; (8001254 <HAL_SPI_MspInit+0xa0>)
 8001230:	f000 fd92 	bl	8001d58 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 1, 0);
 8001234:	2200      	movs	r2, #0
 8001236:	2101      	movs	r1, #1
 8001238:	2023      	movs	r0, #35	; 0x23
 800123a:	f000 fab8 	bl	80017ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800123e:	2023      	movs	r0, #35	; 0x23
 8001240:	f000 fad1 	bl	80017e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001244:	bf00      	nop
 8001246:	3720      	adds	r7, #32
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40013000 	.word	0x40013000
 8001250:	40021000 	.word	0x40021000
 8001254:	40010800 	.word	0x40010800

08001258 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001258:	b480      	push	{r7}
 800125a:	b085      	sub	sp, #20
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a09      	ldr	r2, [pc, #36]	; (800128c <HAL_TIM_PWM_MspInit+0x34>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d10b      	bne.n	8001282 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <HAL_TIM_PWM_MspInit+0x38>)
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	4a08      	ldr	r2, [pc, #32]	; (8001290 <HAL_TIM_PWM_MspInit+0x38>)
 8001270:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001274:	6193      	str	r3, [r2, #24]
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <HAL_TIM_PWM_MspInit+0x38>)
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001282:	bf00      	nop
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr
 800128c:	40012c00 	.word	0x40012c00
 8001290:	40021000 	.word	0x40021000

08001294 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129c:	f107 0310 	add.w	r3, r7, #16
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a10      	ldr	r2, [pc, #64]	; (80012f0 <HAL_TIM_MspPostInit+0x5c>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d118      	bne.n	80012e6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b4:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <HAL_TIM_MspPostInit+0x60>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	4a0e      	ldr	r2, [pc, #56]	; (80012f4 <HAL_TIM_MspPostInit+0x60>)
 80012ba:	f043 0304 	orr.w	r3, r3, #4
 80012be:	6193      	str	r3, [r2, #24]
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <HAL_TIM_MspPostInit+0x60>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80012cc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80012d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2302      	movs	r3, #2
 80012d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	f107 0310 	add.w	r3, r7, #16
 80012de:	4619      	mov	r1, r3
 80012e0:	4805      	ldr	r0, [pc, #20]	; (80012f8 <HAL_TIM_MspPostInit+0x64>)
 80012e2:	f000 fd39 	bl	8001d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80012e6:	bf00      	nop
 80012e8:	3720      	adds	r7, #32
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40012c00 	.word	0x40012c00
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40010800 	.word	0x40010800

080012fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	; 0x28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a39      	ldr	r2, [pc, #228]	; (80013fc <HAL_UART_MspInit+0x100>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d16b      	bne.n	80013f4 <HAL_UART_MspInit+0xf8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800131c:	4b38      	ldr	r3, [pc, #224]	; (8001400 <HAL_UART_MspInit+0x104>)
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	4a37      	ldr	r2, [pc, #220]	; (8001400 <HAL_UART_MspInit+0x104>)
 8001322:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001326:	6193      	str	r3, [r2, #24]
 8001328:	4b35      	ldr	r3, [pc, #212]	; (8001400 <HAL_UART_MspInit+0x104>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001330:	613b      	str	r3, [r7, #16]
 8001332:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001334:	4b32      	ldr	r3, [pc, #200]	; (8001400 <HAL_UART_MspInit+0x104>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	4a31      	ldr	r2, [pc, #196]	; (8001400 <HAL_UART_MspInit+0x104>)
 800133a:	f043 0308 	orr.w	r3, r3, #8
 800133e:	6193      	str	r3, [r2, #24]
 8001340:	4b2f      	ldr	r3, [pc, #188]	; (8001400 <HAL_UART_MspInit+0x104>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	f003 0308 	and.w	r3, r3, #8
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800134c:	2340      	movs	r3, #64	; 0x40
 800134e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001354:	2303      	movs	r3, #3
 8001356:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	4619      	mov	r1, r3
 800135e:	4829      	ldr	r0, [pc, #164]	; (8001404 <HAL_UART_MspInit+0x108>)
 8001360:	f000 fcfa 	bl	8001d58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001364:	2380      	movs	r3, #128	; 0x80
 8001366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001368:	2300      	movs	r3, #0
 800136a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4619      	mov	r1, r3
 8001376:	4823      	ldr	r0, [pc, #140]	; (8001404 <HAL_UART_MspInit+0x108>)
 8001378:	f000 fcee 	bl	8001d58 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 800137c:	4b22      	ldr	r3, [pc, #136]	; (8001408 <HAL_UART_MspInit+0x10c>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
 8001392:	4a1d      	ldr	r2, [pc, #116]	; (8001408 <HAL_UART_MspInit+0x10c>)
 8001394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001396:	6053      	str	r3, [r2, #4]

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001398:	4b1c      	ldr	r3, [pc, #112]	; (800140c <HAL_UART_MspInit+0x110>)
 800139a:	4a1d      	ldr	r2, [pc, #116]	; (8001410 <HAL_UART_MspInit+0x114>)
 800139c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800139e:	4b1b      	ldr	r3, [pc, #108]	; (800140c <HAL_UART_MspInit+0x110>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013a4:	4b19      	ldr	r3, [pc, #100]	; (800140c <HAL_UART_MspInit+0x110>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013aa:	4b18      	ldr	r3, [pc, #96]	; (800140c <HAL_UART_MspInit+0x110>)
 80013ac:	2280      	movs	r2, #128	; 0x80
 80013ae:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013b0:	4b16      	ldr	r3, [pc, #88]	; (800140c <HAL_UART_MspInit+0x110>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <HAL_UART_MspInit+0x110>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80013bc:	4b13      	ldr	r3, [pc, #76]	; (800140c <HAL_UART_MspInit+0x110>)
 80013be:	2200      	movs	r2, #0
 80013c0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013c2:	4b12      	ldr	r3, [pc, #72]	; (800140c <HAL_UART_MspInit+0x110>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80013c8:	4810      	ldr	r0, [pc, #64]	; (800140c <HAL_UART_MspInit+0x110>)
 80013ca:	f000 fa27 	bl	800181c <HAL_DMA_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <HAL_UART_MspInit+0xdc>
    {
      Error_Handler();
 80013d4:	f7ff feb8 	bl	8001148 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a0c      	ldr	r2, [pc, #48]	; (800140c <HAL_UART_MspInit+0x110>)
 80013dc:	639a      	str	r2, [r3, #56]	; 0x38
 80013de:	4a0b      	ldr	r2, [pc, #44]	; (800140c <HAL_UART_MspInit+0x110>)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2100      	movs	r1, #0
 80013e8:	2025      	movs	r0, #37	; 0x25
 80013ea:	f000 f9e0 	bl	80017ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013ee:	2025      	movs	r0, #37	; 0x25
 80013f0:	f000 f9f9 	bl	80017e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013f4:	bf00      	nop
 80013f6:	3728      	adds	r7, #40	; 0x28
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40013800 	.word	0x40013800
 8001400:	40021000 	.word	0x40021000
 8001404:	40010c00 	.word	0x40010c00
 8001408:	40010000 	.word	0x40010000
 800140c:	200000b0 	.word	0x200000b0
 8001410:	40020058 	.word	0x40020058

08001414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001418:	e7fe      	b.n	8001418 <NMI_Handler+0x4>

0800141a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800141e:	e7fe      	b.n	800141e <HardFault_Handler+0x4>

08001420 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001424:	e7fe      	b.n	8001424 <MemManage_Handler+0x4>

08001426 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800142a:	e7fe      	b.n	800142a <BusFault_Handler+0x4>

0800142c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <UsageFault_Handler+0x4>

08001432 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr

0800143e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr

0800144a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr

08001456 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800145a:	f000 f893 	bl	8001584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
	...

08001464 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001468:	4802      	ldr	r0, [pc, #8]	; (8001474 <DMA1_Channel5_IRQHandler+0x10>)
 800146a:	f000 fb41 	bl	8001af0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	200000b0 	.word	0x200000b0

08001478 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <SPI1_IRQHandler+0x10>)
 800147e:	f001 facf 	bl	8002a20 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000170 	.word	0x20000170

0800148c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001490:	4802      	ldr	r0, [pc, #8]	; (800149c <USART1_IRQHandler+0x10>)
 8001492:	f002 f8d3 	bl	800363c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	2000003c 	.word	0x2000003c

080014a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr

080014ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014ac:	480c      	ldr	r0, [pc, #48]	; (80014e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014ae:	490d      	ldr	r1, [pc, #52]	; (80014e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014b0:	4a0d      	ldr	r2, [pc, #52]	; (80014e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b4:	e002      	b.n	80014bc <LoopCopyDataInit>

080014b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ba:	3304      	adds	r3, #4

080014bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c0:	d3f9      	bcc.n	80014b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014c2:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014c4:	4c0a      	ldr	r4, [pc, #40]	; (80014f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c8:	e001      	b.n	80014ce <LoopFillZerobss>

080014ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014cc:	3204      	adds	r2, #4

080014ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d0:	d3fb      	bcc.n	80014ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014d2:	f7ff ffe5 	bl	80014a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014d6:	f002 fd89 	bl	8003fec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014da:	f7ff fbff 	bl	8000cdc <main>
  bx lr
 80014de:	4770      	bx	lr
  ldr r0, =_sdata
 80014e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80014e8:	08004090 	.word	0x08004090
  ldr r2, =_sbss
 80014ec:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80014f0:	200001d8 	.word	0x200001d8

080014f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014f4:	e7fe      	b.n	80014f4 <ADC1_2_IRQHandler>
	...

080014f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014fc:	4b08      	ldr	r3, [pc, #32]	; (8001520 <HAL_Init+0x28>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a07      	ldr	r2, [pc, #28]	; (8001520 <HAL_Init+0x28>)
 8001502:	f043 0310 	orr.w	r3, r3, #16
 8001506:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001508:	2003      	movs	r0, #3
 800150a:	f000 f945 	bl	8001798 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800150e:	2000      	movs	r0, #0
 8001510:	f000 f808 	bl	8001524 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001514:	f7ff fe1c 	bl	8001150 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40022000 	.word	0x40022000

08001524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_InitTick+0x54>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_InitTick+0x58>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4619      	mov	r1, r3
 8001536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153a:	fbb3 f3f1 	udiv	r3, r3, r1
 800153e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001542:	4618      	mov	r0, r3
 8001544:	f000 f95d 	bl	8001802 <HAL_SYSTICK_Config>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e00e      	b.n	8001570 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b0f      	cmp	r3, #15
 8001556:	d80a      	bhi.n	800156e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001558:	2200      	movs	r2, #0
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	f04f 30ff 	mov.w	r0, #4294967295
 8001560:	f000 f925 	bl	80017ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001564:	4a06      	ldr	r2, [pc, #24]	; (8001580 <HAL_InitTick+0x5c>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	e000      	b.n	8001570 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
}
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000000 	.word	0x20000000
 800157c:	20000008 	.word	0x20000008
 8001580:	20000004 	.word	0x20000004

08001584 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <HAL_IncTick+0x1c>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <HAL_IncTick+0x20>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4413      	add	r3, r2
 8001594:	4a03      	ldr	r2, [pc, #12]	; (80015a4 <HAL_IncTick+0x20>)
 8001596:	6013      	str	r3, [r2, #0]
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	bc80      	pop	{r7}
 800159e:	4770      	bx	lr
 80015a0:	20000008 	.word	0x20000008
 80015a4:	200001d4 	.word	0x200001d4

080015a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return uwTick;
 80015ac:	4b02      	ldr	r3, [pc, #8]	; (80015b8 <HAL_GetTick+0x10>)
 80015ae:	681b      	ldr	r3, [r3, #0]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr
 80015b8:	200001d4 	.word	0x200001d4

080015bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015c4:	f7ff fff0 	bl	80015a8 <HAL_GetTick>
 80015c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015d4:	d005      	beq.n	80015e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <HAL_Delay+0x40>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	461a      	mov	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4413      	add	r3, r2
 80015e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015e2:	bf00      	nop
 80015e4:	f7ff ffe0 	bl	80015a8 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d8f7      	bhi.n	80015e4 <HAL_Delay+0x28>
  {
  }
}
 80015f4:	bf00      	nop
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000008 	.word	0x20000008

08001600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <__NVIC_SetPriorityGrouping+0x44>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800161c:	4013      	ands	r3, r2
 800161e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800162c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001632:	4a04      	ldr	r2, [pc, #16]	; (8001644 <__NVIC_SetPriorityGrouping+0x44>)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	60d3      	str	r3, [r2, #12]
}
 8001638:	bf00      	nop
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800164c:	4b04      	ldr	r3, [pc, #16]	; (8001660 <__NVIC_GetPriorityGrouping+0x18>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	0a1b      	lsrs	r3, r3, #8
 8001652:	f003 0307 	and.w	r3, r3, #7
}
 8001656:	4618      	mov	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	2b00      	cmp	r3, #0
 8001674:	db0b      	blt.n	800168e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	f003 021f 	and.w	r2, r3, #31
 800167c:	4906      	ldr	r1, [pc, #24]	; (8001698 <__NVIC_EnableIRQ+0x34>)
 800167e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001682:	095b      	lsrs	r3, r3, #5
 8001684:	2001      	movs	r0, #1
 8001686:	fa00 f202 	lsl.w	r2, r0, r2
 800168a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	e000e100 	.word	0xe000e100

0800169c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	6039      	str	r1, [r7, #0]
 80016a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	db0a      	blt.n	80016c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	490c      	ldr	r1, [pc, #48]	; (80016e8 <__NVIC_SetPriority+0x4c>)
 80016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ba:	0112      	lsls	r2, r2, #4
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	440b      	add	r3, r1
 80016c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c4:	e00a      	b.n	80016dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4908      	ldr	r1, [pc, #32]	; (80016ec <__NVIC_SetPriority+0x50>)
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	3b04      	subs	r3, #4
 80016d4:	0112      	lsls	r2, r2, #4
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	440b      	add	r3, r1
 80016da:	761a      	strb	r2, [r3, #24]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000e100 	.word	0xe000e100
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b089      	sub	sp, #36	; 0x24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f1c3 0307 	rsb	r3, r3, #7
 800170a:	2b04      	cmp	r3, #4
 800170c:	bf28      	it	cs
 800170e:	2304      	movcs	r3, #4
 8001710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3304      	adds	r3, #4
 8001716:	2b06      	cmp	r3, #6
 8001718:	d902      	bls.n	8001720 <NVIC_EncodePriority+0x30>
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3b03      	subs	r3, #3
 800171e:	e000      	b.n	8001722 <NVIC_EncodePriority+0x32>
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	f04f 32ff 	mov.w	r2, #4294967295
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43da      	mvns	r2, r3
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	401a      	ands	r2, r3
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001738:	f04f 31ff 	mov.w	r1, #4294967295
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	fa01 f303 	lsl.w	r3, r1, r3
 8001742:	43d9      	mvns	r1, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	4313      	orrs	r3, r2
         );
}
 800174a:	4618      	mov	r0, r3
 800174c:	3724      	adds	r7, #36	; 0x24
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr

08001754 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	3b01      	subs	r3, #1
 8001760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001764:	d301      	bcc.n	800176a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001766:	2301      	movs	r3, #1
 8001768:	e00f      	b.n	800178a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176a:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <SysTick_Config+0x40>)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	3b01      	subs	r3, #1
 8001770:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001772:	210f      	movs	r1, #15
 8001774:	f04f 30ff 	mov.w	r0, #4294967295
 8001778:	f7ff ff90 	bl	800169c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800177c:	4b05      	ldr	r3, [pc, #20]	; (8001794 <SysTick_Config+0x40>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001782:	4b04      	ldr	r3, [pc, #16]	; (8001794 <SysTick_Config+0x40>)
 8001784:	2207      	movs	r2, #7
 8001786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	e000e010 	.word	0xe000e010

08001798 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7ff ff2d 	bl	8001600 <__NVIC_SetPriorityGrouping>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b086      	sub	sp, #24
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	4603      	mov	r3, r0
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	607a      	str	r2, [r7, #4]
 80017ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017c0:	f7ff ff42 	bl	8001648 <__NVIC_GetPriorityGrouping>
 80017c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	68b9      	ldr	r1, [r7, #8]
 80017ca:	6978      	ldr	r0, [r7, #20]
 80017cc:	f7ff ff90 	bl	80016f0 <NVIC_EncodePriority>
 80017d0:	4602      	mov	r2, r0
 80017d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d6:	4611      	mov	r1, r2
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ff5f 	bl	800169c <__NVIC_SetPriority>
}
 80017de:	bf00      	nop
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	4603      	mov	r3, r0
 80017ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff35 	bl	8001664 <__NVIC_EnableIRQ>
}
 80017fa:	bf00      	nop
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff ffa2 	bl	8001754 <SysTick_Config>
 8001810:	4603      	mov	r3, r0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e043      	b.n	80018ba <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	461a      	mov	r2, r3
 8001838:	4b22      	ldr	r3, [pc, #136]	; (80018c4 <HAL_DMA_Init+0xa8>)
 800183a:	4413      	add	r3, r2
 800183c:	4a22      	ldr	r2, [pc, #136]	; (80018c8 <HAL_DMA_Init+0xac>)
 800183e:	fba2 2303 	umull	r2, r3, r2, r3
 8001842:	091b      	lsrs	r3, r3, #4
 8001844:	009a      	lsls	r2, r3, #2
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a1f      	ldr	r2, [pc, #124]	; (80018cc <HAL_DMA_Init+0xb0>)
 800184e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2202      	movs	r2, #2
 8001854:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001866:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800186a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001874:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001880:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800188c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	4313      	orrs	r3, r2
 8001898:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr
 80018c4:	bffdfff8 	.word	0xbffdfff8
 80018c8:	cccccccd 	.word	0xcccccccd
 80018cc:	40020000 	.word	0x40020000

080018d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
 80018dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018de:	2300      	movs	r3, #0
 80018e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d101      	bne.n	80018f0 <HAL_DMA_Start_IT+0x20>
 80018ec:	2302      	movs	r3, #2
 80018ee:	e04a      	b.n	8001986 <HAL_DMA_Start_IT+0xb6>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d13a      	bne.n	8001978 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2202      	movs	r2, #2
 8001906:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2200      	movs	r2, #0
 800190e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 0201 	bic.w	r2, r2, #1
 800191e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	68b9      	ldr	r1, [r7, #8]
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f000 f9e8 	bl	8001cfc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001930:	2b00      	cmp	r3, #0
 8001932:	d008      	beq.n	8001946 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f042 020e 	orr.w	r2, r2, #14
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	e00f      	b.n	8001966 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0204 	bic.w	r2, r2, #4
 8001954:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f042 020a 	orr.w	r2, r2, #10
 8001964:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f042 0201 	orr.w	r2, r2, #1
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	e005      	b.n	8001984 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001980:	2302      	movs	r3, #2
 8001982:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001984:	7dfb      	ldrb	r3, [r7, #23]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800198e:	b480      	push	{r7}
 8001990:	b085      	sub	sp, #20
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001996:	2300      	movs	r3, #0
 8001998:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d008      	beq.n	80019b6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2204      	movs	r2, #4
 80019a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e020      	b.n	80019f8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 020e 	bic.w	r2, r2, #14
 80019c4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 0201 	bic.w	r2, r2, #1
 80019d4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019de:	2101      	movs	r1, #1
 80019e0:	fa01 f202 	lsl.w	r2, r1, r2
 80019e4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr
	...

08001a04 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d005      	beq.n	8001a26 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2204      	movs	r2, #4
 8001a1e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	73fb      	strb	r3, [r7, #15]
 8001a24:	e051      	b.n	8001aca <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 020e 	bic.w	r2, r2, #14
 8001a34:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0201 	bic.w	r2, r2, #1
 8001a44:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a22      	ldr	r2, [pc, #136]	; (8001ad4 <HAL_DMA_Abort_IT+0xd0>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d029      	beq.n	8001aa4 <HAL_DMA_Abort_IT+0xa0>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a20      	ldr	r2, [pc, #128]	; (8001ad8 <HAL_DMA_Abort_IT+0xd4>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d022      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0x9c>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a1f      	ldr	r2, [pc, #124]	; (8001adc <HAL_DMA_Abort_IT+0xd8>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d01a      	beq.n	8001a9a <HAL_DMA_Abort_IT+0x96>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a1d      	ldr	r2, [pc, #116]	; (8001ae0 <HAL_DMA_Abort_IT+0xdc>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d012      	beq.n	8001a94 <HAL_DMA_Abort_IT+0x90>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a1c      	ldr	r2, [pc, #112]	; (8001ae4 <HAL_DMA_Abort_IT+0xe0>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d00a      	beq.n	8001a8e <HAL_DMA_Abort_IT+0x8a>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a1a      	ldr	r2, [pc, #104]	; (8001ae8 <HAL_DMA_Abort_IT+0xe4>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d102      	bne.n	8001a88 <HAL_DMA_Abort_IT+0x84>
 8001a82:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a86:	e00e      	b.n	8001aa6 <HAL_DMA_Abort_IT+0xa2>
 8001a88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a8c:	e00b      	b.n	8001aa6 <HAL_DMA_Abort_IT+0xa2>
 8001a8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a92:	e008      	b.n	8001aa6 <HAL_DMA_Abort_IT+0xa2>
 8001a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a98:	e005      	b.n	8001aa6 <HAL_DMA_Abort_IT+0xa2>
 8001a9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a9e:	e002      	b.n	8001aa6 <HAL_DMA_Abort_IT+0xa2>
 8001aa0:	2310      	movs	r3, #16
 8001aa2:	e000      	b.n	8001aa6 <HAL_DMA_Abort_IT+0xa2>
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	4a11      	ldr	r2, [pc, #68]	; (8001aec <HAL_DMA_Abort_IT+0xe8>)
 8001aa8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	4798      	blx	r3
    } 
  }
  return status;
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40020008 	.word	0x40020008
 8001ad8:	4002001c 	.word	0x4002001c
 8001adc:	40020030 	.word	0x40020030
 8001ae0:	40020044 	.word	0x40020044
 8001ae4:	40020058 	.word	0x40020058
 8001ae8:	4002006c 	.word	0x4002006c
 8001aec:	40020000 	.word	0x40020000

08001af0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	2204      	movs	r2, #4
 8001b0e:	409a      	lsls	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4013      	ands	r3, r2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d04f      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0xc8>
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d04a      	beq.n	8001bb8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0320 	and.w	r3, r3, #32
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d107      	bne.n	8001b40 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 0204 	bic.w	r2, r2, #4
 8001b3e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a66      	ldr	r2, [pc, #408]	; (8001ce0 <HAL_DMA_IRQHandler+0x1f0>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d029      	beq.n	8001b9e <HAL_DMA_IRQHandler+0xae>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a65      	ldr	r2, [pc, #404]	; (8001ce4 <HAL_DMA_IRQHandler+0x1f4>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d022      	beq.n	8001b9a <HAL_DMA_IRQHandler+0xaa>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a63      	ldr	r2, [pc, #396]	; (8001ce8 <HAL_DMA_IRQHandler+0x1f8>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d01a      	beq.n	8001b94 <HAL_DMA_IRQHandler+0xa4>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a62      	ldr	r2, [pc, #392]	; (8001cec <HAL_DMA_IRQHandler+0x1fc>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d012      	beq.n	8001b8e <HAL_DMA_IRQHandler+0x9e>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a60      	ldr	r2, [pc, #384]	; (8001cf0 <HAL_DMA_IRQHandler+0x200>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d00a      	beq.n	8001b88 <HAL_DMA_IRQHandler+0x98>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a5f      	ldr	r2, [pc, #380]	; (8001cf4 <HAL_DMA_IRQHandler+0x204>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d102      	bne.n	8001b82 <HAL_DMA_IRQHandler+0x92>
 8001b7c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b80:	e00e      	b.n	8001ba0 <HAL_DMA_IRQHandler+0xb0>
 8001b82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001b86:	e00b      	b.n	8001ba0 <HAL_DMA_IRQHandler+0xb0>
 8001b88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001b8c:	e008      	b.n	8001ba0 <HAL_DMA_IRQHandler+0xb0>
 8001b8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b92:	e005      	b.n	8001ba0 <HAL_DMA_IRQHandler+0xb0>
 8001b94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b98:	e002      	b.n	8001ba0 <HAL_DMA_IRQHandler+0xb0>
 8001b9a:	2340      	movs	r3, #64	; 0x40
 8001b9c:	e000      	b.n	8001ba0 <HAL_DMA_IRQHandler+0xb0>
 8001b9e:	2304      	movs	r3, #4
 8001ba0:	4a55      	ldr	r2, [pc, #340]	; (8001cf8 <HAL_DMA_IRQHandler+0x208>)
 8001ba2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 8094 	beq.w	8001cd6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001bb6:	e08e      	b.n	8001cd6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	409a      	lsls	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d056      	beq.n	8001c76 <HAL_DMA_IRQHandler+0x186>
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d051      	beq.n	8001c76 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0320 	and.w	r3, r3, #32
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d10b      	bne.n	8001bf8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 020a 	bic.w	r2, r2, #10
 8001bee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a38      	ldr	r2, [pc, #224]	; (8001ce0 <HAL_DMA_IRQHandler+0x1f0>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d029      	beq.n	8001c56 <HAL_DMA_IRQHandler+0x166>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a37      	ldr	r2, [pc, #220]	; (8001ce4 <HAL_DMA_IRQHandler+0x1f4>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d022      	beq.n	8001c52 <HAL_DMA_IRQHandler+0x162>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a35      	ldr	r2, [pc, #212]	; (8001ce8 <HAL_DMA_IRQHandler+0x1f8>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d01a      	beq.n	8001c4c <HAL_DMA_IRQHandler+0x15c>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a34      	ldr	r2, [pc, #208]	; (8001cec <HAL_DMA_IRQHandler+0x1fc>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d012      	beq.n	8001c46 <HAL_DMA_IRQHandler+0x156>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a32      	ldr	r2, [pc, #200]	; (8001cf0 <HAL_DMA_IRQHandler+0x200>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d00a      	beq.n	8001c40 <HAL_DMA_IRQHandler+0x150>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a31      	ldr	r2, [pc, #196]	; (8001cf4 <HAL_DMA_IRQHandler+0x204>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d102      	bne.n	8001c3a <HAL_DMA_IRQHandler+0x14a>
 8001c34:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c38:	e00e      	b.n	8001c58 <HAL_DMA_IRQHandler+0x168>
 8001c3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c3e:	e00b      	b.n	8001c58 <HAL_DMA_IRQHandler+0x168>
 8001c40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c44:	e008      	b.n	8001c58 <HAL_DMA_IRQHandler+0x168>
 8001c46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c4a:	e005      	b.n	8001c58 <HAL_DMA_IRQHandler+0x168>
 8001c4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c50:	e002      	b.n	8001c58 <HAL_DMA_IRQHandler+0x168>
 8001c52:	2320      	movs	r3, #32
 8001c54:	e000      	b.n	8001c58 <HAL_DMA_IRQHandler+0x168>
 8001c56:	2302      	movs	r3, #2
 8001c58:	4a27      	ldr	r2, [pc, #156]	; (8001cf8 <HAL_DMA_IRQHandler+0x208>)
 8001c5a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d034      	beq.n	8001cd6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c74:	e02f      	b.n	8001cd6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	2208      	movs	r2, #8
 8001c7c:	409a      	lsls	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	4013      	ands	r3, r2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d028      	beq.n	8001cd8 <HAL_DMA_IRQHandler+0x1e8>
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d023      	beq.n	8001cd8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 020e 	bic.w	r2, r2, #14
 8001c9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca8:	2101      	movs	r1, #1
 8001caa:	fa01 f202 	lsl.w	r2, r1, r2
 8001cae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d004      	beq.n	8001cd8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	4798      	blx	r3
    }
  }
  return;
 8001cd6:	bf00      	nop
 8001cd8:	bf00      	nop
}
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40020008 	.word	0x40020008
 8001ce4:	4002001c 	.word	0x4002001c
 8001ce8:	40020030 	.word	0x40020030
 8001cec:	40020044 	.word	0x40020044
 8001cf0:	40020058 	.word	0x40020058
 8001cf4:	4002006c 	.word	0x4002006c
 8001cf8:	40020000 	.word	0x40020000

08001cfc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	60f8      	str	r0, [r7, #12]
 8001d04:	60b9      	str	r1, [r7, #8]
 8001d06:	607a      	str	r2, [r7, #4]
 8001d08:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d12:	2101      	movs	r1, #1
 8001d14:	fa01 f202 	lsl.w	r2, r1, r2
 8001d18:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b10      	cmp	r3, #16
 8001d28:	d108      	bne.n	8001d3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d3a:	e007      	b.n	8001d4c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68ba      	ldr	r2, [r7, #8]
 8001d42:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	60da      	str	r2, [r3, #12]
}
 8001d4c:	bf00      	nop
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr
	...

08001d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b08b      	sub	sp, #44	; 0x2c
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d62:	2300      	movs	r3, #0
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d66:	2300      	movs	r3, #0
 8001d68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d6a:	e127      	b.n	8001fbc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	69fa      	ldr	r2, [r7, #28]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	f040 8116 	bne.w	8001fb6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b12      	cmp	r3, #18
 8001d90:	d034      	beq.n	8001dfc <HAL_GPIO_Init+0xa4>
 8001d92:	2b12      	cmp	r3, #18
 8001d94:	d80d      	bhi.n	8001db2 <HAL_GPIO_Init+0x5a>
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d02b      	beq.n	8001df2 <HAL_GPIO_Init+0x9a>
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d804      	bhi.n	8001da8 <HAL_GPIO_Init+0x50>
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d031      	beq.n	8001e06 <HAL_GPIO_Init+0xae>
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d01c      	beq.n	8001de0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001da6:	e048      	b.n	8001e3a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001da8:	2b03      	cmp	r3, #3
 8001daa:	d043      	beq.n	8001e34 <HAL_GPIO_Init+0xdc>
 8001dac:	2b11      	cmp	r3, #17
 8001dae:	d01b      	beq.n	8001de8 <HAL_GPIO_Init+0x90>
          break;
 8001db0:	e043      	b.n	8001e3a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001db2:	4a89      	ldr	r2, [pc, #548]	; (8001fd8 <HAL_GPIO_Init+0x280>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d026      	beq.n	8001e06 <HAL_GPIO_Init+0xae>
 8001db8:	4a87      	ldr	r2, [pc, #540]	; (8001fd8 <HAL_GPIO_Init+0x280>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d806      	bhi.n	8001dcc <HAL_GPIO_Init+0x74>
 8001dbe:	4a87      	ldr	r2, [pc, #540]	; (8001fdc <HAL_GPIO_Init+0x284>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d020      	beq.n	8001e06 <HAL_GPIO_Init+0xae>
 8001dc4:	4a86      	ldr	r2, [pc, #536]	; (8001fe0 <HAL_GPIO_Init+0x288>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d01d      	beq.n	8001e06 <HAL_GPIO_Init+0xae>
          break;
 8001dca:	e036      	b.n	8001e3a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001dcc:	4a85      	ldr	r2, [pc, #532]	; (8001fe4 <HAL_GPIO_Init+0x28c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d019      	beq.n	8001e06 <HAL_GPIO_Init+0xae>
 8001dd2:	4a85      	ldr	r2, [pc, #532]	; (8001fe8 <HAL_GPIO_Init+0x290>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d016      	beq.n	8001e06 <HAL_GPIO_Init+0xae>
 8001dd8:	4a84      	ldr	r2, [pc, #528]	; (8001fec <HAL_GPIO_Init+0x294>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d013      	beq.n	8001e06 <HAL_GPIO_Init+0xae>
          break;
 8001dde:	e02c      	b.n	8001e3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	623b      	str	r3, [r7, #32]
          break;
 8001de6:	e028      	b.n	8001e3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	3304      	adds	r3, #4
 8001dee:	623b      	str	r3, [r7, #32]
          break;
 8001df0:	e023      	b.n	8001e3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	3308      	adds	r3, #8
 8001df8:	623b      	str	r3, [r7, #32]
          break;
 8001dfa:	e01e      	b.n	8001e3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	330c      	adds	r3, #12
 8001e02:	623b      	str	r3, [r7, #32]
          break;
 8001e04:	e019      	b.n	8001e3a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d102      	bne.n	8001e14 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e0e:	2304      	movs	r3, #4
 8001e10:	623b      	str	r3, [r7, #32]
          break;
 8001e12:	e012      	b.n	8001e3a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d105      	bne.n	8001e28 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e1c:	2308      	movs	r3, #8
 8001e1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69fa      	ldr	r2, [r7, #28]
 8001e24:	611a      	str	r2, [r3, #16]
          break;
 8001e26:	e008      	b.n	8001e3a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e28:	2308      	movs	r3, #8
 8001e2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	69fa      	ldr	r2, [r7, #28]
 8001e30:	615a      	str	r2, [r3, #20]
          break;
 8001e32:	e002      	b.n	8001e3a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e34:	2300      	movs	r3, #0
 8001e36:	623b      	str	r3, [r7, #32]
          break;
 8001e38:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	2bff      	cmp	r3, #255	; 0xff
 8001e3e:	d801      	bhi.n	8001e44 <HAL_GPIO_Init+0xec>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	e001      	b.n	8001e48 <HAL_GPIO_Init+0xf0>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3304      	adds	r3, #4
 8001e48:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	2bff      	cmp	r3, #255	; 0xff
 8001e4e:	d802      	bhi.n	8001e56 <HAL_GPIO_Init+0xfe>
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	e002      	b.n	8001e5c <HAL_GPIO_Init+0x104>
 8001e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e58:	3b08      	subs	r3, #8
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	210f      	movs	r1, #15
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	401a      	ands	r2, r3
 8001e6e:	6a39      	ldr	r1, [r7, #32]
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	fa01 f303 	lsl.w	r3, r1, r3
 8001e76:	431a      	orrs	r2, r3
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 8096 	beq.w	8001fb6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e8a:	4b59      	ldr	r3, [pc, #356]	; (8001ff0 <HAL_GPIO_Init+0x298>)
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	4a58      	ldr	r2, [pc, #352]	; (8001ff0 <HAL_GPIO_Init+0x298>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6193      	str	r3, [r2, #24]
 8001e96:	4b56      	ldr	r3, [pc, #344]	; (8001ff0 <HAL_GPIO_Init+0x298>)
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ea2:	4a54      	ldr	r2, [pc, #336]	; (8001ff4 <HAL_GPIO_Init+0x29c>)
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	089b      	lsrs	r3, r3, #2
 8001ea8:	3302      	adds	r3, #2
 8001eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eae:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	220f      	movs	r2, #15
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a4b      	ldr	r2, [pc, #300]	; (8001ff8 <HAL_GPIO_Init+0x2a0>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d013      	beq.n	8001ef6 <HAL_GPIO_Init+0x19e>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a4a      	ldr	r2, [pc, #296]	; (8001ffc <HAL_GPIO_Init+0x2a4>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d00d      	beq.n	8001ef2 <HAL_GPIO_Init+0x19a>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a49      	ldr	r2, [pc, #292]	; (8002000 <HAL_GPIO_Init+0x2a8>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d007      	beq.n	8001eee <HAL_GPIO_Init+0x196>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a48      	ldr	r2, [pc, #288]	; (8002004 <HAL_GPIO_Init+0x2ac>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d101      	bne.n	8001eea <HAL_GPIO_Init+0x192>
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e006      	b.n	8001ef8 <HAL_GPIO_Init+0x1a0>
 8001eea:	2304      	movs	r3, #4
 8001eec:	e004      	b.n	8001ef8 <HAL_GPIO_Init+0x1a0>
 8001eee:	2302      	movs	r3, #2
 8001ef0:	e002      	b.n	8001ef8 <HAL_GPIO_Init+0x1a0>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <HAL_GPIO_Init+0x1a0>
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001efa:	f002 0203 	and.w	r2, r2, #3
 8001efe:	0092      	lsls	r2, r2, #2
 8001f00:	4093      	lsls	r3, r2
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f08:	493a      	ldr	r1, [pc, #232]	; (8001ff4 <HAL_GPIO_Init+0x29c>)
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0c:	089b      	lsrs	r3, r3, #2
 8001f0e:	3302      	adds	r3, #2
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d006      	beq.n	8001f30 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f22:	4b39      	ldr	r3, [pc, #228]	; (8002008 <HAL_GPIO_Init+0x2b0>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	4938      	ldr	r1, [pc, #224]	; (8002008 <HAL_GPIO_Init+0x2b0>)
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	600b      	str	r3, [r1, #0]
 8001f2e:	e006      	b.n	8001f3e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f30:	4b35      	ldr	r3, [pc, #212]	; (8002008 <HAL_GPIO_Init+0x2b0>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	43db      	mvns	r3, r3
 8001f38:	4933      	ldr	r1, [pc, #204]	; (8002008 <HAL_GPIO_Init+0x2b0>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d006      	beq.n	8001f58 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f4a:	4b2f      	ldr	r3, [pc, #188]	; (8002008 <HAL_GPIO_Init+0x2b0>)
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	492e      	ldr	r1, [pc, #184]	; (8002008 <HAL_GPIO_Init+0x2b0>)
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	604b      	str	r3, [r1, #4]
 8001f56:	e006      	b.n	8001f66 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f58:	4b2b      	ldr	r3, [pc, #172]	; (8002008 <HAL_GPIO_Init+0x2b0>)
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	4929      	ldr	r1, [pc, #164]	; (8002008 <HAL_GPIO_Init+0x2b0>)
 8001f62:	4013      	ands	r3, r2
 8001f64:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d006      	beq.n	8001f80 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f72:	4b25      	ldr	r3, [pc, #148]	; (8002008 <HAL_GPIO_Init+0x2b0>)
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	4924      	ldr	r1, [pc, #144]	; (8002008 <HAL_GPIO_Init+0x2b0>)
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	608b      	str	r3, [r1, #8]
 8001f7e:	e006      	b.n	8001f8e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f80:	4b21      	ldr	r3, [pc, #132]	; (8002008 <HAL_GPIO_Init+0x2b0>)
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	491f      	ldr	r1, [pc, #124]	; (8002008 <HAL_GPIO_Init+0x2b0>)
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d006      	beq.n	8001fa8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f9a:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <HAL_GPIO_Init+0x2b0>)
 8001f9c:	68da      	ldr	r2, [r3, #12]
 8001f9e:	491a      	ldr	r1, [pc, #104]	; (8002008 <HAL_GPIO_Init+0x2b0>)
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	60cb      	str	r3, [r1, #12]
 8001fa6:	e006      	b.n	8001fb6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fa8:	4b17      	ldr	r3, [pc, #92]	; (8002008 <HAL_GPIO_Init+0x2b0>)
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	4915      	ldr	r1, [pc, #84]	; (8002008 <HAL_GPIO_Init+0x2b0>)
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	3301      	adds	r3, #1
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f47f aed0 	bne.w	8001d6c <HAL_GPIO_Init+0x14>
  }
}
 8001fcc:	bf00      	nop
 8001fce:	372c      	adds	r7, #44	; 0x2c
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	10210000 	.word	0x10210000
 8001fdc:	10110000 	.word	0x10110000
 8001fe0:	10120000 	.word	0x10120000
 8001fe4:	10310000 	.word	0x10310000
 8001fe8:	10320000 	.word	0x10320000
 8001fec:	10220000 	.word	0x10220000
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40010000 	.word	0x40010000
 8001ff8:	40010800 	.word	0x40010800
 8001ffc:	40010c00 	.word	0x40010c00
 8002000:	40011000 	.word	0x40011000
 8002004:	40011400 	.word	0x40011400
 8002008:	40010400 	.word	0x40010400

0800200c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	807b      	strh	r3, [r7, #2]
 8002018:	4613      	mov	r3, r2
 800201a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800201c:	787b      	ldrb	r3, [r7, #1]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002022:	887a      	ldrh	r2, [r7, #2]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002028:	e003      	b.n	8002032 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800202a:	887b      	ldrh	r3, [r7, #2]
 800202c:	041a      	lsls	r2, r3, #16
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	611a      	str	r2, [r3, #16]
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	bc80      	pop	{r7}
 800203a:	4770      	bx	lr

0800203c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e034      	b.n	80020b8 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8002056:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f245 5255 	movw	r2, #21845	; 0x5555
 8002060:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6852      	ldr	r2, [r2, #4]
 800206a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	6892      	ldr	r2, [r2, #8]
 8002074:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002076:	f7ff fa97 	bl	80015a8 <HAL_GetTick>
 800207a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800207c:	e00f      	b.n	800209e <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800207e:	f7ff fa93 	bl	80015a8 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b27      	cmp	r3, #39	; 0x27
 800208a:	d908      	bls.n	800209e <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e00c      	b.n	80020b8 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1e8      	bne.n	800207e <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80020b4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80020d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr
	...

080020e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e26c      	b.n	80025cc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f000 8087 	beq.w	800220e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002100:	4b92      	ldr	r3, [pc, #584]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 030c 	and.w	r3, r3, #12
 8002108:	2b04      	cmp	r3, #4
 800210a:	d00c      	beq.n	8002126 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800210c:	4b8f      	ldr	r3, [pc, #572]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 030c 	and.w	r3, r3, #12
 8002114:	2b08      	cmp	r3, #8
 8002116:	d112      	bne.n	800213e <HAL_RCC_OscConfig+0x5e>
 8002118:	4b8c      	ldr	r3, [pc, #560]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002124:	d10b      	bne.n	800213e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002126:	4b89      	ldr	r3, [pc, #548]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d06c      	beq.n	800220c <HAL_RCC_OscConfig+0x12c>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d168      	bne.n	800220c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e246      	b.n	80025cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002146:	d106      	bne.n	8002156 <HAL_RCC_OscConfig+0x76>
 8002148:	4b80      	ldr	r3, [pc, #512]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a7f      	ldr	r2, [pc, #508]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 800214e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002152:	6013      	str	r3, [r2, #0]
 8002154:	e02e      	b.n	80021b4 <HAL_RCC_OscConfig+0xd4>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10c      	bne.n	8002178 <HAL_RCC_OscConfig+0x98>
 800215e:	4b7b      	ldr	r3, [pc, #492]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a7a      	ldr	r2, [pc, #488]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 8002164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	4b78      	ldr	r3, [pc, #480]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a77      	ldr	r2, [pc, #476]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 8002170:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	e01d      	b.n	80021b4 <HAL_RCC_OscConfig+0xd4>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002180:	d10c      	bne.n	800219c <HAL_RCC_OscConfig+0xbc>
 8002182:	4b72      	ldr	r3, [pc, #456]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a71      	ldr	r2, [pc, #452]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 8002188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	4b6f      	ldr	r3, [pc, #444]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a6e      	ldr	r2, [pc, #440]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 8002194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	e00b      	b.n	80021b4 <HAL_RCC_OscConfig+0xd4>
 800219c:	4b6b      	ldr	r3, [pc, #428]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a6a      	ldr	r2, [pc, #424]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 80021a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	4b68      	ldr	r3, [pc, #416]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a67      	ldr	r2, [pc, #412]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 80021ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d013      	beq.n	80021e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021bc:	f7ff f9f4 	bl	80015a8 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c4:	f7ff f9f0 	bl	80015a8 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b64      	cmp	r3, #100	; 0x64
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e1fa      	b.n	80025cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d6:	4b5d      	ldr	r3, [pc, #372]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f0      	beq.n	80021c4 <HAL_RCC_OscConfig+0xe4>
 80021e2:	e014      	b.n	800220e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e4:	f7ff f9e0 	bl	80015a8 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021ec:	f7ff f9dc 	bl	80015a8 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b64      	cmp	r3, #100	; 0x64
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e1e6      	b.n	80025cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fe:	4b53      	ldr	r3, [pc, #332]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x10c>
 800220a:	e000      	b.n	800220e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800220c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d063      	beq.n	80022e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800221a:	4b4c      	ldr	r3, [pc, #304]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 030c 	and.w	r3, r3, #12
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00b      	beq.n	800223e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002226:	4b49      	ldr	r3, [pc, #292]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	2b08      	cmp	r3, #8
 8002230:	d11c      	bne.n	800226c <HAL_RCC_OscConfig+0x18c>
 8002232:	4b46      	ldr	r3, [pc, #280]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d116      	bne.n	800226c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223e:	4b43      	ldr	r3, [pc, #268]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d005      	beq.n	8002256 <HAL_RCC_OscConfig+0x176>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d001      	beq.n	8002256 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e1ba      	b.n	80025cc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002256:	4b3d      	ldr	r3, [pc, #244]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	4939      	ldr	r1, [pc, #228]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 8002266:	4313      	orrs	r3, r2
 8002268:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800226a:	e03a      	b.n	80022e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d020      	beq.n	80022b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002274:	4b36      	ldr	r3, [pc, #216]	; (8002350 <HAL_RCC_OscConfig+0x270>)
 8002276:	2201      	movs	r2, #1
 8002278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227a:	f7ff f995 	bl	80015a8 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002282:	f7ff f991 	bl	80015a8 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e19b      	b.n	80025cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002294:	4b2d      	ldr	r3, [pc, #180]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d0f0      	beq.n	8002282 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a0:	4b2a      	ldr	r3, [pc, #168]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	4927      	ldr	r1, [pc, #156]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	600b      	str	r3, [r1, #0]
 80022b4:	e015      	b.n	80022e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022b6:	4b26      	ldr	r3, [pc, #152]	; (8002350 <HAL_RCC_OscConfig+0x270>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7ff f974 	bl	80015a8 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c4:	f7ff f970 	bl	80015a8 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e17a      	b.n	80025cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d6:	4b1d      	ldr	r3, [pc, #116]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d03a      	beq.n	8002364 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d019      	beq.n	800232a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022f6:	4b17      	ldr	r3, [pc, #92]	; (8002354 <HAL_RCC_OscConfig+0x274>)
 80022f8:	2201      	movs	r2, #1
 80022fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fc:	f7ff f954 	bl	80015a8 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002304:	f7ff f950 	bl	80015a8 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e15a      	b.n	80025cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002316:	4b0d      	ldr	r3, [pc, #52]	; (800234c <HAL_RCC_OscConfig+0x26c>)
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0f0      	beq.n	8002304 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002322:	2001      	movs	r0, #1
 8002324:	f000 fada 	bl	80028dc <RCC_Delay>
 8002328:	e01c      	b.n	8002364 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800232a:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <HAL_RCC_OscConfig+0x274>)
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002330:	f7ff f93a 	bl	80015a8 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002336:	e00f      	b.n	8002358 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002338:	f7ff f936 	bl	80015a8 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d908      	bls.n	8002358 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e140      	b.n	80025cc <HAL_RCC_OscConfig+0x4ec>
 800234a:	bf00      	nop
 800234c:	40021000 	.word	0x40021000
 8002350:	42420000 	.word	0x42420000
 8002354:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002358:	4b9e      	ldr	r3, [pc, #632]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d1e9      	bne.n	8002338 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 80a6 	beq.w	80024be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002372:	2300      	movs	r3, #0
 8002374:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002376:	4b97      	ldr	r3, [pc, #604]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10d      	bne.n	800239e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002382:	4b94      	ldr	r3, [pc, #592]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	4a93      	ldr	r2, [pc, #588]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 8002388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800238c:	61d3      	str	r3, [r2, #28]
 800238e:	4b91      	ldr	r3, [pc, #580]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800239a:	2301      	movs	r3, #1
 800239c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239e:	4b8e      	ldr	r3, [pc, #568]	; (80025d8 <HAL_RCC_OscConfig+0x4f8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d118      	bne.n	80023dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023aa:	4b8b      	ldr	r3, [pc, #556]	; (80025d8 <HAL_RCC_OscConfig+0x4f8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a8a      	ldr	r2, [pc, #552]	; (80025d8 <HAL_RCC_OscConfig+0x4f8>)
 80023b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023b6:	f7ff f8f7 	bl	80015a8 <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023be:	f7ff f8f3 	bl	80015a8 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b64      	cmp	r3, #100	; 0x64
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e0fd      	b.n	80025cc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d0:	4b81      	ldr	r3, [pc, #516]	; (80025d8 <HAL_RCC_OscConfig+0x4f8>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d0f0      	beq.n	80023be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d106      	bne.n	80023f2 <HAL_RCC_OscConfig+0x312>
 80023e4:	4b7b      	ldr	r3, [pc, #492]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	4a7a      	ldr	r2, [pc, #488]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	6213      	str	r3, [r2, #32]
 80023f0:	e02d      	b.n	800244e <HAL_RCC_OscConfig+0x36e>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10c      	bne.n	8002414 <HAL_RCC_OscConfig+0x334>
 80023fa:	4b76      	ldr	r3, [pc, #472]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	4a75      	ldr	r2, [pc, #468]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 8002400:	f023 0301 	bic.w	r3, r3, #1
 8002404:	6213      	str	r3, [r2, #32]
 8002406:	4b73      	ldr	r3, [pc, #460]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	4a72      	ldr	r2, [pc, #456]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 800240c:	f023 0304 	bic.w	r3, r3, #4
 8002410:	6213      	str	r3, [r2, #32]
 8002412:	e01c      	b.n	800244e <HAL_RCC_OscConfig+0x36e>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	2b05      	cmp	r3, #5
 800241a:	d10c      	bne.n	8002436 <HAL_RCC_OscConfig+0x356>
 800241c:	4b6d      	ldr	r3, [pc, #436]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	4a6c      	ldr	r2, [pc, #432]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 8002422:	f043 0304 	orr.w	r3, r3, #4
 8002426:	6213      	str	r3, [r2, #32]
 8002428:	4b6a      	ldr	r3, [pc, #424]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	4a69      	ldr	r2, [pc, #420]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	6213      	str	r3, [r2, #32]
 8002434:	e00b      	b.n	800244e <HAL_RCC_OscConfig+0x36e>
 8002436:	4b67      	ldr	r3, [pc, #412]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	4a66      	ldr	r2, [pc, #408]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 800243c:	f023 0301 	bic.w	r3, r3, #1
 8002440:	6213      	str	r3, [r2, #32]
 8002442:	4b64      	ldr	r3, [pc, #400]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	4a63      	ldr	r2, [pc, #396]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 8002448:	f023 0304 	bic.w	r3, r3, #4
 800244c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d015      	beq.n	8002482 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002456:	f7ff f8a7 	bl	80015a8 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800245c:	e00a      	b.n	8002474 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245e:	f7ff f8a3 	bl	80015a8 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	f241 3288 	movw	r2, #5000	; 0x1388
 800246c:	4293      	cmp	r3, r2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e0ab      	b.n	80025cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002474:	4b57      	ldr	r3, [pc, #348]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0ee      	beq.n	800245e <HAL_RCC_OscConfig+0x37e>
 8002480:	e014      	b.n	80024ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002482:	f7ff f891 	bl	80015a8 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002488:	e00a      	b.n	80024a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800248a:	f7ff f88d 	bl	80015a8 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	f241 3288 	movw	r2, #5000	; 0x1388
 8002498:	4293      	cmp	r3, r2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e095      	b.n	80025cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a0:	4b4c      	ldr	r3, [pc, #304]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1ee      	bne.n	800248a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024ac:	7dfb      	ldrb	r3, [r7, #23]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d105      	bne.n	80024be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b2:	4b48      	ldr	r3, [pc, #288]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 80024b4:	69db      	ldr	r3, [r3, #28]
 80024b6:	4a47      	ldr	r2, [pc, #284]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 80024b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 8081 	beq.w	80025ca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024c8:	4b42      	ldr	r3, [pc, #264]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f003 030c 	and.w	r3, r3, #12
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d061      	beq.n	8002598 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d146      	bne.n	800256a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024dc:	4b3f      	ldr	r3, [pc, #252]	; (80025dc <HAL_RCC_OscConfig+0x4fc>)
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e2:	f7ff f861 	bl	80015a8 <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ea:	f7ff f85d 	bl	80015a8 <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e067      	b.n	80025cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024fc:	4b35      	ldr	r3, [pc, #212]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1f0      	bne.n	80024ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002510:	d108      	bne.n	8002524 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002512:	4b30      	ldr	r3, [pc, #192]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	492d      	ldr	r1, [pc, #180]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 8002520:	4313      	orrs	r3, r2
 8002522:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002524:	4b2b      	ldr	r3, [pc, #172]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a19      	ldr	r1, [r3, #32]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	430b      	orrs	r3, r1
 8002536:	4927      	ldr	r1, [pc, #156]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 8002538:	4313      	orrs	r3, r2
 800253a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800253c:	4b27      	ldr	r3, [pc, #156]	; (80025dc <HAL_RCC_OscConfig+0x4fc>)
 800253e:	2201      	movs	r2, #1
 8002540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002542:	f7ff f831 	bl	80015a8 <HAL_GetTick>
 8002546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254a:	f7ff f82d 	bl	80015a8 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e037      	b.n	80025cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800255c:	4b1d      	ldr	r3, [pc, #116]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0f0      	beq.n	800254a <HAL_RCC_OscConfig+0x46a>
 8002568:	e02f      	b.n	80025ca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256a:	4b1c      	ldr	r3, [pc, #112]	; (80025dc <HAL_RCC_OscConfig+0x4fc>)
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002570:	f7ff f81a 	bl	80015a8 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002578:	f7ff f816 	bl	80015a8 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e020      	b.n	80025cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800258a:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <HAL_RCC_OscConfig+0x498>
 8002596:	e018      	b.n	80025ca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69db      	ldr	r3, [r3, #28]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d101      	bne.n	80025a4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e013      	b.n	80025cc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025a4:	4b0b      	ldr	r3, [pc, #44]	; (80025d4 <HAL_RCC_OscConfig+0x4f4>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d106      	bne.n	80025c6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d001      	beq.n	80025ca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40021000 	.word	0x40021000
 80025d8:	40007000 	.word	0x40007000
 80025dc:	42420060 	.word	0x42420060

080025e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e0d0      	b.n	8002796 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025f4:	4b6a      	ldr	r3, [pc, #424]	; (80027a0 <HAL_RCC_ClockConfig+0x1c0>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d910      	bls.n	8002624 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002602:	4b67      	ldr	r3, [pc, #412]	; (80027a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 0207 	bic.w	r2, r3, #7
 800260a:	4965      	ldr	r1, [pc, #404]	; (80027a0 <HAL_RCC_ClockConfig+0x1c0>)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	4313      	orrs	r3, r2
 8002610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002612:	4b63      	ldr	r3, [pc, #396]	; (80027a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0307 	and.w	r3, r3, #7
 800261a:	683a      	ldr	r2, [r7, #0]
 800261c:	429a      	cmp	r2, r3
 800261e:	d001      	beq.n	8002624 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e0b8      	b.n	8002796 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d020      	beq.n	8002672 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800263c:	4b59      	ldr	r3, [pc, #356]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	4a58      	ldr	r2, [pc, #352]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002642:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002646:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0308 	and.w	r3, r3, #8
 8002650:	2b00      	cmp	r3, #0
 8002652:	d005      	beq.n	8002660 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002654:	4b53      	ldr	r3, [pc, #332]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	4a52      	ldr	r2, [pc, #328]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 800265a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800265e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002660:	4b50      	ldr	r3, [pc, #320]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	494d      	ldr	r1, [pc, #308]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 800266e:	4313      	orrs	r3, r2
 8002670:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d040      	beq.n	8002700 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d107      	bne.n	8002696 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002686:	4b47      	ldr	r3, [pc, #284]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d115      	bne.n	80026be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e07f      	b.n	8002796 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d107      	bne.n	80026ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800269e:	4b41      	ldr	r3, [pc, #260]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d109      	bne.n	80026be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e073      	b.n	8002796 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ae:	4b3d      	ldr	r3, [pc, #244]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e06b      	b.n	8002796 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026be:	4b39      	ldr	r3, [pc, #228]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f023 0203 	bic.w	r2, r3, #3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	4936      	ldr	r1, [pc, #216]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026d0:	f7fe ff6a 	bl	80015a8 <HAL_GetTick>
 80026d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d6:	e00a      	b.n	80026ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d8:	f7fe ff66 	bl	80015a8 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e053      	b.n	8002796 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ee:	4b2d      	ldr	r3, [pc, #180]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 020c 	and.w	r2, r3, #12
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d1eb      	bne.n	80026d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002700:	4b27      	ldr	r3, [pc, #156]	; (80027a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	429a      	cmp	r2, r3
 800270c:	d210      	bcs.n	8002730 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270e:	4b24      	ldr	r3, [pc, #144]	; (80027a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f023 0207 	bic.w	r2, r3, #7
 8002716:	4922      	ldr	r1, [pc, #136]	; (80027a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	4313      	orrs	r3, r2
 800271c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800271e:	4b20      	ldr	r3, [pc, #128]	; (80027a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d001      	beq.n	8002730 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e032      	b.n	8002796 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	d008      	beq.n	800274e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800273c:	4b19      	ldr	r3, [pc, #100]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	4916      	ldr	r1, [pc, #88]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	4313      	orrs	r3, r2
 800274c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0308 	and.w	r3, r3, #8
 8002756:	2b00      	cmp	r3, #0
 8002758:	d009      	beq.n	800276e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800275a:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	490e      	ldr	r1, [pc, #56]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	4313      	orrs	r3, r2
 800276c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800276e:	f000 f821 	bl	80027b4 <HAL_RCC_GetSysClockFreq>
 8002772:	4601      	mov	r1, r0
 8002774:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	091b      	lsrs	r3, r3, #4
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	4a0a      	ldr	r2, [pc, #40]	; (80027a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002780:	5cd3      	ldrb	r3, [r2, r3]
 8002782:	fa21 f303 	lsr.w	r3, r1, r3
 8002786:	4a09      	ldr	r2, [pc, #36]	; (80027ac <HAL_RCC_ClockConfig+0x1cc>)
 8002788:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800278a:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <HAL_RCC_ClockConfig+0x1d0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f7fe fec8 	bl	8001524 <HAL_InitTick>

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40022000 	.word	0x40022000
 80027a4:	40021000 	.word	0x40021000
 80027a8:	08004070 	.word	0x08004070
 80027ac:	20000000 	.word	0x20000000
 80027b0:	20000004 	.word	0x20000004

080027b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027b4:	b490      	push	{r4, r7}
 80027b6:	b08a      	sub	sp, #40	; 0x28
 80027b8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027ba:	4b2a      	ldr	r3, [pc, #168]	; (8002864 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027bc:	1d3c      	adds	r4, r7, #4
 80027be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027c4:	4b28      	ldr	r3, [pc, #160]	; (8002868 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
 80027ce:	2300      	movs	r3, #0
 80027d0:	61bb      	str	r3, [r7, #24]
 80027d2:	2300      	movs	r3, #0
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027de:	4b23      	ldr	r3, [pc, #140]	; (800286c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f003 030c 	and.w	r3, r3, #12
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d002      	beq.n	80027f4 <HAL_RCC_GetSysClockFreq+0x40>
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d003      	beq.n	80027fa <HAL_RCC_GetSysClockFreq+0x46>
 80027f2:	e02d      	b.n	8002850 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027f4:	4b1e      	ldr	r3, [pc, #120]	; (8002870 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027f6:	623b      	str	r3, [r7, #32]
      break;
 80027f8:	e02d      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	0c9b      	lsrs	r3, r3, #18
 80027fe:	f003 030f 	and.w	r3, r3, #15
 8002802:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002806:	4413      	add	r3, r2
 8002808:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800280c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d013      	beq.n	8002840 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002818:	4b14      	ldr	r3, [pc, #80]	; (800286c <HAL_RCC_GetSysClockFreq+0xb8>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	0c5b      	lsrs	r3, r3, #17
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002826:	4413      	add	r3, r2
 8002828:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800282c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	4a0f      	ldr	r2, [pc, #60]	; (8002870 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002832:	fb02 f203 	mul.w	r2, r2, r3
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	fbb2 f3f3 	udiv	r3, r2, r3
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
 800283e:	e004      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	4a0c      	ldr	r2, [pc, #48]	; (8002874 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002844:	fb02 f303 	mul.w	r3, r2, r3
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	623b      	str	r3, [r7, #32]
      break;
 800284e:	e002      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002850:	4b07      	ldr	r3, [pc, #28]	; (8002870 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002852:	623b      	str	r3, [r7, #32]
      break;
 8002854:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002856:	6a3b      	ldr	r3, [r7, #32]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3728      	adds	r7, #40	; 0x28
 800285c:	46bd      	mov	sp, r7
 800285e:	bc90      	pop	{r4, r7}
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	0800405c 	.word	0x0800405c
 8002868:	0800406c 	.word	0x0800406c
 800286c:	40021000 	.word	0x40021000
 8002870:	007a1200 	.word	0x007a1200
 8002874:	003d0900 	.word	0x003d0900

08002878 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800287c:	4b02      	ldr	r3, [pc, #8]	; (8002888 <HAL_RCC_GetHCLKFreq+0x10>)
 800287e:	681b      	ldr	r3, [r3, #0]
}
 8002880:	4618      	mov	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr
 8002888:	20000000 	.word	0x20000000

0800288c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002890:	f7ff fff2 	bl	8002878 <HAL_RCC_GetHCLKFreq>
 8002894:	4601      	mov	r1, r0
 8002896:	4b05      	ldr	r3, [pc, #20]	; (80028ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	0a1b      	lsrs	r3, r3, #8
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	4a03      	ldr	r2, [pc, #12]	; (80028b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028a2:	5cd3      	ldrb	r3, [r2, r3]
 80028a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40021000 	.word	0x40021000
 80028b0:	08004080 	.word	0x08004080

080028b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028b8:	f7ff ffde 	bl	8002878 <HAL_RCC_GetHCLKFreq>
 80028bc:	4601      	mov	r1, r0
 80028be:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	0adb      	lsrs	r3, r3, #11
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	4a03      	ldr	r2, [pc, #12]	; (80028d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ca:	5cd3      	ldrb	r3, [r2, r3]
 80028cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40021000 	.word	0x40021000
 80028d8:	08004080 	.word	0x08004080

080028dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028e4:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <RCC_Delay+0x34>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a0a      	ldr	r2, [pc, #40]	; (8002914 <RCC_Delay+0x38>)
 80028ea:	fba2 2303 	umull	r2, r3, r2, r3
 80028ee:	0a5b      	lsrs	r3, r3, #9
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	fb02 f303 	mul.w	r3, r2, r3
 80028f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028f8:	bf00      	nop
  }
  while (Delay --);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1e5a      	subs	r2, r3, #1
 80028fe:	60fa      	str	r2, [r7, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f9      	bne.n	80028f8 <RCC_Delay+0x1c>
}
 8002904:	bf00      	nop
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	20000000 	.word	0x20000000
 8002914:	10624dd3 	.word	0x10624dd3

08002918 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e076      	b.n	8002a18 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292e:	2b00      	cmp	r3, #0
 8002930:	d108      	bne.n	8002944 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800293a:	d009      	beq.n	8002950 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	61da      	str	r2, [r3, #28]
 8002942:	e005      	b.n	8002950 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d106      	bne.n	8002970 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7fe fc22 	bl	80011b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2202      	movs	r2, #2
 8002974:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002986:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002998:	431a      	orrs	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	431a      	orrs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029c0:	431a      	orrs	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029ca:	431a      	orrs	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d4:	ea42 0103 	orr.w	r1, r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	0c1a      	lsrs	r2, r3, #16
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f002 0204 	and.w	r2, r2, #4
 80029f6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	69da      	ldr	r2, [r3, #28]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a06:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	099b      	lsrs	r3, r3, #6
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10f      	bne.n	8002a64 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00a      	beq.n	8002a64 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	099b      	lsrs	r3, r3, #6
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d004      	beq.n	8002a64 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	4798      	blx	r3
    return;
 8002a62:	e0bf      	b.n	8002be4 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	085b      	lsrs	r3, r3, #1
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00a      	beq.n	8002a86 <HAL_SPI_IRQHandler+0x66>
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	09db      	lsrs	r3, r3, #7
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d004      	beq.n	8002a86 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	4798      	blx	r3
    return;
 8002a84:	e0ae      	b.n	8002be4 <HAL_SPI_IRQHandler+0x1c4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	095b      	lsrs	r3, r3, #5
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d106      	bne.n	8002aa0 <HAL_SPI_IRQHandler+0x80>
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	099b      	lsrs	r3, r3, #6
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 80a2 	beq.w	8002be4 <HAL_SPI_IRQHandler+0x1c4>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	095b      	lsrs	r3, r3, #5
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 809b 	beq.w	8002be4 <HAL_SPI_IRQHandler+0x1c4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	099b      	lsrs	r3, r3, #6
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d023      	beq.n	8002b02 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	d011      	beq.n	8002aea <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aca:	f043 0204 	orr.w	r2, r3, #4
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	e00b      	b.n	8002b02 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002aea:	2300      	movs	r3, #0
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	613b      	str	r3, [r7, #16]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	613b      	str	r3, [r7, #16]
 8002afe:	693b      	ldr	r3, [r7, #16]
        return;
 8002b00:	e070      	b.n	8002be4 <HAL_SPI_IRQHandler+0x1c4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	095b      	lsrs	r3, r3, #5
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d014      	beq.n	8002b38 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b12:	f043 0201 	orr.w	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d050      	beq.n	8002be2 <HAL_SPI_IRQHandler+0x1c2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002b4e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d104      	bne.n	8002b6c <HAL_SPI_IRQHandler+0x14c>
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d034      	beq.n	8002bd6 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0203 	bic.w	r2, r2, #3
 8002b7a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d011      	beq.n	8002ba8 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b88:	4a18      	ldr	r2, [pc, #96]	; (8002bec <HAL_SPI_IRQHandler+0x1cc>)
 8002b8a:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fe ff37 	bl	8001a04 <HAL_DMA_Abort_IT>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d005      	beq.n	8002ba8 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d016      	beq.n	8002bde <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb4:	4a0d      	ldr	r2, [pc, #52]	; (8002bec <HAL_SPI_IRQHandler+0x1cc>)
 8002bb6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7fe ff21 	bl	8001a04 <HAL_DMA_Abort_IT>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00a      	beq.n	8002bde <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bcc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002bd4:	e003      	b.n	8002bde <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f80a 	bl	8002bf0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002bdc:	e000      	b.n	8002be0 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8002bde:	bf00      	nop
    return;
 8002be0:	bf00      	nop
 8002be2:	bf00      	nop
  }
}
 8002be4:	3720      	adds	r7, #32
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	08002c03 	.word	0x08002c03

08002bf0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bc80      	pop	{r7}
 8002c00:	4770      	bx	lr

08002c02 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b084      	sub	sp, #16
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f7ff ffe7 	bl	8002bf0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002c22:	bf00      	nop
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e041      	b.n	8002cc0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d106      	bne.n	8002c56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7fe fb01 	bl	8001258 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2202      	movs	r2, #2
 8002c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3304      	adds	r3, #4
 8002c66:	4619      	mov	r1, r3
 8002c68:	4610      	mov	r0, r2
 8002c6a:	f000 f98d 	bl	8002f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d109      	bne.n	8002cec <HAL_TIM_PWM_Start+0x24>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	bf14      	ite	ne
 8002ce4:	2301      	movne	r3, #1
 8002ce6:	2300      	moveq	r3, #0
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	e022      	b.n	8002d32 <HAL_TIM_PWM_Start+0x6a>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d109      	bne.n	8002d06 <HAL_TIM_PWM_Start+0x3e>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	bf14      	ite	ne
 8002cfe:	2301      	movne	r3, #1
 8002d00:	2300      	moveq	r3, #0
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	e015      	b.n	8002d32 <HAL_TIM_PWM_Start+0x6a>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d109      	bne.n	8002d20 <HAL_TIM_PWM_Start+0x58>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	bf14      	ite	ne
 8002d18:	2301      	movne	r3, #1
 8002d1a:	2300      	moveq	r3, #0
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	e008      	b.n	8002d32 <HAL_TIM_PWM_Start+0x6a>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	bf14      	ite	ne
 8002d2c:	2301      	movne	r3, #1
 8002d2e:	2300      	moveq	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e05e      	b.n	8002df8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d104      	bne.n	8002d4a <HAL_TIM_PWM_Start+0x82>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d48:	e013      	b.n	8002d72 <HAL_TIM_PWM_Start+0xaa>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d104      	bne.n	8002d5a <HAL_TIM_PWM_Start+0x92>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d58:	e00b      	b.n	8002d72 <HAL_TIM_PWM_Start+0xaa>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d104      	bne.n	8002d6a <HAL_TIM_PWM_Start+0xa2>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d68:	e003      	b.n	8002d72 <HAL_TIM_PWM_Start+0xaa>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2201      	movs	r2, #1
 8002d78:	6839      	ldr	r1, [r7, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 faee 	bl	800335c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a1e      	ldr	r2, [pc, #120]	; (8002e00 <HAL_TIM_PWM_Start+0x138>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d107      	bne.n	8002d9a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d98:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a18      	ldr	r2, [pc, #96]	; (8002e00 <HAL_TIM_PWM_Start+0x138>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d00e      	beq.n	8002dc2 <HAL_TIM_PWM_Start+0xfa>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dac:	d009      	beq.n	8002dc2 <HAL_TIM_PWM_Start+0xfa>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a14      	ldr	r2, [pc, #80]	; (8002e04 <HAL_TIM_PWM_Start+0x13c>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d004      	beq.n	8002dc2 <HAL_TIM_PWM_Start+0xfa>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a12      	ldr	r2, [pc, #72]	; (8002e08 <HAL_TIM_PWM_Start+0x140>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d111      	bne.n	8002de6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2b06      	cmp	r3, #6
 8002dd2:	d010      	beq.n	8002df6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0201 	orr.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de4:	e007      	b.n	8002df6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f042 0201 	orr.w	r2, r2, #1
 8002df4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	40012c00 	.word	0x40012c00
 8002e04:	40000400 	.word	0x40000400
 8002e08:	40000800 	.word	0x40000800

08002e0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d101      	bne.n	8002e26 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002e22:	2302      	movs	r3, #2
 8002e24:	e0ac      	b.n	8002f80 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b0c      	cmp	r3, #12
 8002e32:	f200 809f 	bhi.w	8002f74 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002e36:	a201      	add	r2, pc, #4	; (adr r2, 8002e3c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3c:	08002e71 	.word	0x08002e71
 8002e40:	08002f75 	.word	0x08002f75
 8002e44:	08002f75 	.word	0x08002f75
 8002e48:	08002f75 	.word	0x08002f75
 8002e4c:	08002eb1 	.word	0x08002eb1
 8002e50:	08002f75 	.word	0x08002f75
 8002e54:	08002f75 	.word	0x08002f75
 8002e58:	08002f75 	.word	0x08002f75
 8002e5c:	08002ef3 	.word	0x08002ef3
 8002e60:	08002f75 	.word	0x08002f75
 8002e64:	08002f75 	.word	0x08002f75
 8002e68:	08002f75 	.word	0x08002f75
 8002e6c:	08002f33 	.word	0x08002f33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68b9      	ldr	r1, [r7, #8]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 f8e8 	bl	800304c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699a      	ldr	r2, [r3, #24]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0208 	orr.w	r2, r2, #8
 8002e8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699a      	ldr	r2, [r3, #24]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0204 	bic.w	r2, r2, #4
 8002e9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6999      	ldr	r1, [r3, #24]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	691a      	ldr	r2, [r3, #16]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	619a      	str	r2, [r3, #24]
      break;
 8002eae:	e062      	b.n	8002f76 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 f92e 	bl	8003118 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	699a      	ldr	r2, [r3, #24]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699a      	ldr	r2, [r3, #24]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6999      	ldr	r1, [r3, #24]
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	021a      	lsls	r2, r3, #8
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	619a      	str	r2, [r3, #24]
      break;
 8002ef0:	e041      	b.n	8002f76 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68b9      	ldr	r1, [r7, #8]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 f977 	bl	80031ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	69da      	ldr	r2, [r3, #28]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f042 0208 	orr.w	r2, r2, #8
 8002f0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	69da      	ldr	r2, [r3, #28]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0204 	bic.w	r2, r2, #4
 8002f1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	69d9      	ldr	r1, [r3, #28]
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	61da      	str	r2, [r3, #28]
      break;
 8002f30:	e021      	b.n	8002f76 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68b9      	ldr	r1, [r7, #8]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 f9c1 	bl	80032c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	69da      	ldr	r2, [r3, #28]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	69da      	ldr	r2, [r3, #28]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	69d9      	ldr	r1, [r3, #28]
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	021a      	lsls	r2, r3, #8
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	61da      	str	r2, [r3, #28]
      break;
 8002f72:	e000      	b.n	8002f76 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002f74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a29      	ldr	r2, [pc, #164]	; (8003040 <TIM_Base_SetConfig+0xb8>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d00b      	beq.n	8002fb8 <TIM_Base_SetConfig+0x30>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa6:	d007      	beq.n	8002fb8 <TIM_Base_SetConfig+0x30>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a26      	ldr	r2, [pc, #152]	; (8003044 <TIM_Base_SetConfig+0xbc>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d003      	beq.n	8002fb8 <TIM_Base_SetConfig+0x30>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a25      	ldr	r2, [pc, #148]	; (8003048 <TIM_Base_SetConfig+0xc0>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d108      	bne.n	8002fca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a1c      	ldr	r2, [pc, #112]	; (8003040 <TIM_Base_SetConfig+0xb8>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d00b      	beq.n	8002fea <TIM_Base_SetConfig+0x62>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd8:	d007      	beq.n	8002fea <TIM_Base_SetConfig+0x62>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a19      	ldr	r2, [pc, #100]	; (8003044 <TIM_Base_SetConfig+0xbc>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d003      	beq.n	8002fea <TIM_Base_SetConfig+0x62>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a18      	ldr	r2, [pc, #96]	; (8003048 <TIM_Base_SetConfig+0xc0>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d108      	bne.n	8002ffc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	4313      	orrs	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a07      	ldr	r2, [pc, #28]	; (8003040 <TIM_Base_SetConfig+0xb8>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d103      	bne.n	8003030 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	691a      	ldr	r2, [r3, #16]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	615a      	str	r2, [r3, #20]
}
 8003036:	bf00      	nop
 8003038:	3714      	adds	r7, #20
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr
 8003040:	40012c00 	.word	0x40012c00
 8003044:	40000400 	.word	0x40000400
 8003048:	40000800 	.word	0x40000800

0800304c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800304c:	b480      	push	{r7}
 800304e:	b087      	sub	sp, #28
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	f023 0201 	bic.w	r2, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800307a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f023 0303 	bic.w	r3, r3, #3
 8003082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	4313      	orrs	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f023 0302 	bic.w	r3, r3, #2
 8003094:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	4313      	orrs	r3, r2
 800309e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4a1c      	ldr	r2, [pc, #112]	; (8003114 <TIM_OC1_SetConfig+0xc8>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d10c      	bne.n	80030c2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	f023 0308 	bic.w	r3, r3, #8
 80030ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f023 0304 	bic.w	r3, r3, #4
 80030c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a13      	ldr	r2, [pc, #76]	; (8003114 <TIM_OC1_SetConfig+0xc8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d111      	bne.n	80030ee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	621a      	str	r2, [r3, #32]
}
 8003108:	bf00      	nop
 800310a:	371c      	adds	r7, #28
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40012c00 	.word	0x40012c00

08003118 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003118:	b480      	push	{r7}
 800311a:	b087      	sub	sp, #28
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	f023 0210 	bic.w	r2, r3, #16
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800314e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	021b      	lsls	r3, r3, #8
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	4313      	orrs	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	f023 0320 	bic.w	r3, r3, #32
 8003162:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	4313      	orrs	r3, r2
 800316e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a1d      	ldr	r2, [pc, #116]	; (80031e8 <TIM_OC2_SetConfig+0xd0>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d10d      	bne.n	8003194 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800317e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	4313      	orrs	r3, r2
 800318a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003192:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a14      	ldr	r2, [pc, #80]	; (80031e8 <TIM_OC2_SetConfig+0xd0>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d113      	bne.n	80031c4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	621a      	str	r2, [r3, #32]
}
 80031de:	bf00      	nop
 80031e0:	371c      	adds	r7, #28
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr
 80031e8:	40012c00 	.word	0x40012c00

080031ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b087      	sub	sp, #28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800321a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f023 0303 	bic.w	r3, r3, #3
 8003222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003234:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	021b      	lsls	r3, r3, #8
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	4313      	orrs	r3, r2
 8003240:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a1d      	ldr	r2, [pc, #116]	; (80032bc <TIM_OC3_SetConfig+0xd0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d10d      	bne.n	8003266 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003250:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	021b      	lsls	r3, r3, #8
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	4313      	orrs	r3, r2
 800325c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003264:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a14      	ldr	r2, [pc, #80]	; (80032bc <TIM_OC3_SetConfig+0xd0>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d113      	bne.n	8003296 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003274:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800327c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	4313      	orrs	r3, r2
 8003288:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	4313      	orrs	r3, r2
 8003294:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	621a      	str	r2, [r3, #32]
}
 80032b0:	bf00      	nop
 80032b2:	371c      	adds	r7, #28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	40012c00 	.word	0x40012c00

080032c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b087      	sub	sp, #28
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	021b      	lsls	r3, r3, #8
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4313      	orrs	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800330a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	031b      	lsls	r3, r3, #12
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	4313      	orrs	r3, r2
 8003316:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a0f      	ldr	r2, [pc, #60]	; (8003358 <TIM_OC4_SetConfig+0x98>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d109      	bne.n	8003334 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003326:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	019b      	lsls	r3, r3, #6
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4313      	orrs	r3, r2
 8003332:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	621a      	str	r2, [r3, #32]
}
 800334e:	bf00      	nop
 8003350:	371c      	adds	r7, #28
 8003352:	46bd      	mov	sp, r7
 8003354:	bc80      	pop	{r7}
 8003356:	4770      	bx	lr
 8003358:	40012c00 	.word	0x40012c00

0800335c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800335c:	b480      	push	{r7}
 800335e:	b087      	sub	sp, #28
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f003 031f 	and.w	r3, r3, #31
 800336e:	2201      	movs	r2, #1
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6a1a      	ldr	r2, [r3, #32]
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	43db      	mvns	r3, r3
 800337e:	401a      	ands	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a1a      	ldr	r2, [r3, #32]
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f003 031f 	and.w	r3, r3, #31
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	fa01 f303 	lsl.w	r3, r1, r3
 8003394:	431a      	orrs	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	621a      	str	r2, [r3, #32]
}
 800339a:	bf00      	nop
 800339c:	371c      	adds	r7, #28
 800339e:	46bd      	mov	sp, r7
 80033a0:	bc80      	pop	{r7}
 80033a2:	4770      	bx	lr

080033a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033b8:	2302      	movs	r3, #2
 80033ba:	e046      	b.n	800344a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a16      	ldr	r2, [pc, #88]	; (8003454 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d00e      	beq.n	800341e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003408:	d009      	beq.n	800341e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a12      	ldr	r2, [pc, #72]	; (8003458 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d004      	beq.n	800341e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a10      	ldr	r2, [pc, #64]	; (800345c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d10c      	bne.n	8003438 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003424:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	4313      	orrs	r3, r2
 800342e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3714      	adds	r7, #20
 800344e:	46bd      	mov	sp, r7
 8003450:	bc80      	pop	{r7}
 8003452:	4770      	bx	lr
 8003454:	40012c00 	.word	0x40012c00
 8003458:	40000400 	.word	0x40000400
 800345c:	40000800 	.word	0x40000800

08003460 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800346a:	2300      	movs	r3, #0
 800346c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003474:	2b01      	cmp	r3, #1
 8003476:	d101      	bne.n	800347c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003478:	2302      	movs	r3, #2
 800347a:	e03d      	b.n	80034f8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	4313      	orrs	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	4313      	orrs	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bc80      	pop	{r7}
 8003500:	4770      	bx	lr

08003502 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b082      	sub	sp, #8
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e03f      	b.n	8003594 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d106      	bne.n	800352e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f7fd fee7 	bl	80012fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2224      	movs	r2, #36	; 0x24
 8003532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68da      	ldr	r2, [r3, #12]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003544:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 fcc2 	bl	8003ed0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	691a      	ldr	r2, [r3, #16]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800355a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695a      	ldr	r2, [r3, #20]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800356a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68da      	ldr	r2, [r3, #12]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800357a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2220      	movs	r2, #32
 8003586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2220      	movs	r2, #32
 800358e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	4613      	mov	r3, r2
 80035a8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b20      	cmp	r3, #32
 80035b4:	d13c      	bne.n	8003630 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d002      	beq.n	80035c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80035bc:	88fb      	ldrh	r3, [r7, #6]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e035      	b.n	8003632 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d101      	bne.n	80035d4 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80035d0:	2302      	movs	r3, #2
 80035d2:	e02e      	b.n	8003632 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2201      	movs	r2, #1
 80035e0:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80035e2:	88fb      	ldrh	r3, [r7, #6]
 80035e4:	461a      	mov	r2, r3
 80035e6:	68b9      	ldr	r1, [r7, #8]
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 faa7 	bl	8003b3c <UART_Start_Receive_DMA>
 80035ee:	4603      	mov	r3, r0
 80035f0:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80035f2:	7dfb      	ldrb	r3, [r7, #23]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d119      	bne.n	800362c <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d113      	bne.n	8003628 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003600:	2300      	movs	r3, #0
 8003602:	613b      	str	r3, [r7, #16]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	613b      	str	r3, [r7, #16]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	613b      	str	r3, [r7, #16]
 8003614:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68da      	ldr	r2, [r3, #12]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f042 0210 	orr.w	r2, r2, #16
 8003624:	60da      	str	r2, [r3, #12]
 8003626:	e001      	b.n	800362c <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 800362c:	7dfb      	ldrb	r3, [r7, #23]
 800362e:	e000      	b.n	8003632 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8003630:	2302      	movs	r3, #2
  }
}
 8003632:	4618      	mov	r0, r3
 8003634:	3718      	adds	r7, #24
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
	...

0800363c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08a      	sub	sp, #40	; 0x28
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800365c:	2300      	movs	r3, #0
 800365e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003660:	2300      	movs	r3, #0
 8003662:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10d      	bne.n	800368e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003674:	f003 0320 	and.w	r3, r3, #32
 8003678:	2b00      	cmp	r3, #0
 800367a:	d008      	beq.n	800368e <HAL_UART_IRQHandler+0x52>
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	f003 0320 	and.w	r3, r3, #32
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fb78 	bl	8003d7c <UART_Receive_IT>
      return;
 800368c:	e17c      	b.n	8003988 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 80b1 	beq.w	80037f8 <HAL_UART_IRQHandler+0x1bc>
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b00      	cmp	r3, #0
 800369e:	d105      	bne.n	80036ac <HAL_UART_IRQHandler+0x70>
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 80a6 	beq.w	80037f8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00a      	beq.n	80036cc <HAL_UART_IRQHandler+0x90>
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d005      	beq.n	80036cc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	f043 0201 	orr.w	r2, r3, #1
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ce:	f003 0304 	and.w	r3, r3, #4
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <HAL_UART_IRQHandler+0xb0>
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d005      	beq.n	80036ec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e4:	f043 0202 	orr.w	r2, r3, #2
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00a      	beq.n	800370c <HAL_UART_IRQHandler+0xd0>
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d005      	beq.n	800370c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003704:	f043 0204 	orr.w	r2, r3, #4
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00f      	beq.n	8003736 <HAL_UART_IRQHandler+0xfa>
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	f003 0320 	and.w	r3, r3, #32
 800371c:	2b00      	cmp	r3, #0
 800371e:	d104      	bne.n	800372a <HAL_UART_IRQHandler+0xee>
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d005      	beq.n	8003736 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f043 0208 	orr.w	r2, r3, #8
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 811f 	beq.w	800397e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	f003 0320 	and.w	r3, r3, #32
 8003746:	2b00      	cmp	r3, #0
 8003748:	d007      	beq.n	800375a <HAL_UART_IRQHandler+0x11e>
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	f003 0320 	and.w	r3, r3, #32
 8003750:	2b00      	cmp	r3, #0
 8003752:	d002      	beq.n	800375a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 fb11 	bl	8003d7c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003764:	2b00      	cmp	r3, #0
 8003766:	bf14      	ite	ne
 8003768:	2301      	movne	r3, #1
 800376a:	2300      	moveq	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003774:	f003 0308 	and.w	r3, r3, #8
 8003778:	2b00      	cmp	r3, #0
 800377a:	d102      	bne.n	8003782 <HAL_UART_IRQHandler+0x146>
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d031      	beq.n	80037e6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 fa53 	bl	8003c2e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003792:	2b00      	cmp	r3, #0
 8003794:	d023      	beq.n	80037de <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	695a      	ldr	r2, [r3, #20]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037a4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d013      	beq.n	80037d6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b2:	4a77      	ldr	r2, [pc, #476]	; (8003990 <HAL_UART_IRQHandler+0x354>)
 80037b4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7fe f922 	bl	8001a04 <HAL_DMA_Abort_IT>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d016      	beq.n	80037f4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037d0:	4610      	mov	r0, r2
 80037d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037d4:	e00e      	b.n	80037f4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 f8f7 	bl	80039ca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037dc:	e00a      	b.n	80037f4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f8f3 	bl	80039ca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e4:	e006      	b.n	80037f4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 f8ef 	bl	80039ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80037f2:	e0c4      	b.n	800397e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037f4:	bf00      	nop
    return;
 80037f6:	e0c2      	b.n	800397e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	f040 80a1 	bne.w	8003944 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	f003 0310 	and.w	r3, r3, #16
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 809b 	beq.w	8003944 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	f003 0310 	and.w	r3, r3, #16
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 8095 	beq.w	8003944 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800381a:	2300      	movs	r3, #0
 800381c:	60fb      	str	r3, [r7, #12]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	60fb      	str	r3, [r7, #12]
 800382e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383a:	2b00      	cmp	r3, #0
 800383c:	d04e      	beq.n	80038dc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003848:	8a3b      	ldrh	r3, [r7, #16]
 800384a:	2b00      	cmp	r3, #0
 800384c:	f000 8099 	beq.w	8003982 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003854:	8a3a      	ldrh	r2, [r7, #16]
 8003856:	429a      	cmp	r2, r3
 8003858:	f080 8093 	bcs.w	8003982 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	8a3a      	ldrh	r2, [r7, #16]
 8003860:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	2b20      	cmp	r3, #32
 800386a:	d02b      	beq.n	80038c4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68da      	ldr	r2, [r3, #12]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800387a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695a      	ldr	r2, [r3, #20]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0201 	bic.w	r2, r2, #1
 800388a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	695a      	ldr	r2, [r3, #20]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800389a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0210 	bic.w	r2, r2, #16
 80038b8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fe f865 	bl	800198e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	4619      	mov	r1, r3
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f7fd f993 	bl	8000c00 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80038da:	e052      	b.n	8003982 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d048      	beq.n	8003986 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80038f4:	8a7b      	ldrh	r3, [r7, #18]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d045      	beq.n	8003986 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68da      	ldr	r2, [r3, #12]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003908:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	695a      	ldr	r2, [r3, #20]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0201 	bic.w	r2, r2, #1
 8003918:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2220      	movs	r2, #32
 800391e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0210 	bic.w	r2, r2, #16
 8003936:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003938:	8a7b      	ldrh	r3, [r7, #18]
 800393a:	4619      	mov	r1, r3
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7fd f95f 	bl	8000c00 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003942:	e020      	b.n	8003986 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394a:	2b00      	cmp	r3, #0
 800394c:	d008      	beq.n	8003960 <HAL_UART_IRQHandler+0x324>
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f9a8 	bl	8003cae <UART_Transmit_IT>
    return;
 800395e:	e013      	b.n	8003988 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00e      	beq.n	8003988 <HAL_UART_IRQHandler+0x34c>
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003970:	2b00      	cmp	r3, #0
 8003972:	d009      	beq.n	8003988 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f9e9 	bl	8003d4c <UART_EndTransmit_IT>
    return;
 800397a:	bf00      	nop
 800397c:	e004      	b.n	8003988 <HAL_UART_IRQHandler+0x34c>
    return;
 800397e:	bf00      	nop
 8003980:	e002      	b.n	8003988 <HAL_UART_IRQHandler+0x34c>
      return;
 8003982:	bf00      	nop
 8003984:	e000      	b.n	8003988 <HAL_UART_IRQHandler+0x34c>
      return;
 8003986:	bf00      	nop
  }
}
 8003988:	3728      	adds	r7, #40	; 0x28
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	08003c87 	.word	0x08003c87

08003994 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr

080039a6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr

080039b8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bc80      	pop	{r7}
 80039c8:	4770      	bx	lr

080039ca <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bc80      	pop	{r7}
 80039da:	4770      	bx	lr

080039dc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0320 	and.w	r3, r3, #32
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d12a      	bne.n	8003a4e <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68da      	ldr	r2, [r3, #12]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a0c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	695a      	ldr	r2, [r3, #20]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0201 	bic.w	r2, r2, #1
 8003a1c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695a      	ldr	r2, [r3, #20]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a2c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2220      	movs	r2, #32
 8003a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d107      	bne.n	8003a4e <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68da      	ldr	r2, [r3, #12]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0210 	bic.w	r2, r2, #16
 8003a4c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d106      	bne.n	8003a64 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f7fd f8cf 	bl	8000c00 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a62:	e002      	b.n	8003a6a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f7ff ff9e 	bl	80039a6 <HAL_UART_RxCpltCallback>
}
 8003a6a:	bf00      	nop
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b084      	sub	sp, #16
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d108      	bne.n	8003a9a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a8c:	085b      	lsrs	r3, r3, #1
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	4619      	mov	r1, r3
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f7fd f8b4 	bl	8000c00 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003a98:	e002      	b.n	8003aa0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f7ff ff8c 	bl	80039b8 <HAL_UART_RxHalfCpltCallback>
}
 8003aa0:	bf00      	nop
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	bf14      	ite	ne
 8003ac8:	2301      	movne	r3, #1
 8003aca:	2300      	moveq	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b21      	cmp	r3, #33	; 0x21
 8003ada:	d108      	bne.n	8003aee <UART_DMAError+0x46>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d005      	beq.n	8003aee <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003ae8:	68b8      	ldr	r0, [r7, #8]
 8003aea:	f000 f88b 	bl	8003c04 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	bf14      	ite	ne
 8003afc:	2301      	movne	r3, #1
 8003afe:	2300      	moveq	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b22      	cmp	r3, #34	; 0x22
 8003b0e:	d108      	bne.n	8003b22 <UART_DMAError+0x7a>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d005      	beq.n	8003b22 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003b1c:	68b8      	ldr	r0, [r7, #8]
 8003b1e:	f000 f886 	bl	8003c2e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	f043 0210 	orr.w	r2, r3, #16
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b2e:	68b8      	ldr	r0, [r7, #8]
 8003b30:	f7ff ff4b 	bl	80039ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b34:	bf00      	nop
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	4613      	mov	r3, r2
 8003b48:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	88fa      	ldrh	r2, [r7, #6]
 8003b54:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2222      	movs	r2, #34	; 0x22
 8003b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b68:	4a23      	ldr	r2, [pc, #140]	; (8003bf8 <UART_Start_Receive_DMA+0xbc>)
 8003b6a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b70:	4a22      	ldr	r2, [pc, #136]	; (8003bfc <UART_Start_Receive_DMA+0xc0>)
 8003b72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b78:	4a21      	ldr	r2, [pc, #132]	; (8003c00 <UART_Start_Receive_DMA+0xc4>)
 8003b7a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b80:	2200      	movs	r2, #0
 8003b82:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003b84:	f107 0308 	add.w	r3, r7, #8
 8003b88:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	3304      	adds	r3, #4
 8003b94:	4619      	mov	r1, r3
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	88fb      	ldrh	r3, [r7, #6]
 8003b9c:	f7fd fe98 	bl	80018d0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	613b      	str	r3, [r7, #16]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	613b      	str	r3, [r7, #16]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	613b      	str	r3, [r7, #16]
 8003bb4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bcc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695a      	ldr	r2, [r3, #20]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f042 0201 	orr.w	r2, r2, #1
 8003bdc:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	695a      	ldr	r2, [r3, #20]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bec:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	080039dd 	.word	0x080039dd
 8003bfc:	08003a73 	.word	0x08003a73
 8003c00:	08003aa9 	.word	0x08003aa9

08003c04 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003c1a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bc80      	pop	{r7}
 8003c2c:	4770      	bx	lr

08003c2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68da      	ldr	r2, [r3, #12]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c44:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	695a      	ldr	r2, [r3, #20]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0201 	bic.w	r2, r2, #1
 8003c54:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d107      	bne.n	8003c6e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68da      	ldr	r2, [r3, #12]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 0210 	bic.w	r2, r2, #16
 8003c6c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bc80      	pop	{r7}
 8003c84:	4770      	bx	lr

08003c86 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b084      	sub	sp, #16
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f7ff fe92 	bl	80039ca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ca6:	bf00      	nop
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b085      	sub	sp, #20
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b21      	cmp	r3, #33	; 0x21
 8003cc0:	d13e      	bne.n	8003d40 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cca:	d114      	bne.n	8003cf6 <UART_Transmit_IT+0x48>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d110      	bne.n	8003cf6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	881b      	ldrh	r3, [r3, #0]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ce8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	1c9a      	adds	r2, r3, #2
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	621a      	str	r2, [r3, #32]
 8003cf4:	e008      	b.n	8003d08 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a1b      	ldr	r3, [r3, #32]
 8003cfa:	1c59      	adds	r1, r3, #1
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6211      	str	r1, [r2, #32]
 8003d00:	781a      	ldrb	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	4619      	mov	r1, r3
 8003d16:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10f      	bne.n	8003d3c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d2a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d3a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	e000      	b.n	8003d42 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d40:	2302      	movs	r3, #2
  }
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bc80      	pop	{r7}
 8003d4a:	4770      	bx	lr

08003d4c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68da      	ldr	r2, [r3, #12]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d62:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f7ff fe11 	bl	8003994 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b22      	cmp	r3, #34	; 0x22
 8003d8e:	f040 8099 	bne.w	8003ec4 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d9a:	d117      	bne.n	8003dcc <UART_Receive_IT+0x50>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d113      	bne.n	8003dcc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003da4:	2300      	movs	r3, #0
 8003da6:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dac:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc4:	1c9a      	adds	r2, r3, #2
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	629a      	str	r2, [r3, #40]	; 0x28
 8003dca:	e026      	b.n	8003e1a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd0:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dde:	d007      	beq.n	8003df0 <UART_Receive_IT+0x74>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10a      	bne.n	8003dfe <UART_Receive_IT+0x82>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d106      	bne.n	8003dfe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	701a      	strb	r2, [r3, #0]
 8003dfc:	e008      	b.n	8003e10 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	4619      	mov	r1, r3
 8003e28:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d148      	bne.n	8003ec0 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68da      	ldr	r2, [r3, #12]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0220 	bic.w	r2, r2, #32
 8003e3c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695a      	ldr	r2, [r3, #20]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 0201 	bic.w	r2, r2, #1
 8003e5c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2220      	movs	r2, #32
 8003e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d123      	bne.n	8003eb6 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0210 	bic.w	r2, r2, #16
 8003e82:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0310 	and.w	r3, r3, #16
 8003e8e:	2b10      	cmp	r3, #16
 8003e90:	d10a      	bne.n	8003ea8 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e92:	2300      	movs	r3, #0
 8003e94:	60fb      	str	r3, [r7, #12]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	60fb      	str	r3, [r7, #12]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003eac:	4619      	mov	r1, r3
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7fc fea6 	bl	8000c00 <HAL_UARTEx_RxEventCallback>
 8003eb4:	e002      	b.n	8003ebc <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7ff fd75 	bl	80039a6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	e002      	b.n	8003ec6 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	e000      	b.n	8003ec6 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003ec4:	2302      	movs	r3, #2
  }
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
	...

08003ed0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68da      	ldr	r2, [r3, #12]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003f0a:	f023 030c 	bic.w	r3, r3, #12
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6812      	ldr	r2, [r2, #0]
 8003f12:	68b9      	ldr	r1, [r7, #8]
 8003f14:	430b      	orrs	r3, r1
 8003f16:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	699a      	ldr	r2, [r3, #24]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a2c      	ldr	r2, [pc, #176]	; (8003fe4 <UART_SetConfig+0x114>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d103      	bne.n	8003f40 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f38:	f7fe fcbc 	bl	80028b4 <HAL_RCC_GetPCLK2Freq>
 8003f3c:	60f8      	str	r0, [r7, #12]
 8003f3e:	e002      	b.n	8003f46 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f40:	f7fe fca4 	bl	800288c <HAL_RCC_GetPCLK1Freq>
 8003f44:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	009a      	lsls	r2, r3, #2
 8003f50:	441a      	add	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5c:	4a22      	ldr	r2, [pc, #136]	; (8003fe8 <UART_SetConfig+0x118>)
 8003f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f62:	095b      	lsrs	r3, r3, #5
 8003f64:	0119      	lsls	r1, r3, #4
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	009a      	lsls	r2, r3, #2
 8003f70:	441a      	add	r2, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f7c:	4b1a      	ldr	r3, [pc, #104]	; (8003fe8 <UART_SetConfig+0x118>)
 8003f7e:	fba3 0302 	umull	r0, r3, r3, r2
 8003f82:	095b      	lsrs	r3, r3, #5
 8003f84:	2064      	movs	r0, #100	; 0x64
 8003f86:	fb00 f303 	mul.w	r3, r0, r3
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	011b      	lsls	r3, r3, #4
 8003f8e:	3332      	adds	r3, #50	; 0x32
 8003f90:	4a15      	ldr	r2, [pc, #84]	; (8003fe8 <UART_SetConfig+0x118>)
 8003f92:	fba2 2303 	umull	r2, r3, r2, r3
 8003f96:	095b      	lsrs	r3, r3, #5
 8003f98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f9c:	4419      	add	r1, r3
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	009a      	lsls	r2, r3, #2
 8003fa8:	441a      	add	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fb4:	4b0c      	ldr	r3, [pc, #48]	; (8003fe8 <UART_SetConfig+0x118>)
 8003fb6:	fba3 0302 	umull	r0, r3, r3, r2
 8003fba:	095b      	lsrs	r3, r3, #5
 8003fbc:	2064      	movs	r0, #100	; 0x64
 8003fbe:	fb00 f303 	mul.w	r3, r0, r3
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	011b      	lsls	r3, r3, #4
 8003fc6:	3332      	adds	r3, #50	; 0x32
 8003fc8:	4a07      	ldr	r2, [pc, #28]	; (8003fe8 <UART_SetConfig+0x118>)
 8003fca:	fba2 2303 	umull	r2, r3, r2, r3
 8003fce:	095b      	lsrs	r3, r3, #5
 8003fd0:	f003 020f 	and.w	r2, r3, #15
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	440a      	add	r2, r1
 8003fda:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003fdc:	bf00      	nop
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40013800 	.word	0x40013800
 8003fe8:	51eb851f 	.word	0x51eb851f

08003fec <__libc_init_array>:
 8003fec:	b570      	push	{r4, r5, r6, lr}
 8003fee:	2500      	movs	r5, #0
 8003ff0:	4e0c      	ldr	r6, [pc, #48]	; (8004024 <__libc_init_array+0x38>)
 8003ff2:	4c0d      	ldr	r4, [pc, #52]	; (8004028 <__libc_init_array+0x3c>)
 8003ff4:	1ba4      	subs	r4, r4, r6
 8003ff6:	10a4      	asrs	r4, r4, #2
 8003ff8:	42a5      	cmp	r5, r4
 8003ffa:	d109      	bne.n	8004010 <__libc_init_array+0x24>
 8003ffc:	f000 f822 	bl	8004044 <_init>
 8004000:	2500      	movs	r5, #0
 8004002:	4e0a      	ldr	r6, [pc, #40]	; (800402c <__libc_init_array+0x40>)
 8004004:	4c0a      	ldr	r4, [pc, #40]	; (8004030 <__libc_init_array+0x44>)
 8004006:	1ba4      	subs	r4, r4, r6
 8004008:	10a4      	asrs	r4, r4, #2
 800400a:	42a5      	cmp	r5, r4
 800400c:	d105      	bne.n	800401a <__libc_init_array+0x2e>
 800400e:	bd70      	pop	{r4, r5, r6, pc}
 8004010:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004014:	4798      	blx	r3
 8004016:	3501      	adds	r5, #1
 8004018:	e7ee      	b.n	8003ff8 <__libc_init_array+0xc>
 800401a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800401e:	4798      	blx	r3
 8004020:	3501      	adds	r5, #1
 8004022:	e7f2      	b.n	800400a <__libc_init_array+0x1e>
 8004024:	08004088 	.word	0x08004088
 8004028:	08004088 	.word	0x08004088
 800402c:	08004088 	.word	0x08004088
 8004030:	0800408c 	.word	0x0800408c

08004034 <memset>:
 8004034:	4603      	mov	r3, r0
 8004036:	4402      	add	r2, r0
 8004038:	4293      	cmp	r3, r2
 800403a:	d100      	bne.n	800403e <memset+0xa>
 800403c:	4770      	bx	lr
 800403e:	f803 1b01 	strb.w	r1, [r3], #1
 8004042:	e7f9      	b.n	8004038 <memset+0x4>

08004044 <_init>:
 8004044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004046:	bf00      	nop
 8004048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800404a:	bc08      	pop	{r3}
 800404c:	469e      	mov	lr, r3
 800404e:	4770      	bx	lr

08004050 <_fini>:
 8004050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004052:	bf00      	nop
 8004054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004056:	bc08      	pop	{r3}
 8004058:	469e      	mov	lr, r3
 800405a:	4770      	bx	lr
