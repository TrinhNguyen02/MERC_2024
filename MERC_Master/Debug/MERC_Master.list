
MERC_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ddc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003ee8  08003ee8  00013ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f14  08003f14  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003f14  08003f14  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f14  08003f14  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f14  08003f14  00013f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f18  08003f18  00013f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  2000000c  08003f28  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08003f28  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b3a2  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b85  00000000  00000000  0002b3d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c78  00000000  00000000  0002cf60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc0  00000000  00000000  0002dbd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000189d  00000000  00000000  0002e798  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009c76  00000000  00000000  00030035  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086b56  00000000  00000000  00039cab  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c0801  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000339c  00000000  00000000  000c087c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003ed0 	.word	0x08003ed0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003ed0 	.word	0x08003ed0

0800014c <constrain>:

// ---------------------------

uint8_t dirBuffer[2] = {0, 0};

void constrain(int16_t* value, int min, int max) {
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
    if (*value <= min) {
 8000158:	68fb      	ldr	r3, [r7, #12]
 800015a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800015e:	461a      	mov	r2, r3
 8000160:	68bb      	ldr	r3, [r7, #8]
 8000162:	4293      	cmp	r3, r2
 8000164:	db04      	blt.n	8000170 <constrain+0x24>
        *value = min;
 8000166:	68bb      	ldr	r3, [r7, #8]
 8000168:	b21a      	sxth	r2, r3
 800016a:	68fb      	ldr	r3, [r7, #12]
 800016c:	801a      	strh	r2, [r3, #0]
    } else if (*value >= max) {
        *value = max;
    }
}
 800016e:	e00a      	b.n	8000186 <constrain+0x3a>
    } else if (*value >= max) {
 8000170:	68fb      	ldr	r3, [r7, #12]
 8000172:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000176:	461a      	mov	r2, r3
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	4293      	cmp	r3, r2
 800017c:	dc03      	bgt.n	8000186 <constrain+0x3a>
        *value = max;
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	b21a      	sxth	r2, r3
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	801a      	strh	r2, [r3, #0]
}
 8000186:	bf00      	nop
 8000188:	3714      	adds	r7, #20
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr

08000190 <calcPD>:
int16_t calcPD(motorStruct* Motor_x, int16_t input, int16_t setPoint) {
 8000190:	b580      	push	{r7, lr}
 8000192:	b084      	sub	sp, #16
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
 8000198:	460b      	mov	r3, r1
 800019a:	807b      	strh	r3, [r7, #2]
 800019c:	4613      	mov	r3, r2
 800019e:	803b      	strh	r3, [r7, #0]
    int16_t error = (int16_t)((setPoint - input)*MAX_PWM/MAX_SPEED);
 80001a0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80001a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80001a8:	1ad3      	subs	r3, r2, r3
 80001aa:	2264      	movs	r2, #100	; 0x64
 80001ac:	fb02 f303 	mul.w	r3, r2, r3
 80001b0:	4a32      	ldr	r2, [pc, #200]	; (800027c <calcPD+0xec>)
 80001b2:	fb82 1203 	smull	r1, r2, r2, r3
 80001b6:	1192      	asrs	r2, r2, #6
 80001b8:	17db      	asrs	r3, r3, #31
 80001ba:	1ad3      	subs	r3, r2, r3
 80001bc:	81fb      	strh	r3, [r7, #14]
    Motor_x->error = error;
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	89fa      	ldrh	r2, [r7, #14]
 80001c2:	829a      	strh	r2, [r3, #20]
    int8_t kp = 1;
 80001c4:	2301      	movs	r3, #1
 80001c6:	737b      	strb	r3, [r7, #13]
    int8_t kd = 1;
 80001c8:	2301      	movs	r3, #1
 80001ca:	733b      	strb	r3, [r7, #12]
    if((setPoint - Motor_x->preSetPoint) >= 100) {
 80001cc:	f9b7 3000 	ldrsh.w	r3, [r7]
 80001d0:	687a      	ldr	r2, [r7, #4]
 80001d2:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80001d6:	1a9b      	subs	r3, r3, r2
 80001d8:	2b63      	cmp	r3, #99	; 0x63
 80001da:	dd04      	ble.n	80001e6 <calcPD+0x56>
    	setPoint-= 50;
 80001dc:	883b      	ldrh	r3, [r7, #0]
 80001de:	3b32      	subs	r3, #50	; 0x32
 80001e0:	b29b      	uxth	r3, r3
 80001e2:	803b      	strh	r3, [r7, #0]
 80001e4:	e00c      	b.n	8000200 <calcPD+0x70>
    }
    else if((setPoint - Motor_x->preSetPoint) <= -100) {
 80001e6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80001ea:	687a      	ldr	r2, [r7, #4]
 80001ec:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80001f0:	1a9b      	subs	r3, r3, r2
 80001f2:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80001f6:	da03      	bge.n	8000200 <calcPD+0x70>
    	setPoint+= 50;
 80001f8:	883b      	ldrh	r3, [r7, #0]
 80001fa:	3332      	adds	r3, #50	; 0x32
 80001fc:	b29b      	uxth	r3, r3
 80001fe:	803b      	strh	r3, [r7, #0]
    }
    Motor_x->preSetPoint = setPoint;
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	883a      	ldrh	r2, [r7, #0]
 8000204:	825a      	strh	r2, [r3, #18]


    int16_t output = (int16_t)(setPoint*MAX_PWM/MAX_SPEED + kp * error + kd * (error - Motor_x->preError));
 8000206:	f9b7 3000 	ldrsh.w	r3, [r7]
 800020a:	2264      	movs	r2, #100	; 0x64
 800020c:	fb02 f303 	mul.w	r3, r2, r3
 8000210:	4a1a      	ldr	r2, [pc, #104]	; (800027c <calcPD+0xec>)
 8000212:	fb82 1203 	smull	r1, r2, r2, r3
 8000216:	1192      	asrs	r2, r2, #6
 8000218:	17db      	asrs	r3, r3, #31
 800021a:	1ad3      	subs	r3, r2, r3
 800021c:	b29a      	uxth	r2, r3
 800021e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000222:	b29b      	uxth	r3, r3
 8000224:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8000228:	6878      	ldr	r0, [r7, #4]
 800022a:	f9b0 0016 	ldrsh.w	r0, [r0, #22]
 800022e:	1a09      	subs	r1, r1, r0
 8000230:	b289      	uxth	r1, r1
 8000232:	fb01 f303 	mul.w	r3, r1, r3
 8000236:	b299      	uxth	r1, r3
 8000238:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800023c:	b29b      	uxth	r3, r3
 800023e:	89f8      	ldrh	r0, [r7, #14]
 8000240:	fb00 f303 	mul.w	r3, r0, r3
 8000244:	b29b      	uxth	r3, r3
 8000246:	440b      	add	r3, r1
 8000248:	b29b      	uxth	r3, r3
 800024a:	4413      	add	r3, r2
 800024c:	b29b      	uxth	r3, r3
 800024e:	b21b      	sxth	r3, r3
 8000250:	817b      	strh	r3, [r7, #10]

    Motor_x->preSetPoint = setPoint;
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	883a      	ldrh	r2, [r7, #0]
 8000256:	825a      	strh	r2, [r3, #18]
    Motor_x->preError = (int16_t)error;
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	89fa      	ldrh	r2, [r7, #14]
 800025c:	82da      	strh	r2, [r3, #22]
    constrain(&output, -100, 100);
 800025e:	f107 030a 	add.w	r3, r7, #10
 8000262:	2264      	movs	r2, #100	; 0x64
 8000264:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8000268:	4618      	mov	r0, r3
 800026a:	f7ff ff6f 	bl	800014c <constrain>
    return output;
 800026e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 8000272:	4618      	mov	r0, r3
 8000274:	3710      	adds	r7, #16
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
 800027a:	bf00      	nop
 800027c:	60606061 	.word	0x60606061

08000280 <ctrlMotor>:
void ctrlMotor(motorStruct* Motor_x){
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	Motor_x->PWM = calcPD(Motor_x, *(Motor_x->Speed), Motor_x->setPointSpeed);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	68db      	ldr	r3, [r3, #12]
 800028c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000296:	461a      	mov	r2, r3
 8000298:	6878      	ldr	r0, [r7, #4]
 800029a:	f7ff ff79 	bl	8000190 <calcPD>
 800029e:	4603      	mov	r3, r0
 80002a0:	461a      	mov	r2, r3
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	811a      	strh	r2, [r3, #8]
	int16_t PWM = Motor_x->PWM;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	891b      	ldrh	r3, [r3, #8]
 80002aa:	81fb      	strh	r3, [r7, #14]
	if( PWM == 0) {
 80002ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d125      	bne.n	8000300 <ctrlMotor+0x80>
		Motor_x->dirMotor = 0x00; // dir = 0 1 ~ 0x01
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	2200      	movs	r2, #0
 80002b8:	761a      	strb	r2, [r3, #24]
	    __HAL_TIM_SetCompare(Motor_x->htim, (uint32_t)(Motor_x->Channel), 0);
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d105      	bne.n	80002ce <ctrlMotor+0x4e>
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	2200      	movs	r2, #0
 80002ca:	635a      	str	r2, [r3, #52]	; 0x34
 80002cc:	e018      	b.n	8000300 <ctrlMotor+0x80>
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	685b      	ldr	r3, [r3, #4]
 80002d2:	2b04      	cmp	r3, #4
 80002d4:	d105      	bne.n	80002e2 <ctrlMotor+0x62>
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	2200      	movs	r2, #0
 80002de:	639a      	str	r2, [r3, #56]	; 0x38
 80002e0:	e00e      	b.n	8000300 <ctrlMotor+0x80>
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	685b      	ldr	r3, [r3, #4]
 80002e6:	2b08      	cmp	r3, #8
 80002e8:	d105      	bne.n	80002f6 <ctrlMotor+0x76>
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	2200      	movs	r2, #0
 80002f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80002f4:	e004      	b.n	8000300 <ctrlMotor+0x80>
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	2200      	movs	r2, #0
 80002fe:	641a      	str	r2, [r3, #64]	; 0x40
	}

	if (PWM > 0 ){
 8000300:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000304:	2b00      	cmp	r3, #0
 8000306:	dd3e      	ble.n	8000386 <ctrlMotor+0x106>
		Motor_x->dirMotor = 0x02; // dir = 1 0 ~ 0x02
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	2202      	movs	r2, #2
 800030c:	761a      	strb	r2, [r3, #24]
	    __HAL_TIM_SetCompare(Motor_x->htim, (uint32_t)(Motor_x->Channel), PWM*10);
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	685b      	ldr	r3, [r3, #4]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d10b      	bne.n	800032e <ctrlMotor+0xae>
 8000316:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800031a:	4613      	mov	r3, r2
 800031c:	009b      	lsls	r3, r3, #2
 800031e:	4413      	add	r3, r2
 8000320:	005b      	lsls	r3, r3, #1
 8000322:	461a      	mov	r2, r3
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	635a      	str	r2, [r3, #52]	; 0x34
	}
	else if (PWM < 0 ){
		Motor_x->dirMotor = 0x01; // dir = 0 1 ~ 0x01
	    __HAL_TIM_SetCompare(Motor_x->htim, (uint32_t)(Motor_x->Channel),PWM*(-10));
	}
}
 800032c:	e069      	b.n	8000402 <ctrlMotor+0x182>
	    __HAL_TIM_SetCompare(Motor_x->htim, (uint32_t)(Motor_x->Channel), PWM*10);
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	685b      	ldr	r3, [r3, #4]
 8000332:	2b04      	cmp	r3, #4
 8000334:	d10b      	bne.n	800034e <ctrlMotor+0xce>
 8000336:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800033a:	4613      	mov	r3, r2
 800033c:	009b      	lsls	r3, r3, #2
 800033e:	4413      	add	r3, r2
 8000340:	005b      	lsls	r3, r3, #1
 8000342:	461a      	mov	r2, r3
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800034c:	e059      	b.n	8000402 <ctrlMotor+0x182>
	    __HAL_TIM_SetCompare(Motor_x->htim, (uint32_t)(Motor_x->Channel), PWM*10);
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	685b      	ldr	r3, [r3, #4]
 8000352:	2b08      	cmp	r3, #8
 8000354:	d10b      	bne.n	800036e <ctrlMotor+0xee>
 8000356:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800035a:	4613      	mov	r3, r2
 800035c:	009b      	lsls	r3, r3, #2
 800035e:	4413      	add	r3, r2
 8000360:	005b      	lsls	r3, r3, #1
 8000362:	461a      	mov	r2, r3
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800036c:	e049      	b.n	8000402 <ctrlMotor+0x182>
	    __HAL_TIM_SetCompare(Motor_x->htim, (uint32_t)(Motor_x->Channel), PWM*10);
 800036e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000372:	4613      	mov	r3, r2
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	4413      	add	r3, r2
 8000378:	005b      	lsls	r3, r3, #1
 800037a:	461a      	mov	r2, r3
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000384:	e03d      	b.n	8000402 <ctrlMotor+0x182>
	else if (PWM < 0 ){
 8000386:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800038a:	2b00      	cmp	r3, #0
 800038c:	da39      	bge.n	8000402 <ctrlMotor+0x182>
		Motor_x->dirMotor = 0x01; // dir = 0 1 ~ 0x01
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	2201      	movs	r2, #1
 8000392:	761a      	strb	r2, [r3, #24]
	    __HAL_TIM_SetCompare(Motor_x->htim, (uint32_t)(Motor_x->Channel),PWM*(-10));
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	685b      	ldr	r3, [r3, #4]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d10a      	bne.n	80003b2 <ctrlMotor+0x132>
 800039c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80003a0:	f06f 0209 	mvn.w	r2, #9
 80003a4:	fb02 f203 	mul.w	r2, r2, r3
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	635a      	str	r2, [r3, #52]	; 0x34
}
 80003b0:	e027      	b.n	8000402 <ctrlMotor+0x182>
	    __HAL_TIM_SetCompare(Motor_x->htim, (uint32_t)(Motor_x->Channel),PWM*(-10));
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	685b      	ldr	r3, [r3, #4]
 80003b6:	2b04      	cmp	r3, #4
 80003b8:	d10a      	bne.n	80003d0 <ctrlMotor+0x150>
 80003ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80003be:	f06f 0209 	mvn.w	r2, #9
 80003c2:	fb02 f203 	mul.w	r2, r2, r3
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80003ce:	e018      	b.n	8000402 <ctrlMotor+0x182>
	    __HAL_TIM_SetCompare(Motor_x->htim, (uint32_t)(Motor_x->Channel),PWM*(-10));
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	685b      	ldr	r3, [r3, #4]
 80003d4:	2b08      	cmp	r3, #8
 80003d6:	d10a      	bne.n	80003ee <ctrlMotor+0x16e>
 80003d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80003dc:	f06f 0209 	mvn.w	r2, #9
 80003e0:	fb02 f203 	mul.w	r2, r2, r3
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80003ec:	e009      	b.n	8000402 <ctrlMotor+0x182>
	    __HAL_TIM_SetCompare(Motor_x->htim, (uint32_t)(Motor_x->Channel),PWM*(-10));
 80003ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80003f2:	f06f 0209 	mvn.w	r2, #9
 80003f6:	fb02 f203 	mul.w	r2, r2, r3
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000402:	bf00      	nop
 8000404:	3710      	adds	r7, #16
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
	...

0800040c <ctrlDir>:
void ctrlDir(void){
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
	dirBuffer[0] = 0xFF;
 8000410:	4b15      	ldr	r3, [pc, #84]	; (8000468 <ctrlDir+0x5c>)
 8000412:	22ff      	movs	r2, #255	; 0xff
 8000414:	701a      	strb	r2, [r3, #0]
	dirBuffer[1] = 0x00;
 8000416:	4b14      	ldr	r3, [pc, #80]	; (8000468 <ctrlDir+0x5c>)
 8000418:	2200      	movs	r2, #0
 800041a:	705a      	strb	r2, [r3, #1]
	dirBuffer[1] |= (Motor_1.dirMotor << 6) | (Motor_2.dirMotor << 4) | (Motor_3.dirMotor << 2) | (Motor_4.dirMotor << 0);
 800041c:	4b12      	ldr	r3, [pc, #72]	; (8000468 <ctrlDir+0x5c>)
 800041e:	785b      	ldrb	r3, [r3, #1]
 8000420:	b25a      	sxtb	r2, r3
 8000422:	4b12      	ldr	r3, [pc, #72]	; (800046c <ctrlDir+0x60>)
 8000424:	7e1b      	ldrb	r3, [r3, #24]
 8000426:	019b      	lsls	r3, r3, #6
 8000428:	b259      	sxtb	r1, r3
 800042a:	4b11      	ldr	r3, [pc, #68]	; (8000470 <ctrlDir+0x64>)
 800042c:	7e1b      	ldrb	r3, [r3, #24]
 800042e:	011b      	lsls	r3, r3, #4
 8000430:	b25b      	sxtb	r3, r3
 8000432:	430b      	orrs	r3, r1
 8000434:	b259      	sxtb	r1, r3
 8000436:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <ctrlDir+0x68>)
 8000438:	7e1b      	ldrb	r3, [r3, #24]
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	b25b      	sxtb	r3, r3
 800043e:	430b      	orrs	r3, r1
 8000440:	b259      	sxtb	r1, r3
 8000442:	4b0d      	ldr	r3, [pc, #52]	; (8000478 <ctrlDir+0x6c>)
 8000444:	7e1b      	ldrb	r3, [r3, #24]
 8000446:	b25b      	sxtb	r3, r3
 8000448:	430b      	orrs	r3, r1
 800044a:	b25b      	sxtb	r3, r3
 800044c:	4313      	orrs	r3, r2
 800044e:	b25b      	sxtb	r3, r3
 8000450:	b2da      	uxtb	r2, r3
 8000452:	4b05      	ldr	r3, [pc, #20]	; (8000468 <ctrlDir+0x5c>)
 8000454:	705a      	strb	r2, [r3, #1]
	HAL_UART_Transmit(&huart2, dirBuffer, 2, 10);
 8000456:	230a      	movs	r3, #10
 8000458:	2202      	movs	r2, #2
 800045a:	4903      	ldr	r1, [pc, #12]	; (8000468 <ctrlDir+0x5c>)
 800045c:	4807      	ldr	r0, [pc, #28]	; (800047c <ctrlDir+0x70>)
 800045e:	f002 ff07 	bl	8003270 <HAL_UART_Transmit>

}
 8000462:	bf00      	nop
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	20000028 	.word	0x20000028
 800046c:	200001b8 	.word	0x200001b8
 8000470:	2000002c 	.word	0x2000002c
 8000474:	200000c8 	.word	0x200000c8
 8000478:	200000a0 	.word	0x200000a0
 800047c:	20000174 	.word	0x20000174

08000480 <HAL_UARTEx_RxEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
 8000488:	460b      	mov	r3, r1
 800048a:	807b      	strh	r3, [r7, #2]
	uint8_t *rxBff = &speedMotor;
 800048c:	4b22      	ldr	r3, [pc, #136]	; (8000518 <HAL_UARTEx_RxEventCallback+0x98>)
 800048e:	60fb      	str	r3, [r7, #12]
    HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxSpeedBuffer, RX_SPEED_SIZE);
 8000490:	220a      	movs	r2, #10
 8000492:	4922      	ldr	r1, [pc, #136]	; (800051c <HAL_UARTEx_RxEventCallback+0x9c>)
 8000494:	4822      	ldr	r0, [pc, #136]	; (8000520 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000496:	f002 ff7d 	bl	8003394 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800049a:	4b22      	ldr	r3, [pc, #136]	; (8000524 <HAL_UARTEx_RxEventCallback+0xa4>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	681a      	ldr	r2, [r3, #0]
 80004a0:	4b20      	ldr	r3, [pc, #128]	; (8000524 <HAL_UARTEx_RxEventCallback+0xa4>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	f022 0204 	bic.w	r2, r2, #4
 80004a8:	601a      	str	r2, [r3, #0]
    if(rxSpeedBuffer[0]==0x55 && rxSpeedBuffer[9]==0xAA){
 80004aa:	4b1c      	ldr	r3, [pc, #112]	; (800051c <HAL_UARTEx_RxEventCallback+0x9c>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	2b55      	cmp	r3, #85	; 0x55
 80004b0:	d12d      	bne.n	800050e <HAL_UARTEx_RxEventCallback+0x8e>
 80004b2:	4b1a      	ldr	r3, [pc, #104]	; (800051c <HAL_UARTEx_RxEventCallback+0x9c>)
 80004b4:	7a5b      	ldrb	r3, [r3, #9]
 80004b6:	2baa      	cmp	r3, #170	; 0xaa
 80004b8:	d129      	bne.n	800050e <HAL_UARTEx_RxEventCallback+0x8e>
    	 for(int i = 1; i <= 8; i++){
 80004ba:	2301      	movs	r3, #1
 80004bc:	60bb      	str	r3, [r7, #8]
 80004be:	e00b      	b.n	80004d8 <HAL_UARTEx_RxEventCallback+0x58>
    		 *rxBff = rxSpeedBuffer[i];
 80004c0:	4a16      	ldr	r2, [pc, #88]	; (800051c <HAL_UARTEx_RxEventCallback+0x9c>)
 80004c2:	68bb      	ldr	r3, [r7, #8]
 80004c4:	4413      	add	r3, r2
 80004c6:	781a      	ldrb	r2, [r3, #0]
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	701a      	strb	r2, [r3, #0]
    		 rxBff++;
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	3301      	adds	r3, #1
 80004d0:	60fb      	str	r3, [r7, #12]
    	 for(int i = 1; i <= 8; i++){
 80004d2:	68bb      	ldr	r3, [r7, #8]
 80004d4:	3301      	adds	r3, #1
 80004d6:	60bb      	str	r3, [r7, #8]
 80004d8:	68bb      	ldr	r3, [r7, #8]
 80004da:	2b08      	cmp	r3, #8
 80004dc:	ddf0      	ble.n	80004c0 <HAL_UARTEx_RxEventCallback+0x40>
    	 }
    	 HAL_IWDG_Refresh(&hiwdg);
 80004de:	4812      	ldr	r0, [pc, #72]	; (8000528 <HAL_UARTEx_RxEventCallback+0xa8>)
 80004e0:	f001 fab3 	bl	8001a4a <HAL_IWDG_Refresh>
    	 ctrlMotor(&Motor_1);
 80004e4:	4811      	ldr	r0, [pc, #68]	; (800052c <HAL_UARTEx_RxEventCallback+0xac>)
 80004e6:	f7ff fecb 	bl	8000280 <ctrlMotor>
    	 ctrlMotor(&Motor_2);
 80004ea:	4811      	ldr	r0, [pc, #68]	; (8000530 <HAL_UARTEx_RxEventCallback+0xb0>)
 80004ec:	f7ff fec8 	bl	8000280 <ctrlMotor>
    	 ctrlMotor(&Motor_3);
 80004f0:	4810      	ldr	r0, [pc, #64]	; (8000534 <HAL_UARTEx_RxEventCallback+0xb4>)
 80004f2:	f7ff fec5 	bl	8000280 <ctrlMotor>
    	 ctrlMotor(&Motor_4);
 80004f6:	4810      	ldr	r0, [pc, #64]	; (8000538 <HAL_UARTEx_RxEventCallback+0xb8>)
 80004f8:	f7ff fec2 	bl	8000280 <ctrlMotor>
    	 HAL_IWDG_Refresh(&hiwdg);
 80004fc:	480a      	ldr	r0, [pc, #40]	; (8000528 <HAL_UARTEx_RxEventCallback+0xa8>)
 80004fe:	f001 faa4 	bl	8001a4a <HAL_IWDG_Refresh>
    	 ctrlDir();
 8000502:	f7ff ff83 	bl	800040c <ctrlDir>
     	 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8000506:	2104      	movs	r1, #4
 8000508:	480c      	ldr	r0, [pc, #48]	; (800053c <HAL_UARTEx_RxEventCallback+0xbc>)
 800050a:	f001 fa43 	bl	8001994 <HAL_GPIO_TogglePin>
    }
}
 800050e:	bf00      	nop
 8000510:	3710      	adds	r7, #16
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	20000098 	.word	0x20000098
 800051c:	200000bc 	.word	0x200000bc
 8000520:	20000174 	.word	0x20000174
 8000524:	20000048 	.word	0x20000048
 8000528:	2000008c 	.word	0x2000008c
 800052c:	200001b8 	.word	0x200001b8
 8000530:	2000002c 	.word	0x2000002c
 8000534:	200000c8 	.word	0x200000c8
 8000538:	200000a0 	.word	0x200000a0
 800053c:	40010c00 	.word	0x40010c00

08000540 <HAL_TIM_PeriodElapsedCallback>:


 void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	 if(htim->Instance == htim2.Instance){
	 }
 }
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr
	...

08000554 <initCtrlMotor>:

void initCtrlMotor(void){
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
	Motor_1.htim = &htim1;
 8000558:	4b3b      	ldr	r3, [pc, #236]	; (8000648 <initCtrlMotor+0xf4>)
 800055a:	4a3c      	ldr	r2, [pc, #240]	; (800064c <initCtrlMotor+0xf8>)
 800055c:	601a      	str	r2, [r3, #0]
	Motor_1.Channel = TIM_CHANNEL_1;
 800055e:	4b3a      	ldr	r3, [pc, #232]	; (8000648 <initCtrlMotor+0xf4>)
 8000560:	2200      	movs	r2, #0
 8000562:	605a      	str	r2, [r3, #4]
	Motor_1.Speed = &(speedMotor.speed_1);
 8000564:	4b38      	ldr	r3, [pc, #224]	; (8000648 <initCtrlMotor+0xf4>)
 8000566:	4a3a      	ldr	r2, [pc, #232]	; (8000650 <initCtrlMotor+0xfc>)
 8000568:	60da      	str	r2, [r3, #12]
	Motor_1.error = *(Motor_1.Speed) - Motor_1.setPointSpeed;
 800056a:	4b37      	ldr	r3, [pc, #220]	; (8000648 <initCtrlMotor+0xf4>)
 800056c:	68db      	ldr	r3, [r3, #12]
 800056e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000572:	b29a      	uxth	r2, r3
 8000574:	4b34      	ldr	r3, [pc, #208]	; (8000648 <initCtrlMotor+0xf4>)
 8000576:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800057a:	b29b      	uxth	r3, r3
 800057c:	1ad3      	subs	r3, r2, r3
 800057e:	b29b      	uxth	r3, r3
 8000580:	b21a      	sxth	r2, r3
 8000582:	4b31      	ldr	r3, [pc, #196]	; (8000648 <initCtrlMotor+0xf4>)
 8000584:	829a      	strh	r2, [r3, #20]
	Motor_1.preError = 0;
 8000586:	4b30      	ldr	r3, [pc, #192]	; (8000648 <initCtrlMotor+0xf4>)
 8000588:	2200      	movs	r2, #0
 800058a:	82da      	strh	r2, [r3, #22]
	Motor_1.preSetPoint = 0;
 800058c:	4b2e      	ldr	r3, [pc, #184]	; (8000648 <initCtrlMotor+0xf4>)
 800058e:	2200      	movs	r2, #0
 8000590:	825a      	strh	r2, [r3, #18]

	Motor_2.htim = &htim1;
 8000592:	4b30      	ldr	r3, [pc, #192]	; (8000654 <initCtrlMotor+0x100>)
 8000594:	4a2d      	ldr	r2, [pc, #180]	; (800064c <initCtrlMotor+0xf8>)
 8000596:	601a      	str	r2, [r3, #0]
	Motor_2.Channel = TIM_CHANNEL_2;
 8000598:	4b2e      	ldr	r3, [pc, #184]	; (8000654 <initCtrlMotor+0x100>)
 800059a:	2204      	movs	r2, #4
 800059c:	605a      	str	r2, [r3, #4]
	Motor_2.Speed = &(speedMotor.speed_2);
 800059e:	4b2d      	ldr	r3, [pc, #180]	; (8000654 <initCtrlMotor+0x100>)
 80005a0:	4a2d      	ldr	r2, [pc, #180]	; (8000658 <initCtrlMotor+0x104>)
 80005a2:	60da      	str	r2, [r3, #12]
	Motor_2.error = *(Motor_2.Speed) - Motor_2.setPointSpeed;
 80005a4:	4b2b      	ldr	r3, [pc, #172]	; (8000654 <initCtrlMotor+0x100>)
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005ac:	b29a      	uxth	r2, r3
 80005ae:	4b29      	ldr	r3, [pc, #164]	; (8000654 <initCtrlMotor+0x100>)
 80005b0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	1ad3      	subs	r3, r2, r3
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	b21a      	sxth	r2, r3
 80005bc:	4b25      	ldr	r3, [pc, #148]	; (8000654 <initCtrlMotor+0x100>)
 80005be:	829a      	strh	r2, [r3, #20]
	Motor_2.preError = 0;
 80005c0:	4b24      	ldr	r3, [pc, #144]	; (8000654 <initCtrlMotor+0x100>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	82da      	strh	r2, [r3, #22]
	Motor_2.preSetPoint = 0;
 80005c6:	4b23      	ldr	r3, [pc, #140]	; (8000654 <initCtrlMotor+0x100>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	825a      	strh	r2, [r3, #18]

	Motor_3.htim = &htim1;
 80005cc:	4b23      	ldr	r3, [pc, #140]	; (800065c <initCtrlMotor+0x108>)
 80005ce:	4a1f      	ldr	r2, [pc, #124]	; (800064c <initCtrlMotor+0xf8>)
 80005d0:	601a      	str	r2, [r3, #0]
	Motor_3.Channel = TIM_CHANNEL_3;
 80005d2:	4b22      	ldr	r3, [pc, #136]	; (800065c <initCtrlMotor+0x108>)
 80005d4:	2208      	movs	r2, #8
 80005d6:	605a      	str	r2, [r3, #4]
	Motor_3.Speed = &(speedMotor.speed_3);
 80005d8:	4b20      	ldr	r3, [pc, #128]	; (800065c <initCtrlMotor+0x108>)
 80005da:	4a21      	ldr	r2, [pc, #132]	; (8000660 <initCtrlMotor+0x10c>)
 80005dc:	60da      	str	r2, [r3, #12]
	Motor_3.error = *(Motor_3.Speed) - Motor_3.setPointSpeed;
 80005de:	4b1f      	ldr	r3, [pc, #124]	; (800065c <initCtrlMotor+0x108>)
 80005e0:	68db      	ldr	r3, [r3, #12]
 80005e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	4b1c      	ldr	r3, [pc, #112]	; (800065c <initCtrlMotor+0x108>)
 80005ea:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	b21a      	sxth	r2, r3
 80005f6:	4b19      	ldr	r3, [pc, #100]	; (800065c <initCtrlMotor+0x108>)
 80005f8:	829a      	strh	r2, [r3, #20]
	Motor_3.preError = 0;
 80005fa:	4b18      	ldr	r3, [pc, #96]	; (800065c <initCtrlMotor+0x108>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	82da      	strh	r2, [r3, #22]
	Motor_3.preSetPoint = 0;
 8000600:	4b16      	ldr	r3, [pc, #88]	; (800065c <initCtrlMotor+0x108>)
 8000602:	2200      	movs	r2, #0
 8000604:	825a      	strh	r2, [r3, #18]

	Motor_4.htim = &htim1;
 8000606:	4b17      	ldr	r3, [pc, #92]	; (8000664 <initCtrlMotor+0x110>)
 8000608:	4a10      	ldr	r2, [pc, #64]	; (800064c <initCtrlMotor+0xf8>)
 800060a:	601a      	str	r2, [r3, #0]
	Motor_4.Channel = TIM_CHANNEL_4;
 800060c:	4b15      	ldr	r3, [pc, #84]	; (8000664 <initCtrlMotor+0x110>)
 800060e:	220c      	movs	r2, #12
 8000610:	605a      	str	r2, [r3, #4]
	Motor_4.Speed = &(speedMotor.speed_4);
 8000612:	4b14      	ldr	r3, [pc, #80]	; (8000664 <initCtrlMotor+0x110>)
 8000614:	4a14      	ldr	r2, [pc, #80]	; (8000668 <initCtrlMotor+0x114>)
 8000616:	60da      	str	r2, [r3, #12]
	Motor_4.error = *(Motor_4.Speed) - Motor_4.setPointSpeed;
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <initCtrlMotor+0x110>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000620:	b29a      	uxth	r2, r3
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <initCtrlMotor+0x110>)
 8000624:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000628:	b29b      	uxth	r3, r3
 800062a:	1ad3      	subs	r3, r2, r3
 800062c:	b29b      	uxth	r3, r3
 800062e:	b21a      	sxth	r2, r3
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <initCtrlMotor+0x110>)
 8000632:	829a      	strh	r2, [r3, #20]
	Motor_4.preError = 0;
 8000634:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <initCtrlMotor+0x110>)
 8000636:	2200      	movs	r2, #0
 8000638:	82da      	strh	r2, [r3, #22]
	Motor_4.preSetPoint = 0;
 800063a:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <initCtrlMotor+0x110>)
 800063c:	2200      	movs	r2, #0
 800063e:	825a      	strh	r2, [r3, #18]
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	200001b8 	.word	0x200001b8
 800064c:	200000e4 	.word	0x200000e4
 8000650:	20000098 	.word	0x20000098
 8000654:	2000002c 	.word	0x2000002c
 8000658:	2000009a 	.word	0x2000009a
 800065c:	200000c8 	.word	0x200000c8
 8000660:	2000009c 	.word	0x2000009c
 8000664:	200000a0 	.word	0x200000a0
 8000668:	2000009e 	.word	0x2000009e

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000670:	f000 fbee 	bl	8000e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000674:	f000 f86a 	bl	800074c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000678:	f000 fa06 	bl	8000a88 <MX_GPIO_Init>
  MX_DMA_Init();
 800067c:	f000 f9e6 	bl	8000a4c <MX_DMA_Init>
  MX_IWDG_Init();
 8000680:	f000 f8ac 	bl	80007dc <MX_IWDG_Init>
  MX_TIM1_Init();
 8000684:	f000 f8c4 	bl	8000810 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000688:	f000 f96a 	bl	8000960 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800068c:	f000 f9b4 	bl	80009f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000690:	2100      	movs	r1, #0
 8000692:	4826      	ldr	r0, [pc, #152]	; (800072c <main+0xc0>)
 8000694:	f001 fef6 	bl	8002484 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000698:	2104      	movs	r1, #4
 800069a:	4824      	ldr	r0, [pc, #144]	; (800072c <main+0xc0>)
 800069c:	f001 fef2 	bl	8002484 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80006a0:	2108      	movs	r1, #8
 80006a2:	4822      	ldr	r0, [pc, #136]	; (800072c <main+0xc0>)
 80006a4:	f001 feee 	bl	8002484 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80006a8:	210c      	movs	r1, #12
 80006aa:	4820      	ldr	r0, [pc, #128]	; (800072c <main+0xc0>)
 80006ac:	f001 feea 	bl	8002484 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim2);
 80006b0:	481f      	ldr	r0, [pc, #124]	; (8000730 <main+0xc4>)
 80006b2:	f001 fe45 	bl	8002340 <HAL_TIM_Base_Start_IT>

  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxSpeedBuffer, RX_SPEED_SIZE);
 80006b6:	220a      	movs	r2, #10
 80006b8:	491e      	ldr	r1, [pc, #120]	; (8000734 <main+0xc8>)
 80006ba:	481f      	ldr	r0, [pc, #124]	; (8000738 <main+0xcc>)
 80006bc:	f002 fe6a 	bl	8003394 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80006c0:	4b1e      	ldr	r3, [pc, #120]	; (800073c <main+0xd0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	4b1d      	ldr	r3, [pc, #116]	; (800073c <main+0xd0>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	f022 0204 	bic.w	r2, r2, #4
 80006ce:	601a      	str	r2, [r3, #0]

  initCtrlMotor();
 80006d0:	f7ff ff40 	bl	8000554 <initCtrlMotor>
  /* USER CODE END 2 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 80006d4:	2201      	movs	r2, #1
 80006d6:	2120      	movs	r1, #32
 80006d8:	4819      	ldr	r0, [pc, #100]	; (8000740 <main+0xd4>)
 80006da:	f001 f943 	bl	8001964 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Motor_1.setPointSpeed = -40;
 80006de:	4b19      	ldr	r3, [pc, #100]	; (8000744 <main+0xd8>)
 80006e0:	f64f 72d8 	movw	r2, #65496	; 0xffd8
 80006e4:	821a      	strh	r2, [r3, #16]
	  Motor_2.setPointSpeed = 30;
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <main+0xdc>)
 80006e8:	221e      	movs	r2, #30
 80006ea:	821a      	strh	r2, [r3, #16]
	  HAL_Delay(3000);
 80006ec:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80006f0:	f000 fc10 	bl	8000f14 <HAL_Delay>
	  Motor_1.setPointSpeed = 0;
 80006f4:	4b13      	ldr	r3, [pc, #76]	; (8000744 <main+0xd8>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	821a      	strh	r2, [r3, #16]
	  Motor_2.setPointSpeed = 0;
 80006fa:	4b13      	ldr	r3, [pc, #76]	; (8000748 <main+0xdc>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	821a      	strh	r2, [r3, #16]
	  HAL_Delay(4000);
 8000700:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000704:	f000 fc06 	bl	8000f14 <HAL_Delay>
	  Motor_1.setPointSpeed = 40;
 8000708:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <main+0xd8>)
 800070a:	2228      	movs	r2, #40	; 0x28
 800070c:	821a      	strh	r2, [r3, #16]
	  Motor_2.setPointSpeed = -20;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <main+0xdc>)
 8000710:	f64f 72ec 	movw	r2, #65516	; 0xffec
 8000714:	821a      	strh	r2, [r3, #16]
	  HAL_Delay(3000);
 8000716:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800071a:	f000 fbfb 	bl	8000f14 <HAL_Delay>
	  Motor_1.setPointSpeed = 0;
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <main+0xd8>)
 8000720:	2200      	movs	r2, #0
 8000722:	821a      	strh	r2, [r3, #16]
	  Motor_2.setPointSpeed = 0;
 8000724:	4b08      	ldr	r3, [pc, #32]	; (8000748 <main+0xdc>)
 8000726:	2200      	movs	r2, #0
 8000728:	821a      	strh	r2, [r3, #16]
	  Motor_1.setPointSpeed = -40;
 800072a:	e7d8      	b.n	80006de <main+0x72>
 800072c:	200000e4 	.word	0x200000e4
 8000730:	2000012c 	.word	0x2000012c
 8000734:	200000bc 	.word	0x200000bc
 8000738:	20000174 	.word	0x20000174
 800073c:	20000048 	.word	0x20000048
 8000740:	40010c00 	.word	0x40010c00
 8000744:	200001b8 	.word	0x200001b8
 8000748:	2000002c 	.word	0x2000002c

0800074c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b090      	sub	sp, #64	; 0x40
 8000750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	f107 0318 	add.w	r3, r7, #24
 8000756:	2228      	movs	r2, #40	; 0x28
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f003 fbb0 	bl	8003ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800076e:	2309      	movs	r3, #9
 8000770:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000772:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000776:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800077c:	2301      	movs	r3, #1
 800077e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000780:	2301      	movs	r3, #1
 8000782:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000784:	2302      	movs	r3, #2
 8000786:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000788:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800078c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800078e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000792:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000794:	f107 0318 	add.w	r3, r7, #24
 8000798:	4618      	mov	r0, r3
 800079a:	f001 f965 	bl	8001a68 <HAL_RCC_OscConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80007a4:	f000 f9ba 	bl	8000b1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a8:	230f      	movs	r3, #15
 80007aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ac:	2302      	movs	r3, #2
 80007ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2102      	movs	r1, #2
 80007c2:	4618      	mov	r0, r3
 80007c4:	f001 fbd0 	bl	8001f68 <HAL_RCC_ClockConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 80007ce:	f000 f9a5 	bl	8000b1c <Error_Handler>
  }
}
 80007d2:	bf00      	nop
 80007d4:	3740      	adds	r7, #64	; 0x40
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_IWDG_Init+0x2c>)
 80007e2:	4a0a      	ldr	r2, [pc, #40]	; (800080c <MX_IWDG_Init+0x30>)
 80007e4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_IWDG_Init+0x2c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 149;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_IWDG_Init+0x2c>)
 80007ee:	2295      	movs	r2, #149	; 0x95
 80007f0:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_IWDG_Init+0x2c>)
 80007f4:	f001 f8e7 	bl	80019c6 <HAL_IWDG_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_IWDG_Init+0x26>
  {
    Error_Handler();
 80007fe:	f000 f98d 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	2000008c 	.word	0x2000008c
 800080c:	40003000 	.word	0x40003000

08000810 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b092      	sub	sp, #72	; 0x48
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000816:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
 8000830:	615a      	str	r2, [r3, #20]
 8000832:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	2220      	movs	r2, #32
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f003 fb40 	bl	8003ec0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000840:	4b45      	ldr	r3, [pc, #276]	; (8000958 <MX_TIM1_Init+0x148>)
 8000842:	4a46      	ldr	r2, [pc, #280]	; (800095c <MX_TIM1_Init+0x14c>)
 8000844:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000846:	4b44      	ldr	r3, [pc, #272]	; (8000958 <MX_TIM1_Init+0x148>)
 8000848:	2247      	movs	r2, #71	; 0x47
 800084a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084c:	4b42      	ldr	r3, [pc, #264]	; (8000958 <MX_TIM1_Init+0x148>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000852:	4b41      	ldr	r3, [pc, #260]	; (8000958 <MX_TIM1_Init+0x148>)
 8000854:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000858:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800085a:	4b3f      	ldr	r3, [pc, #252]	; (8000958 <MX_TIM1_Init+0x148>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000860:	4b3d      	ldr	r3, [pc, #244]	; (8000958 <MX_TIM1_Init+0x148>)
 8000862:	2200      	movs	r2, #0
 8000864:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000866:	4b3c      	ldr	r3, [pc, #240]	; (8000958 <MX_TIM1_Init+0x148>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800086c:	483a      	ldr	r0, [pc, #232]	; (8000958 <MX_TIM1_Init+0x148>)
 800086e:	f001 fdb9 	bl	80023e4 <HAL_TIM_PWM_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000878:	f000 f950 	bl	8000b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087c:	2300      	movs	r3, #0
 800087e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000884:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000888:	4619      	mov	r1, r3
 800088a:	4833      	ldr	r0, [pc, #204]	; (8000958 <MX_TIM1_Init+0x148>)
 800088c:	f002 fbe2 	bl	8003054 <HAL_TIMEx_MasterConfigSynchronization>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000896:	f000 f941 	bl	8000b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800089a:	2360      	movs	r3, #96	; 0x60
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008a6:	2300      	movs	r3, #0
 80008a8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008ae:	2300      	movs	r3, #0
 80008b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008b2:	2300      	movs	r3, #0
 80008b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ba:	2200      	movs	r2, #0
 80008bc:	4619      	mov	r1, r3
 80008be:	4826      	ldr	r0, [pc, #152]	; (8000958 <MX_TIM1_Init+0x148>)
 80008c0:	f001 ff8a 	bl	80027d8 <HAL_TIM_PWM_ConfigChannel>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80008ca:	f000 f927 	bl	8000b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d2:	2204      	movs	r2, #4
 80008d4:	4619      	mov	r1, r3
 80008d6:	4820      	ldr	r0, [pc, #128]	; (8000958 <MX_TIM1_Init+0x148>)
 80008d8:	f001 ff7e 	bl	80027d8 <HAL_TIM_PWM_ConfigChannel>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80008e2:	f000 f91b 	bl	8000b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ea:	2208      	movs	r2, #8
 80008ec:	4619      	mov	r1, r3
 80008ee:	481a      	ldr	r0, [pc, #104]	; (8000958 <MX_TIM1_Init+0x148>)
 80008f0:	f001 ff72 	bl	80027d8 <HAL_TIM_PWM_ConfigChannel>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80008fa:	f000 f90f 	bl	8000b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000902:	220c      	movs	r2, #12
 8000904:	4619      	mov	r1, r3
 8000906:	4814      	ldr	r0, [pc, #80]	; (8000958 <MX_TIM1_Init+0x148>)
 8000908:	f001 ff66 	bl	80027d8 <HAL_TIM_PWM_ConfigChannel>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8000912:	f000 f903 	bl	8000b1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800092a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800092e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	4619      	mov	r1, r3
 8000938:	4807      	ldr	r0, [pc, #28]	; (8000958 <MX_TIM1_Init+0x148>)
 800093a:	f002 fbe9 	bl	8003110 <HAL_TIMEx_ConfigBreakDeadTime>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000944:	f000 f8ea 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000948:	4803      	ldr	r0, [pc, #12]	; (8000958 <MX_TIM1_Init+0x148>)
 800094a:	f000 f95f 	bl	8000c0c <HAL_TIM_MspPostInit>

}
 800094e:	bf00      	nop
 8000950:	3748      	adds	r7, #72	; 0x48
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	200000e4 	.word	0x200000e4
 800095c:	40012c00 	.word	0x40012c00

08000960 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
 8000972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000974:	463b      	mov	r3, r7
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800097c:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <MX_TIM2_Init+0x94>)
 800097e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000982:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000984:	4b1b      	ldr	r3, [pc, #108]	; (80009f4 <MX_TIM2_Init+0x94>)
 8000986:	2247      	movs	r2, #71	; 0x47
 8000988:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098a:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <MX_TIM2_Init+0x94>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000990:	4b18      	ldr	r3, [pc, #96]	; (80009f4 <MX_TIM2_Init+0x94>)
 8000992:	f242 720f 	movw	r2, #9999	; 0x270f
 8000996:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000998:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <MX_TIM2_Init+0x94>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099e:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <MX_TIM2_Init+0x94>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009a4:	4813      	ldr	r0, [pc, #76]	; (80009f4 <MX_TIM2_Init+0x94>)
 80009a6:	f001 fc7b 	bl	80022a0 <HAL_TIM_Base_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80009b0:	f000 f8b4 	bl	8000b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009ba:	f107 0308 	add.w	r3, r7, #8
 80009be:	4619      	mov	r1, r3
 80009c0:	480c      	ldr	r0, [pc, #48]	; (80009f4 <MX_TIM2_Init+0x94>)
 80009c2:	f001 ffc7 	bl	8002954 <HAL_TIM_ConfigClockSource>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80009cc:	f000 f8a6 	bl	8000b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d0:	2300      	movs	r3, #0
 80009d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009d8:	463b      	mov	r3, r7
 80009da:	4619      	mov	r1, r3
 80009dc:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_TIM2_Init+0x94>)
 80009de:	f002 fb39 	bl	8003054 <HAL_TIMEx_MasterConfigSynchronization>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80009e8:	f000 f898 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	3718      	adds	r7, #24
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	2000012c 	.word	0x2000012c

080009f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 80009fe:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <MX_USART2_UART_Init+0x50>)
 8000a00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a1e:	220c      	movs	r2, #12
 8000a20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_USART2_UART_Init+0x4c>)
 8000a30:	f002 fbd1 	bl	80031d6 <HAL_UART_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a3a:	f000 f86f 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000174 	.word	0x20000174
 8000a48:	40004400 	.word	0x40004400

08000a4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a52:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <MX_DMA_Init+0x38>)
 8000a54:	695b      	ldr	r3, [r3, #20]
 8000a56:	4a0b      	ldr	r2, [pc, #44]	; (8000a84 <MX_DMA_Init+0x38>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6153      	str	r3, [r2, #20]
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <MX_DMA_Init+0x38>)
 8000a60:	695b      	ldr	r3, [r3, #20]
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2010      	movs	r0, #16
 8000a70:	f000 fb49 	bl	8001106 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000a74:	2010      	movs	r0, #16
 8000a76:	f000 fb62 	bl	800113e <HAL_NVIC_EnableIRQ>

}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40021000 	.word	0x40021000

08000a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 0310 	add.w	r3, r7, #16
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a9c:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <MX_GPIO_Init+0x8c>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	4a1c      	ldr	r2, [pc, #112]	; (8000b14 <MX_GPIO_Init+0x8c>)
 8000aa2:	f043 0320 	orr.w	r3, r3, #32
 8000aa6:	6193      	str	r3, [r2, #24]
 8000aa8:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <MX_GPIO_Init+0x8c>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	f003 0320 	and.w	r3, r3, #32
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab4:	4b17      	ldr	r3, [pc, #92]	; (8000b14 <MX_GPIO_Init+0x8c>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a16      	ldr	r2, [pc, #88]	; (8000b14 <MX_GPIO_Init+0x8c>)
 8000aba:	f043 0304 	orr.w	r3, r3, #4
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <MX_GPIO_Init+0x8c>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f003 0304 	and.w	r3, r3, #4
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <MX_GPIO_Init+0x8c>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a10      	ldr	r2, [pc, #64]	; (8000b14 <MX_GPIO_Init+0x8c>)
 8000ad2:	f043 0308 	orr.w	r3, r3, #8
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <MX_GPIO_Init+0x8c>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f003 0308 	and.w	r3, r3, #8
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	213c      	movs	r1, #60	; 0x3c
 8000ae8:	480b      	ldr	r0, [pc, #44]	; (8000b18 <MX_GPIO_Init+0x90>)
 8000aea:	f000 ff3b 	bl	8001964 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB2 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000aee:	233c      	movs	r3, #60	; 0x3c
 8000af0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2302      	movs	r3, #2
 8000afc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afe:	f107 0310 	add.w	r3, r7, #16
 8000b02:	4619      	mov	r1, r3
 8000b04:	4804      	ldr	r0, [pc, #16]	; (8000b18 <MX_GPIO_Init+0x90>)
 8000b06:	f000 fdd3 	bl	80016b0 <HAL_GPIO_Init>

}
 8000b0a:	bf00      	nop
 8000b0c:	3720      	adds	r7, #32
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40010c00 	.word	0x40010c00

08000b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b20:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <Error_Handler+0x6>

08000b24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <HAL_MspInit+0x5c>)
 8000b2c:	699b      	ldr	r3, [r3, #24]
 8000b2e:	4a14      	ldr	r2, [pc, #80]	; (8000b80 <HAL_MspInit+0x5c>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6193      	str	r3, [r2, #24]
 8000b36:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_MspInit+0x5c>)
 8000b38:	699b      	ldr	r3, [r3, #24]
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b42:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <HAL_MspInit+0x5c>)
 8000b44:	69db      	ldr	r3, [r3, #28]
 8000b46:	4a0e      	ldr	r2, [pc, #56]	; (8000b80 <HAL_MspInit+0x5c>)
 8000b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	61d3      	str	r3, [r2, #28]
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <HAL_MspInit+0x5c>)
 8000b50:	69db      	ldr	r3, [r3, #28]
 8000b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <HAL_MspInit+0x60>)
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <HAL_MspInit+0x60>)
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b76:	bf00      	nop
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr
 8000b80:	40021000 	.word	0x40021000
 8000b84:	40010000 	.word	0x40010000

08000b88 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a09      	ldr	r2, [pc, #36]	; (8000bbc <HAL_TIM_PWM_MspInit+0x34>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d10b      	bne.n	8000bb2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b9a:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <HAL_TIM_PWM_MspInit+0x38>)
 8000b9c:	699b      	ldr	r3, [r3, #24]
 8000b9e:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <HAL_TIM_PWM_MspInit+0x38>)
 8000ba0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ba4:	6193      	str	r3, [r2, #24]
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_TIM_PWM_MspInit+0x38>)
 8000ba8:	699b      	ldr	r3, [r3, #24]
 8000baa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000bb2:	bf00      	nop
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	40012c00 	.word	0x40012c00
 8000bc0:	40021000 	.word	0x40021000

08000bc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bd4:	d113      	bne.n	8000bfe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <HAL_TIM_Base_MspInit+0x44>)
 8000bd8:	69db      	ldr	r3, [r3, #28]
 8000bda:	4a0b      	ldr	r2, [pc, #44]	; (8000c08 <HAL_TIM_Base_MspInit+0x44>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	61d3      	str	r3, [r2, #28]
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <HAL_TIM_Base_MspInit+0x44>)
 8000be4:	69db      	ldr	r3, [r3, #28]
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	201c      	movs	r0, #28
 8000bf4:	f000 fa87 	bl	8001106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bf8:	201c      	movs	r0, #28
 8000bfa:	f000 faa0 	bl	800113e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bfe:	bf00      	nop
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40021000 	.word	0x40021000

08000c0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b088      	sub	sp, #32
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 0310 	add.w	r3, r7, #16
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a10      	ldr	r2, [pc, #64]	; (8000c68 <HAL_TIM_MspPostInit+0x5c>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d118      	bne.n	8000c5e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <HAL_TIM_MspPostInit+0x60>)
 8000c2e:	699b      	ldr	r3, [r3, #24]
 8000c30:	4a0e      	ldr	r2, [pc, #56]	; (8000c6c <HAL_TIM_MspPostInit+0x60>)
 8000c32:	f043 0304 	orr.w	r3, r3, #4
 8000c36:	6193      	str	r3, [r2, #24]
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <HAL_TIM_MspPostInit+0x60>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	60fb      	str	r3, [r7, #12]
 8000c42:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000c44:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000c48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c52:	f107 0310 	add.w	r3, r7, #16
 8000c56:	4619      	mov	r1, r3
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <HAL_TIM_MspPostInit+0x64>)
 8000c5a:	f000 fd29 	bl	80016b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c5e:	bf00      	nop
 8000c60:	3720      	adds	r7, #32
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40012c00 	.word	0x40012c00
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	40010800 	.word	0x40010800

08000c74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b088      	sub	sp, #32
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 0310 	add.w	r3, r7, #16
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a32      	ldr	r2, [pc, #200]	; (8000d58 <HAL_UART_MspInit+0xe4>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d15d      	bne.n	8000d50 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c94:	4b31      	ldr	r3, [pc, #196]	; (8000d5c <HAL_UART_MspInit+0xe8>)
 8000c96:	69db      	ldr	r3, [r3, #28]
 8000c98:	4a30      	ldr	r2, [pc, #192]	; (8000d5c <HAL_UART_MspInit+0xe8>)
 8000c9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9e:	61d3      	str	r3, [r2, #28]
 8000ca0:	4b2e      	ldr	r3, [pc, #184]	; (8000d5c <HAL_UART_MspInit+0xe8>)
 8000ca2:	69db      	ldr	r3, [r3, #28]
 8000ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cac:	4b2b      	ldr	r3, [pc, #172]	; (8000d5c <HAL_UART_MspInit+0xe8>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	4a2a      	ldr	r2, [pc, #168]	; (8000d5c <HAL_UART_MspInit+0xe8>)
 8000cb2:	f043 0304 	orr.w	r3, r3, #4
 8000cb6:	6193      	str	r3, [r2, #24]
 8000cb8:	4b28      	ldr	r3, [pc, #160]	; (8000d5c <HAL_UART_MspInit+0xe8>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	f003 0304 	and.w	r3, r3, #4
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd0:	f107 0310 	add.w	r3, r7, #16
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4822      	ldr	r0, [pc, #136]	; (8000d60 <HAL_UART_MspInit+0xec>)
 8000cd8:	f000 fcea 	bl	80016b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cdc:	2308      	movs	r3, #8
 8000cde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce8:	f107 0310 	add.w	r3, r7, #16
 8000cec:	4619      	mov	r1, r3
 8000cee:	481c      	ldr	r0, [pc, #112]	; (8000d60 <HAL_UART_MspInit+0xec>)
 8000cf0:	f000 fcde 	bl	80016b0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000cf4:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <HAL_UART_MspInit+0xf0>)
 8000cf6:	4a1c      	ldr	r2, [pc, #112]	; (8000d68 <HAL_UART_MspInit+0xf4>)
 8000cf8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cfa:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <HAL_UART_MspInit+0xf0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d00:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <HAL_UART_MspInit+0xf0>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d06:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <HAL_UART_MspInit+0xf0>)
 8000d08:	2280      	movs	r2, #128	; 0x80
 8000d0a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d0c:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <HAL_UART_MspInit+0xf0>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d12:	4b14      	ldr	r3, [pc, #80]	; (8000d64 <HAL_UART_MspInit+0xf0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <HAL_UART_MspInit+0xf0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <HAL_UART_MspInit+0xf0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000d24:	480f      	ldr	r0, [pc, #60]	; (8000d64 <HAL_UART_MspInit+0xf0>)
 8000d26:	f000 fa25 	bl	8001174 <HAL_DMA_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8000d30:	f7ff fef4 	bl	8000b1c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a0b      	ldr	r2, [pc, #44]	; (8000d64 <HAL_UART_MspInit+0xf0>)
 8000d38:	639a      	str	r2, [r3, #56]	; 0x38
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <HAL_UART_MspInit+0xf0>)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2100      	movs	r1, #0
 8000d44:	2026      	movs	r0, #38	; 0x26
 8000d46:	f000 f9de 	bl	8001106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d4a:	2026      	movs	r0, #38	; 0x26
 8000d4c:	f000 f9f7 	bl	800113e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d50:	bf00      	nop
 8000d52:	3720      	adds	r7, #32
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40004400 	.word	0x40004400
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	40010800 	.word	0x40010800
 8000d64:	20000048 	.word	0x20000048
 8000d68:	4002006c 	.word	0x4002006c

08000d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <NMI_Handler+0x4>

08000d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <HardFault_Handler+0x4>

08000d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <MemManage_Handler+0x4>

08000d7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <BusFault_Handler+0x4>

08000d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <UsageFault_Handler+0x4>

08000d8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr

08000d96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc80      	pop	{r7}
 8000da0:	4770      	bx	lr

08000da2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr

08000dae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db2:	f000 f893 	bl	8000edc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000dc0:	4802      	ldr	r0, [pc, #8]	; (8000dcc <DMA1_Channel6_IRQHandler+0x10>)
 8000dc2:	f000 fb41 	bl	8001448 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000048 	.word	0x20000048

08000dd0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000dd4:	4802      	ldr	r0, [pc, #8]	; (8000de0 <TIM2_IRQHandler+0x10>)
 8000dd6:	f001 fbf7 	bl	80025c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	2000012c 	.word	0x2000012c

08000de4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000de8:	4802      	ldr	r0, [pc, #8]	; (8000df4 <USART2_IRQHandler+0x10>)
 8000dea:	f002 fb23 	bl	8003434 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000174 	.word	0x20000174

08000df8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bc80      	pop	{r7}
 8000e02:	4770      	bx	lr

08000e04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e04:	480c      	ldr	r0, [pc, #48]	; (8000e38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e06:	490d      	ldr	r1, [pc, #52]	; (8000e3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e08:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e0c:	e002      	b.n	8000e14 <LoopCopyDataInit>

08000e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e12:	3304      	adds	r3, #4

08000e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e18:	d3f9      	bcc.n	8000e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e1c:	4c0a      	ldr	r4, [pc, #40]	; (8000e48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e20:	e001      	b.n	8000e26 <LoopFillZerobss>

08000e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e24:	3204      	adds	r2, #4

08000e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e28:	d3fb      	bcc.n	8000e22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e2a:	f7ff ffe5 	bl	8000df8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e2e:	f003 f823 	bl	8003e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e32:	f7ff fc1b 	bl	800066c <main>
  bx lr
 8000e36:	4770      	bx	lr
  ldr r0, =_sdata
 8000e38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e3c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e40:	08003f1c 	.word	0x08003f1c
  ldr r2, =_sbss
 8000e44:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e48:	200001d8 	.word	0x200001d8

08000e4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e4c:	e7fe      	b.n	8000e4c <ADC1_2_IRQHandler>
	...

08000e50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <HAL_Init+0x28>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a07      	ldr	r2, [pc, #28]	; (8000e78 <HAL_Init+0x28>)
 8000e5a:	f043 0310 	orr.w	r3, r3, #16
 8000e5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e60:	2003      	movs	r0, #3
 8000e62:	f000 f945 	bl	80010f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e66:	2000      	movs	r0, #0
 8000e68:	f000 f808 	bl	8000e7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e6c:	f7ff fe5a 	bl	8000b24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40022000 	.word	0x40022000

08000e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_InitTick+0x54>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_InitTick+0x58>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f95d 	bl	800115a <HAL_SYSTICK_Config>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e00e      	b.n	8000ec8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b0f      	cmp	r3, #15
 8000eae:	d80a      	bhi.n	8000ec6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb8:	f000 f925 	bl	8001106 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ebc:	4a06      	ldr	r2, [pc, #24]	; (8000ed8 <HAL_InitTick+0x5c>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e000      	b.n	8000ec8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000000 	.word	0x20000000
 8000ed4:	20000008 	.word	0x20000008
 8000ed8:	20000004 	.word	0x20000004

08000edc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <HAL_IncTick+0x1c>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b05      	ldr	r3, [pc, #20]	; (8000efc <HAL_IncTick+0x20>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4413      	add	r3, r2
 8000eec:	4a03      	ldr	r2, [pc, #12]	; (8000efc <HAL_IncTick+0x20>)
 8000eee:	6013      	str	r3, [r2, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	200001d4 	.word	0x200001d4

08000f00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return uwTick;
 8000f04:	4b02      	ldr	r3, [pc, #8]	; (8000f10 <HAL_GetTick+0x10>)
 8000f06:	681b      	ldr	r3, [r3, #0]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	200001d4 	.word	0x200001d4

08000f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f1c:	f7ff fff0 	bl	8000f00 <HAL_GetTick>
 8000f20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f2c:	d005      	beq.n	8000f3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <HAL_Delay+0x40>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	461a      	mov	r2, r3
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4413      	add	r3, r2
 8000f38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f3a:	bf00      	nop
 8000f3c:	f7ff ffe0 	bl	8000f00 <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d8f7      	bhi.n	8000f3c <HAL_Delay+0x28>
  {
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000008 	.word	0x20000008

08000f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f74:	4013      	ands	r3, r2
 8000f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8a:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	60d3      	str	r3, [r2, #12]
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	f003 0307 	and.w	r3, r3, #7
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	db0b      	blt.n	8000fe6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	f003 021f 	and.w	r2, r3, #31
 8000fd4:	4906      	ldr	r1, [pc, #24]	; (8000ff0 <__NVIC_EnableIRQ+0x34>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	095b      	lsrs	r3, r3, #5
 8000fdc:	2001      	movs	r0, #1
 8000fde:	fa00 f202 	lsl.w	r2, r0, r2
 8000fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr
 8000ff0:	e000e100 	.word	0xe000e100

08000ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	6039      	str	r1, [r7, #0]
 8000ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001004:	2b00      	cmp	r3, #0
 8001006:	db0a      	blt.n	800101e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	b2da      	uxtb	r2, r3
 800100c:	490c      	ldr	r1, [pc, #48]	; (8001040 <__NVIC_SetPriority+0x4c>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	0112      	lsls	r2, r2, #4
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	440b      	add	r3, r1
 8001018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800101c:	e00a      	b.n	8001034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	b2da      	uxtb	r2, r3
 8001022:	4908      	ldr	r1, [pc, #32]	; (8001044 <__NVIC_SetPriority+0x50>)
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	f003 030f 	and.w	r3, r3, #15
 800102a:	3b04      	subs	r3, #4
 800102c:	0112      	lsls	r2, r2, #4
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	440b      	add	r3, r1
 8001032:	761a      	strb	r2, [r3, #24]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000e100 	.word	0xe000e100
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001048:	b480      	push	{r7}
 800104a:	b089      	sub	sp, #36	; 0x24
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	f1c3 0307 	rsb	r3, r3, #7
 8001062:	2b04      	cmp	r3, #4
 8001064:	bf28      	it	cs
 8001066:	2304      	movcs	r3, #4
 8001068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3304      	adds	r3, #4
 800106e:	2b06      	cmp	r3, #6
 8001070:	d902      	bls.n	8001078 <NVIC_EncodePriority+0x30>
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3b03      	subs	r3, #3
 8001076:	e000      	b.n	800107a <NVIC_EncodePriority+0x32>
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	f04f 32ff 	mov.w	r2, #4294967295
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43da      	mvns	r2, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	401a      	ands	r2, r3
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001090:	f04f 31ff 	mov.w	r1, #4294967295
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	fa01 f303 	lsl.w	r3, r1, r3
 800109a:	43d9      	mvns	r1, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	4313      	orrs	r3, r2
         );
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3724      	adds	r7, #36	; 0x24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr

080010ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010bc:	d301      	bcc.n	80010c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010be:	2301      	movs	r3, #1
 80010c0:	e00f      	b.n	80010e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c2:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <SysTick_Config+0x40>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ca:	210f      	movs	r1, #15
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f7ff ff90 	bl	8000ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <SysTick_Config+0x40>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <SysTick_Config+0x40>)
 80010dc:	2207      	movs	r2, #7
 80010de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	e000e010 	.word	0xe000e010

080010f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff2d 	bl	8000f58 <__NVIC_SetPriorityGrouping>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001106:	b580      	push	{r7, lr}
 8001108:	b086      	sub	sp, #24
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
 8001112:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001118:	f7ff ff42 	bl	8000fa0 <__NVIC_GetPriorityGrouping>
 800111c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	68b9      	ldr	r1, [r7, #8]
 8001122:	6978      	ldr	r0, [r7, #20]
 8001124:	f7ff ff90 	bl	8001048 <NVIC_EncodePriority>
 8001128:	4602      	mov	r2, r0
 800112a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112e:	4611      	mov	r1, r2
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff5f 	bl	8000ff4 <__NVIC_SetPriority>
}
 8001136:	bf00      	nop
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	4603      	mov	r3, r0
 8001146:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff35 	bl	8000fbc <__NVIC_EnableIRQ>
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff ffa2 	bl	80010ac <SysTick_Config>
 8001168:	4603      	mov	r3, r0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e043      	b.n	8001212 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	461a      	mov	r2, r3
 8001190:	4b22      	ldr	r3, [pc, #136]	; (800121c <HAL_DMA_Init+0xa8>)
 8001192:	4413      	add	r3, r2
 8001194:	4a22      	ldr	r2, [pc, #136]	; (8001220 <HAL_DMA_Init+0xac>)
 8001196:	fba2 2303 	umull	r2, r3, r2, r3
 800119a:	091b      	lsrs	r3, r3, #4
 800119c:	009a      	lsls	r2, r3, #2
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a1f      	ldr	r2, [pc, #124]	; (8001224 <HAL_DMA_Init+0xb0>)
 80011a6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2202      	movs	r2, #2
 80011ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80011be:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80011c2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80011cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80011ec:	68fa      	ldr	r2, [r7, #12]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2201      	movs	r2, #1
 8001204:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr
 800121c:	bffdfff8 	.word	0xbffdfff8
 8001220:	cccccccd 	.word	0xcccccccd
 8001224:	40020000 	.word	0x40020000

08001228 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001236:	2300      	movs	r3, #0
 8001238:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d101      	bne.n	8001248 <HAL_DMA_Start_IT+0x20>
 8001244:	2302      	movs	r3, #2
 8001246:	e04a      	b.n	80012de <HAL_DMA_Start_IT+0xb6>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2201      	movs	r2, #1
 800124c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001256:	2b01      	cmp	r3, #1
 8001258:	d13a      	bne.n	80012d0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2202      	movs	r2, #2
 800125e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2200      	movs	r2, #0
 8001266:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 0201 	bic.w	r2, r2, #1
 8001276:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	68b9      	ldr	r1, [r7, #8]
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f000 f9e8 	bl	8001654 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001288:	2b00      	cmp	r3, #0
 800128a:	d008      	beq.n	800129e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f042 020e 	orr.w	r2, r2, #14
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	e00f      	b.n	80012be <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0204 	bic.w	r2, r2, #4
 80012ac:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f042 020a 	orr.w	r2, r2, #10
 80012bc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f042 0201 	orr.w	r2, r2, #1
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	e005      	b.n	80012dc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2200      	movs	r2, #0
 80012d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80012d8:	2302      	movs	r3, #2
 80012da:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80012dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3718      	adds	r7, #24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b085      	sub	sp, #20
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ee:	2300      	movs	r3, #0
 80012f0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d008      	beq.n	800130e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2204      	movs	r2, #4
 8001300:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2200      	movs	r2, #0
 8001306:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e020      	b.n	8001350 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f022 020e 	bic.w	r2, r2, #14
 800131c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 0201 	bic.w	r2, r2, #1
 800132c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001336:	2101      	movs	r1, #1
 8001338:	fa01 f202 	lsl.w	r2, r1, r2
 800133c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2201      	movs	r2, #1
 8001342:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800134e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	bc80      	pop	{r7}
 8001358:	4770      	bx	lr
	...

0800135c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001364:	2300      	movs	r3, #0
 8001366:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800136e:	2b02      	cmp	r3, #2
 8001370:	d005      	beq.n	800137e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2204      	movs	r2, #4
 8001376:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	73fb      	strb	r3, [r7, #15]
 800137c:	e051      	b.n	8001422 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f022 020e 	bic.w	r2, r2, #14
 800138c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f022 0201 	bic.w	r2, r2, #1
 800139c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a22      	ldr	r2, [pc, #136]	; (800142c <HAL_DMA_Abort_IT+0xd0>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d029      	beq.n	80013fc <HAL_DMA_Abort_IT+0xa0>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a20      	ldr	r2, [pc, #128]	; (8001430 <HAL_DMA_Abort_IT+0xd4>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d022      	beq.n	80013f8 <HAL_DMA_Abort_IT+0x9c>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a1f      	ldr	r2, [pc, #124]	; (8001434 <HAL_DMA_Abort_IT+0xd8>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d01a      	beq.n	80013f2 <HAL_DMA_Abort_IT+0x96>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a1d      	ldr	r2, [pc, #116]	; (8001438 <HAL_DMA_Abort_IT+0xdc>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d012      	beq.n	80013ec <HAL_DMA_Abort_IT+0x90>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a1c      	ldr	r2, [pc, #112]	; (800143c <HAL_DMA_Abort_IT+0xe0>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d00a      	beq.n	80013e6 <HAL_DMA_Abort_IT+0x8a>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a1a      	ldr	r2, [pc, #104]	; (8001440 <HAL_DMA_Abort_IT+0xe4>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d102      	bne.n	80013e0 <HAL_DMA_Abort_IT+0x84>
 80013da:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013de:	e00e      	b.n	80013fe <HAL_DMA_Abort_IT+0xa2>
 80013e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013e4:	e00b      	b.n	80013fe <HAL_DMA_Abort_IT+0xa2>
 80013e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013ea:	e008      	b.n	80013fe <HAL_DMA_Abort_IT+0xa2>
 80013ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f0:	e005      	b.n	80013fe <HAL_DMA_Abort_IT+0xa2>
 80013f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013f6:	e002      	b.n	80013fe <HAL_DMA_Abort_IT+0xa2>
 80013f8:	2310      	movs	r3, #16
 80013fa:	e000      	b.n	80013fe <HAL_DMA_Abort_IT+0xa2>
 80013fc:	2301      	movs	r3, #1
 80013fe:	4a11      	ldr	r2, [pc, #68]	; (8001444 <HAL_DMA_Abort_IT+0xe8>)
 8001400:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2201      	movs	r2, #1
 8001406:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	4798      	blx	r3
    } 
  }
  return status;
 8001422:	7bfb      	ldrb	r3, [r7, #15]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40020008 	.word	0x40020008
 8001430:	4002001c 	.word	0x4002001c
 8001434:	40020030 	.word	0x40020030
 8001438:	40020044 	.word	0x40020044
 800143c:	40020058 	.word	0x40020058
 8001440:	4002006c 	.word	0x4002006c
 8001444:	40020000 	.word	0x40020000

08001448 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	2204      	movs	r2, #4
 8001466:	409a      	lsls	r2, r3
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	4013      	ands	r3, r2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d04f      	beq.n	8001510 <HAL_DMA_IRQHandler+0xc8>
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	2b00      	cmp	r3, #0
 8001478:	d04a      	beq.n	8001510 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0320 	and.w	r3, r3, #32
 8001484:	2b00      	cmp	r3, #0
 8001486:	d107      	bne.n	8001498 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 0204 	bic.w	r2, r2, #4
 8001496:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a66      	ldr	r2, [pc, #408]	; (8001638 <HAL_DMA_IRQHandler+0x1f0>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d029      	beq.n	80014f6 <HAL_DMA_IRQHandler+0xae>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a65      	ldr	r2, [pc, #404]	; (800163c <HAL_DMA_IRQHandler+0x1f4>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d022      	beq.n	80014f2 <HAL_DMA_IRQHandler+0xaa>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a63      	ldr	r2, [pc, #396]	; (8001640 <HAL_DMA_IRQHandler+0x1f8>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d01a      	beq.n	80014ec <HAL_DMA_IRQHandler+0xa4>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a62      	ldr	r2, [pc, #392]	; (8001644 <HAL_DMA_IRQHandler+0x1fc>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d012      	beq.n	80014e6 <HAL_DMA_IRQHandler+0x9e>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a60      	ldr	r2, [pc, #384]	; (8001648 <HAL_DMA_IRQHandler+0x200>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d00a      	beq.n	80014e0 <HAL_DMA_IRQHandler+0x98>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a5f      	ldr	r2, [pc, #380]	; (800164c <HAL_DMA_IRQHandler+0x204>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d102      	bne.n	80014da <HAL_DMA_IRQHandler+0x92>
 80014d4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014d8:	e00e      	b.n	80014f8 <HAL_DMA_IRQHandler+0xb0>
 80014da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80014de:	e00b      	b.n	80014f8 <HAL_DMA_IRQHandler+0xb0>
 80014e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80014e4:	e008      	b.n	80014f8 <HAL_DMA_IRQHandler+0xb0>
 80014e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014ea:	e005      	b.n	80014f8 <HAL_DMA_IRQHandler+0xb0>
 80014ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014f0:	e002      	b.n	80014f8 <HAL_DMA_IRQHandler+0xb0>
 80014f2:	2340      	movs	r3, #64	; 0x40
 80014f4:	e000      	b.n	80014f8 <HAL_DMA_IRQHandler+0xb0>
 80014f6:	2304      	movs	r3, #4
 80014f8:	4a55      	ldr	r2, [pc, #340]	; (8001650 <HAL_DMA_IRQHandler+0x208>)
 80014fa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001500:	2b00      	cmp	r3, #0
 8001502:	f000 8094 	beq.w	800162e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800150e:	e08e      	b.n	800162e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001514:	2202      	movs	r2, #2
 8001516:	409a      	lsls	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4013      	ands	r3, r2
 800151c:	2b00      	cmp	r3, #0
 800151e:	d056      	beq.n	80015ce <HAL_DMA_IRQHandler+0x186>
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d051      	beq.n	80015ce <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 0320 	and.w	r3, r3, #32
 8001534:	2b00      	cmp	r3, #0
 8001536:	d10b      	bne.n	8001550 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 020a 	bic.w	r2, r2, #10
 8001546:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a38      	ldr	r2, [pc, #224]	; (8001638 <HAL_DMA_IRQHandler+0x1f0>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d029      	beq.n	80015ae <HAL_DMA_IRQHandler+0x166>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a37      	ldr	r2, [pc, #220]	; (800163c <HAL_DMA_IRQHandler+0x1f4>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d022      	beq.n	80015aa <HAL_DMA_IRQHandler+0x162>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a35      	ldr	r2, [pc, #212]	; (8001640 <HAL_DMA_IRQHandler+0x1f8>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d01a      	beq.n	80015a4 <HAL_DMA_IRQHandler+0x15c>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a34      	ldr	r2, [pc, #208]	; (8001644 <HAL_DMA_IRQHandler+0x1fc>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d012      	beq.n	800159e <HAL_DMA_IRQHandler+0x156>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a32      	ldr	r2, [pc, #200]	; (8001648 <HAL_DMA_IRQHandler+0x200>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d00a      	beq.n	8001598 <HAL_DMA_IRQHandler+0x150>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a31      	ldr	r2, [pc, #196]	; (800164c <HAL_DMA_IRQHandler+0x204>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d102      	bne.n	8001592 <HAL_DMA_IRQHandler+0x14a>
 800158c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001590:	e00e      	b.n	80015b0 <HAL_DMA_IRQHandler+0x168>
 8001592:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001596:	e00b      	b.n	80015b0 <HAL_DMA_IRQHandler+0x168>
 8001598:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800159c:	e008      	b.n	80015b0 <HAL_DMA_IRQHandler+0x168>
 800159e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015a2:	e005      	b.n	80015b0 <HAL_DMA_IRQHandler+0x168>
 80015a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015a8:	e002      	b.n	80015b0 <HAL_DMA_IRQHandler+0x168>
 80015aa:	2320      	movs	r3, #32
 80015ac:	e000      	b.n	80015b0 <HAL_DMA_IRQHandler+0x168>
 80015ae:	2302      	movs	r3, #2
 80015b0:	4a27      	ldr	r2, [pc, #156]	; (8001650 <HAL_DMA_IRQHandler+0x208>)
 80015b2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d034      	beq.n	800162e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80015cc:	e02f      	b.n	800162e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	2208      	movs	r2, #8
 80015d4:	409a      	lsls	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	4013      	ands	r3, r2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d028      	beq.n	8001630 <HAL_DMA_IRQHandler+0x1e8>
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	f003 0308 	and.w	r3, r3, #8
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d023      	beq.n	8001630 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 020e 	bic.w	r2, r2, #14
 80015f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001600:	2101      	movs	r1, #1
 8001602:	fa01 f202 	lsl.w	r2, r1, r2
 8001606:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	2b00      	cmp	r3, #0
 8001624:	d004      	beq.n	8001630 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	4798      	blx	r3
    }
  }
  return;
 800162e:	bf00      	nop
 8001630:	bf00      	nop
}
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40020008 	.word	0x40020008
 800163c:	4002001c 	.word	0x4002001c
 8001640:	40020030 	.word	0x40020030
 8001644:	40020044 	.word	0x40020044
 8001648:	40020058 	.word	0x40020058
 800164c:	4002006c 	.word	0x4002006c
 8001650:	40020000 	.word	0x40020000

08001654 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
 8001660:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800166a:	2101      	movs	r1, #1
 800166c:	fa01 f202 	lsl.w	r2, r1, r2
 8001670:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2b10      	cmp	r3, #16
 8001680:	d108      	bne.n	8001694 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001692:	e007      	b.n	80016a4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	68ba      	ldr	r2, [r7, #8]
 800169a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	60da      	str	r2, [r3, #12]
}
 80016a4:	bf00      	nop
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bc80      	pop	{r7}
 80016ac:	4770      	bx	lr
	...

080016b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b08b      	sub	sp, #44	; 0x2c
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ba:	2300      	movs	r3, #0
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016be:	2300      	movs	r3, #0
 80016c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c2:	e127      	b.n	8001914 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016c4:	2201      	movs	r2, #1
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	69fa      	ldr	r2, [r7, #28]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	429a      	cmp	r2, r3
 80016de:	f040 8116 	bne.w	800190e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b12      	cmp	r3, #18
 80016e8:	d034      	beq.n	8001754 <HAL_GPIO_Init+0xa4>
 80016ea:	2b12      	cmp	r3, #18
 80016ec:	d80d      	bhi.n	800170a <HAL_GPIO_Init+0x5a>
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d02b      	beq.n	800174a <HAL_GPIO_Init+0x9a>
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d804      	bhi.n	8001700 <HAL_GPIO_Init+0x50>
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d031      	beq.n	800175e <HAL_GPIO_Init+0xae>
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d01c      	beq.n	8001738 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016fe:	e048      	b.n	8001792 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001700:	2b03      	cmp	r3, #3
 8001702:	d043      	beq.n	800178c <HAL_GPIO_Init+0xdc>
 8001704:	2b11      	cmp	r3, #17
 8001706:	d01b      	beq.n	8001740 <HAL_GPIO_Init+0x90>
          break;
 8001708:	e043      	b.n	8001792 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800170a:	4a89      	ldr	r2, [pc, #548]	; (8001930 <HAL_GPIO_Init+0x280>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d026      	beq.n	800175e <HAL_GPIO_Init+0xae>
 8001710:	4a87      	ldr	r2, [pc, #540]	; (8001930 <HAL_GPIO_Init+0x280>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d806      	bhi.n	8001724 <HAL_GPIO_Init+0x74>
 8001716:	4a87      	ldr	r2, [pc, #540]	; (8001934 <HAL_GPIO_Init+0x284>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d020      	beq.n	800175e <HAL_GPIO_Init+0xae>
 800171c:	4a86      	ldr	r2, [pc, #536]	; (8001938 <HAL_GPIO_Init+0x288>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d01d      	beq.n	800175e <HAL_GPIO_Init+0xae>
          break;
 8001722:	e036      	b.n	8001792 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001724:	4a85      	ldr	r2, [pc, #532]	; (800193c <HAL_GPIO_Init+0x28c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d019      	beq.n	800175e <HAL_GPIO_Init+0xae>
 800172a:	4a85      	ldr	r2, [pc, #532]	; (8001940 <HAL_GPIO_Init+0x290>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d016      	beq.n	800175e <HAL_GPIO_Init+0xae>
 8001730:	4a84      	ldr	r2, [pc, #528]	; (8001944 <HAL_GPIO_Init+0x294>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d013      	beq.n	800175e <HAL_GPIO_Init+0xae>
          break;
 8001736:	e02c      	b.n	8001792 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	623b      	str	r3, [r7, #32]
          break;
 800173e:	e028      	b.n	8001792 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	3304      	adds	r3, #4
 8001746:	623b      	str	r3, [r7, #32]
          break;
 8001748:	e023      	b.n	8001792 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	3308      	adds	r3, #8
 8001750:	623b      	str	r3, [r7, #32]
          break;
 8001752:	e01e      	b.n	8001792 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	330c      	adds	r3, #12
 800175a:	623b      	str	r3, [r7, #32]
          break;
 800175c:	e019      	b.n	8001792 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d102      	bne.n	800176c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001766:	2304      	movs	r3, #4
 8001768:	623b      	str	r3, [r7, #32]
          break;
 800176a:	e012      	b.n	8001792 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d105      	bne.n	8001780 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001774:	2308      	movs	r3, #8
 8001776:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69fa      	ldr	r2, [r7, #28]
 800177c:	611a      	str	r2, [r3, #16]
          break;
 800177e:	e008      	b.n	8001792 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001780:	2308      	movs	r3, #8
 8001782:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69fa      	ldr	r2, [r7, #28]
 8001788:	615a      	str	r2, [r3, #20]
          break;
 800178a:	e002      	b.n	8001792 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800178c:	2300      	movs	r3, #0
 800178e:	623b      	str	r3, [r7, #32]
          break;
 8001790:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	2bff      	cmp	r3, #255	; 0xff
 8001796:	d801      	bhi.n	800179c <HAL_GPIO_Init+0xec>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	e001      	b.n	80017a0 <HAL_GPIO_Init+0xf0>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	3304      	adds	r3, #4
 80017a0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	2bff      	cmp	r3, #255	; 0xff
 80017a6:	d802      	bhi.n	80017ae <HAL_GPIO_Init+0xfe>
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	e002      	b.n	80017b4 <HAL_GPIO_Init+0x104>
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	3b08      	subs	r3, #8
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	210f      	movs	r1, #15
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	fa01 f303 	lsl.w	r3, r1, r3
 80017c2:	43db      	mvns	r3, r3
 80017c4:	401a      	ands	r2, r3
 80017c6:	6a39      	ldr	r1, [r7, #32]
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	fa01 f303 	lsl.w	r3, r1, r3
 80017ce:	431a      	orrs	r2, r3
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 8096 	beq.w	800190e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017e2:	4b59      	ldr	r3, [pc, #356]	; (8001948 <HAL_GPIO_Init+0x298>)
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	4a58      	ldr	r2, [pc, #352]	; (8001948 <HAL_GPIO_Init+0x298>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6193      	str	r3, [r2, #24]
 80017ee:	4b56      	ldr	r3, [pc, #344]	; (8001948 <HAL_GPIO_Init+0x298>)
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017fa:	4a54      	ldr	r2, [pc, #336]	; (800194c <HAL_GPIO_Init+0x29c>)
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	089b      	lsrs	r3, r3, #2
 8001800:	3302      	adds	r3, #2
 8001802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001806:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180a:	f003 0303 	and.w	r3, r3, #3
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	220f      	movs	r2, #15
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	4013      	ands	r3, r2
 800181c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a4b      	ldr	r2, [pc, #300]	; (8001950 <HAL_GPIO_Init+0x2a0>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d013      	beq.n	800184e <HAL_GPIO_Init+0x19e>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a4a      	ldr	r2, [pc, #296]	; (8001954 <HAL_GPIO_Init+0x2a4>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d00d      	beq.n	800184a <HAL_GPIO_Init+0x19a>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a49      	ldr	r2, [pc, #292]	; (8001958 <HAL_GPIO_Init+0x2a8>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d007      	beq.n	8001846 <HAL_GPIO_Init+0x196>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a48      	ldr	r2, [pc, #288]	; (800195c <HAL_GPIO_Init+0x2ac>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d101      	bne.n	8001842 <HAL_GPIO_Init+0x192>
 800183e:	2303      	movs	r3, #3
 8001840:	e006      	b.n	8001850 <HAL_GPIO_Init+0x1a0>
 8001842:	2304      	movs	r3, #4
 8001844:	e004      	b.n	8001850 <HAL_GPIO_Init+0x1a0>
 8001846:	2302      	movs	r3, #2
 8001848:	e002      	b.n	8001850 <HAL_GPIO_Init+0x1a0>
 800184a:	2301      	movs	r3, #1
 800184c:	e000      	b.n	8001850 <HAL_GPIO_Init+0x1a0>
 800184e:	2300      	movs	r3, #0
 8001850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001852:	f002 0203 	and.w	r2, r2, #3
 8001856:	0092      	lsls	r2, r2, #2
 8001858:	4093      	lsls	r3, r2
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	4313      	orrs	r3, r2
 800185e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001860:	493a      	ldr	r1, [pc, #232]	; (800194c <HAL_GPIO_Init+0x29c>)
 8001862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001864:	089b      	lsrs	r3, r3, #2
 8001866:	3302      	adds	r3, #2
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d006      	beq.n	8001888 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800187a:	4b39      	ldr	r3, [pc, #228]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4938      	ldr	r1, [pc, #224]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	600b      	str	r3, [r1, #0]
 8001886:	e006      	b.n	8001896 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001888:	4b35      	ldr	r3, [pc, #212]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	43db      	mvns	r3, r3
 8001890:	4933      	ldr	r1, [pc, #204]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 8001892:	4013      	ands	r3, r2
 8001894:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d006      	beq.n	80018b0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018a2:	4b2f      	ldr	r3, [pc, #188]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	492e      	ldr	r1, [pc, #184]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	604b      	str	r3, [r1, #4]
 80018ae:	e006      	b.n	80018be <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018b0:	4b2b      	ldr	r3, [pc, #172]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	43db      	mvns	r3, r3
 80018b8:	4929      	ldr	r1, [pc, #164]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018ba:	4013      	ands	r3, r2
 80018bc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d006      	beq.n	80018d8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018ca:	4b25      	ldr	r3, [pc, #148]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	4924      	ldr	r1, [pc, #144]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	608b      	str	r3, [r1, #8]
 80018d6:	e006      	b.n	80018e6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018d8:	4b21      	ldr	r3, [pc, #132]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	43db      	mvns	r3, r3
 80018e0:	491f      	ldr	r1, [pc, #124]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018e2:	4013      	ands	r3, r2
 80018e4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d006      	beq.n	8001900 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018f2:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018f4:	68da      	ldr	r2, [r3, #12]
 80018f6:	491a      	ldr	r1, [pc, #104]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	60cb      	str	r3, [r1, #12]
 80018fe:	e006      	b.n	800190e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001900:	4b17      	ldr	r3, [pc, #92]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	43db      	mvns	r3, r3
 8001908:	4915      	ldr	r1, [pc, #84]	; (8001960 <HAL_GPIO_Init+0x2b0>)
 800190a:	4013      	ands	r3, r2
 800190c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	3301      	adds	r3, #1
 8001912:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191a:	fa22 f303 	lsr.w	r3, r2, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	f47f aed0 	bne.w	80016c4 <HAL_GPIO_Init+0x14>
  }
}
 8001924:	bf00      	nop
 8001926:	372c      	adds	r7, #44	; 0x2c
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	10210000 	.word	0x10210000
 8001934:	10110000 	.word	0x10110000
 8001938:	10120000 	.word	0x10120000
 800193c:	10310000 	.word	0x10310000
 8001940:	10320000 	.word	0x10320000
 8001944:	10220000 	.word	0x10220000
 8001948:	40021000 	.word	0x40021000
 800194c:	40010000 	.word	0x40010000
 8001950:	40010800 	.word	0x40010800
 8001954:	40010c00 	.word	0x40010c00
 8001958:	40011000 	.word	0x40011000
 800195c:	40011400 	.word	0x40011400
 8001960:	40010400 	.word	0x40010400

08001964 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	460b      	mov	r3, r1
 800196e:	807b      	strh	r3, [r7, #2]
 8001970:	4613      	mov	r3, r2
 8001972:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001974:	787b      	ldrb	r3, [r7, #1]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800197a:	887a      	ldrh	r2, [r7, #2]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001980:	e003      	b.n	800198a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001982:	887b      	ldrh	r3, [r7, #2]
 8001984:	041a      	lsls	r2, r3, #16
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	611a      	str	r2, [r3, #16]
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019a6:	887a      	ldrh	r2, [r7, #2]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4013      	ands	r3, r2
 80019ac:	041a      	lsls	r2, r3, #16
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	43d9      	mvns	r1, r3
 80019b2:	887b      	ldrh	r3, [r7, #2]
 80019b4:	400b      	ands	r3, r1
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	611a      	str	r2, [r3, #16]
}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr

080019c6 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b084      	sub	sp, #16
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e034      	b.n	8001a42 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80019e0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f245 5255 	movw	r2, #21845	; 0x5555
 80019ea:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6852      	ldr	r2, [r2, #4]
 80019f4:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6892      	ldr	r2, [r2, #8]
 80019fe:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8001a00:	f7ff fa7e 	bl	8000f00 <HAL_GetTick>
 8001a04:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001a06:	e00f      	b.n	8001a28 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8001a08:	f7ff fa7a 	bl	8000f00 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b27      	cmp	r3, #39	; 0x27
 8001a14:	d908      	bls.n	8001a28 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e00c      	b.n	8001a42 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1e8      	bne.n	8001a08 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001a3e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001a5a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr

08001a68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e26c      	b.n	8001f54 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 8087 	beq.w	8001b96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a88:	4b92      	ldr	r3, [pc, #584]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 030c 	and.w	r3, r3, #12
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	d00c      	beq.n	8001aae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a94:	4b8f      	ldr	r3, [pc, #572]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 030c 	and.w	r3, r3, #12
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d112      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x5e>
 8001aa0:	4b8c      	ldr	r3, [pc, #560]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aac:	d10b      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aae:	4b89      	ldr	r3, [pc, #548]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d06c      	beq.n	8001b94 <HAL_RCC_OscConfig+0x12c>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d168      	bne.n	8001b94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e246      	b.n	8001f54 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ace:	d106      	bne.n	8001ade <HAL_RCC_OscConfig+0x76>
 8001ad0:	4b80      	ldr	r3, [pc, #512]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a7f      	ldr	r2, [pc, #508]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	e02e      	b.n	8001b3c <HAL_RCC_OscConfig+0xd4>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10c      	bne.n	8001b00 <HAL_RCC_OscConfig+0x98>
 8001ae6:	4b7b      	ldr	r3, [pc, #492]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a7a      	ldr	r2, [pc, #488]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	4b78      	ldr	r3, [pc, #480]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a77      	ldr	r2, [pc, #476]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	e01d      	b.n	8001b3c <HAL_RCC_OscConfig+0xd4>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b08:	d10c      	bne.n	8001b24 <HAL_RCC_OscConfig+0xbc>
 8001b0a:	4b72      	ldr	r3, [pc, #456]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a71      	ldr	r2, [pc, #452]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	4b6f      	ldr	r3, [pc, #444]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a6e      	ldr	r2, [pc, #440]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	e00b      	b.n	8001b3c <HAL_RCC_OscConfig+0xd4>
 8001b24:	4b6b      	ldr	r3, [pc, #428]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a6a      	ldr	r2, [pc, #424]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	4b68      	ldr	r3, [pc, #416]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a67      	ldr	r2, [pc, #412]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d013      	beq.n	8001b6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b44:	f7ff f9dc 	bl	8000f00 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b4c:	f7ff f9d8 	bl	8000f00 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b64      	cmp	r3, #100	; 0x64
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e1fa      	b.n	8001f54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5e:	4b5d      	ldr	r3, [pc, #372]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0xe4>
 8001b6a:	e014      	b.n	8001b96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6c:	f7ff f9c8 	bl	8000f00 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b74:	f7ff f9c4 	bl	8000f00 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b64      	cmp	r3, #100	; 0x64
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e1e6      	b.n	8001f54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b86:	4b53      	ldr	r3, [pc, #332]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f0      	bne.n	8001b74 <HAL_RCC_OscConfig+0x10c>
 8001b92:	e000      	b.n	8001b96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d063      	beq.n	8001c6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ba2:	4b4c      	ldr	r3, [pc, #304]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00b      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bae:	4b49      	ldr	r3, [pc, #292]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d11c      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x18c>
 8001bba:	4b46      	ldr	r3, [pc, #280]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d116      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc6:	4b43      	ldr	r3, [pc, #268]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d005      	beq.n	8001bde <HAL_RCC_OscConfig+0x176>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d001      	beq.n	8001bde <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e1ba      	b.n	8001f54 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bde:	4b3d      	ldr	r3, [pc, #244]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	4939      	ldr	r1, [pc, #228]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf2:	e03a      	b.n	8001c6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d020      	beq.n	8001c3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bfc:	4b36      	ldr	r3, [pc, #216]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c02:	f7ff f97d 	bl	8000f00 <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0a:	f7ff f979 	bl	8000f00 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e19b      	b.n	8001f54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1c:	4b2d      	ldr	r3, [pc, #180]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0f0      	beq.n	8001c0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c28:	4b2a      	ldr	r3, [pc, #168]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	4927      	ldr	r1, [pc, #156]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	600b      	str	r3, [r1, #0]
 8001c3c:	e015      	b.n	8001c6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c3e:	4b26      	ldr	r3, [pc, #152]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c44:	f7ff f95c 	bl	8000f00 <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c4c:	f7ff f958 	bl	8000f00 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e17a      	b.n	8001f54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5e:	4b1d      	ldr	r3, [pc, #116]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f0      	bne.n	8001c4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d03a      	beq.n	8001cec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d019      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c7e:	4b17      	ldr	r3, [pc, #92]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c84:	f7ff f93c 	bl	8000f00 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c8c:	f7ff f938 	bl	8000f00 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e15a      	b.n	8001f54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f0      	beq.n	8001c8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001caa:	2001      	movs	r0, #1
 8001cac:	f000 fada 	bl	8002264 <RCC_Delay>
 8001cb0:	e01c      	b.n	8001cec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cb2:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb8:	f7ff f922 	bl	8000f00 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cbe:	e00f      	b.n	8001ce0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc0:	f7ff f91e 	bl	8000f00 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d908      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e140      	b.n	8001f54 <HAL_RCC_OscConfig+0x4ec>
 8001cd2:	bf00      	nop
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	42420000 	.word	0x42420000
 8001cdc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce0:	4b9e      	ldr	r3, [pc, #632]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1e9      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 80a6 	beq.w	8001e46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cfe:	4b97      	ldr	r3, [pc, #604]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10d      	bne.n	8001d26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	4b94      	ldr	r3, [pc, #592]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	4a93      	ldr	r2, [pc, #588]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d14:	61d3      	str	r3, [r2, #28]
 8001d16:	4b91      	ldr	r3, [pc, #580]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d22:	2301      	movs	r3, #1
 8001d24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d26:	4b8e      	ldr	r3, [pc, #568]	; (8001f60 <HAL_RCC_OscConfig+0x4f8>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d118      	bne.n	8001d64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d32:	4b8b      	ldr	r3, [pc, #556]	; (8001f60 <HAL_RCC_OscConfig+0x4f8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a8a      	ldr	r2, [pc, #552]	; (8001f60 <HAL_RCC_OscConfig+0x4f8>)
 8001d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d3e:	f7ff f8df 	bl	8000f00 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d46:	f7ff f8db 	bl	8000f00 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b64      	cmp	r3, #100	; 0x64
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e0fd      	b.n	8001f54 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d58:	4b81      	ldr	r3, [pc, #516]	; (8001f60 <HAL_RCC_OscConfig+0x4f8>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0f0      	beq.n	8001d46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d106      	bne.n	8001d7a <HAL_RCC_OscConfig+0x312>
 8001d6c:	4b7b      	ldr	r3, [pc, #492]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	4a7a      	ldr	r2, [pc, #488]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	6213      	str	r3, [r2, #32]
 8001d78:	e02d      	b.n	8001dd6 <HAL_RCC_OscConfig+0x36e>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10c      	bne.n	8001d9c <HAL_RCC_OscConfig+0x334>
 8001d82:	4b76      	ldr	r3, [pc, #472]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	4a75      	ldr	r2, [pc, #468]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001d88:	f023 0301 	bic.w	r3, r3, #1
 8001d8c:	6213      	str	r3, [r2, #32]
 8001d8e:	4b73      	ldr	r3, [pc, #460]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	4a72      	ldr	r2, [pc, #456]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001d94:	f023 0304 	bic.w	r3, r3, #4
 8001d98:	6213      	str	r3, [r2, #32]
 8001d9a:	e01c      	b.n	8001dd6 <HAL_RCC_OscConfig+0x36e>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	2b05      	cmp	r3, #5
 8001da2:	d10c      	bne.n	8001dbe <HAL_RCC_OscConfig+0x356>
 8001da4:	4b6d      	ldr	r3, [pc, #436]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	4a6c      	ldr	r2, [pc, #432]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001daa:	f043 0304 	orr.w	r3, r3, #4
 8001dae:	6213      	str	r3, [r2, #32]
 8001db0:	4b6a      	ldr	r3, [pc, #424]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	4a69      	ldr	r2, [pc, #420]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	6213      	str	r3, [r2, #32]
 8001dbc:	e00b      	b.n	8001dd6 <HAL_RCC_OscConfig+0x36e>
 8001dbe:	4b67      	ldr	r3, [pc, #412]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	4a66      	ldr	r2, [pc, #408]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001dc4:	f023 0301 	bic.w	r3, r3, #1
 8001dc8:	6213      	str	r3, [r2, #32]
 8001dca:	4b64      	ldr	r3, [pc, #400]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	4a63      	ldr	r2, [pc, #396]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001dd0:	f023 0304 	bic.w	r3, r3, #4
 8001dd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d015      	beq.n	8001e0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dde:	f7ff f88f 	bl	8000f00 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de4:	e00a      	b.n	8001dfc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de6:	f7ff f88b 	bl	8000f00 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e0ab      	b.n	8001f54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dfc:	4b57      	ldr	r3, [pc, #348]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0ee      	beq.n	8001de6 <HAL_RCC_OscConfig+0x37e>
 8001e08:	e014      	b.n	8001e34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0a:	f7ff f879 	bl	8000f00 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e10:	e00a      	b.n	8001e28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e12:	f7ff f875 	bl	8000f00 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e095      	b.n	8001f54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e28:	4b4c      	ldr	r3, [pc, #304]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1ee      	bne.n	8001e12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e34:	7dfb      	ldrb	r3, [r7, #23]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d105      	bne.n	8001e46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e3a:	4b48      	ldr	r3, [pc, #288]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	4a47      	ldr	r2, [pc, #284]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001e40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 8081 	beq.w	8001f52 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e50:	4b42      	ldr	r3, [pc, #264]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 030c 	and.w	r3, r3, #12
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d061      	beq.n	8001f20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d146      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e64:	4b3f      	ldr	r3, [pc, #252]	; (8001f64 <HAL_RCC_OscConfig+0x4fc>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6a:	f7ff f849 	bl	8000f00 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e72:	f7ff f845 	bl	8000f00 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e067      	b.n	8001f54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e84:	4b35      	ldr	r3, [pc, #212]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f0      	bne.n	8001e72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e98:	d108      	bne.n	8001eac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e9a:	4b30      	ldr	r3, [pc, #192]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	492d      	ldr	r1, [pc, #180]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eac:	4b2b      	ldr	r3, [pc, #172]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a19      	ldr	r1, [r3, #32]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	430b      	orrs	r3, r1
 8001ebe:	4927      	ldr	r1, [pc, #156]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec4:	4b27      	ldr	r3, [pc, #156]	; (8001f64 <HAL_RCC_OscConfig+0x4fc>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eca:	f7ff f819 	bl	8000f00 <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed2:	f7ff f815 	bl	8000f00 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e037      	b.n	8001f54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee4:	4b1d      	ldr	r3, [pc, #116]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0f0      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x46a>
 8001ef0:	e02f      	b.n	8001f52 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef2:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <HAL_RCC_OscConfig+0x4fc>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef8:	f7ff f802 	bl	8000f00 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f00:	f7fe fffe 	bl	8000f00 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e020      	b.n	8001f54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f12:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x498>
 8001f1e:	e018      	b.n	8001f52 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d101      	bne.n	8001f2c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e013      	b.n	8001f54 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_RCC_OscConfig+0x4f4>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d106      	bne.n	8001f4e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d001      	beq.n	8001f52 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e000      	b.n	8001f54 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	40021000 	.word	0x40021000
 8001f60:	40007000 	.word	0x40007000
 8001f64:	42420060 	.word	0x42420060

08001f68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d101      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e0d0      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f7c:	4b6a      	ldr	r3, [pc, #424]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d910      	bls.n	8001fac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8a:	4b67      	ldr	r3, [pc, #412]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 0207 	bic.w	r2, r3, #7
 8001f92:	4965      	ldr	r1, [pc, #404]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9a:	4b63      	ldr	r3, [pc, #396]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d001      	beq.n	8001fac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0b8      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d020      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc4:	4b59      	ldr	r3, [pc, #356]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	4a58      	ldr	r2, [pc, #352]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fdc:	4b53      	ldr	r3, [pc, #332]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	4a52      	ldr	r2, [pc, #328]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fe6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe8:	4b50      	ldr	r3, [pc, #320]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	494d      	ldr	r1, [pc, #308]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d040      	beq.n	8002088 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d107      	bne.n	800201e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200e:	4b47      	ldr	r3, [pc, #284]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d115      	bne.n	8002046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e07f      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d107      	bne.n	8002036 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002026:	4b41      	ldr	r3, [pc, #260]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d109      	bne.n	8002046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e073      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002036:	4b3d      	ldr	r3, [pc, #244]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e06b      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002046:	4b39      	ldr	r3, [pc, #228]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f023 0203 	bic.w	r2, r3, #3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	4936      	ldr	r1, [pc, #216]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002054:	4313      	orrs	r3, r2
 8002056:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002058:	f7fe ff52 	bl	8000f00 <HAL_GetTick>
 800205c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205e:	e00a      	b.n	8002076 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002060:	f7fe ff4e 	bl	8000f00 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	f241 3288 	movw	r2, #5000	; 0x1388
 800206e:	4293      	cmp	r3, r2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e053      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002076:	4b2d      	ldr	r3, [pc, #180]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 020c 	and.w	r2, r3, #12
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	429a      	cmp	r2, r3
 8002086:	d1eb      	bne.n	8002060 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002088:	4b27      	ldr	r3, [pc, #156]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d210      	bcs.n	80020b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002096:	4b24      	ldr	r3, [pc, #144]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f023 0207 	bic.w	r2, r3, #7
 800209e:	4922      	ldr	r1, [pc, #136]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a6:	4b20      	ldr	r3, [pc, #128]	; (8002128 <HAL_RCC_ClockConfig+0x1c0>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d001      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e032      	b.n	800211e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c4:	4b19      	ldr	r3, [pc, #100]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	4916      	ldr	r1, [pc, #88]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d009      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020e2:	4b12      	ldr	r3, [pc, #72]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	490e      	ldr	r1, [pc, #56]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020f6:	f000 f821 	bl	800213c <HAL_RCC_GetSysClockFreq>
 80020fa:	4601      	mov	r1, r0
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_RCC_ClockConfig+0x1c4>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	091b      	lsrs	r3, r3, #4
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	4a0a      	ldr	r2, [pc, #40]	; (8002130 <HAL_RCC_ClockConfig+0x1c8>)
 8002108:	5cd3      	ldrb	r3, [r2, r3]
 800210a:	fa21 f303 	lsr.w	r3, r1, r3
 800210e:	4a09      	ldr	r2, [pc, #36]	; (8002134 <HAL_RCC_ClockConfig+0x1cc>)
 8002110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002112:	4b09      	ldr	r3, [pc, #36]	; (8002138 <HAL_RCC_ClockConfig+0x1d0>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe feb0 	bl	8000e7c <HAL_InitTick>

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40022000 	.word	0x40022000
 800212c:	40021000 	.word	0x40021000
 8002130:	08003efc 	.word	0x08003efc
 8002134:	20000000 	.word	0x20000000
 8002138:	20000004 	.word	0x20000004

0800213c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800213c:	b490      	push	{r4, r7}
 800213e:	b08a      	sub	sp, #40	; 0x28
 8002140:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002142:	4b2a      	ldr	r3, [pc, #168]	; (80021ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8002144:	1d3c      	adds	r4, r7, #4
 8002146:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002148:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800214c:	4b28      	ldr	r3, [pc, #160]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	61fb      	str	r3, [r7, #28]
 8002156:	2300      	movs	r3, #0
 8002158:	61bb      	str	r3, [r7, #24]
 800215a:	2300      	movs	r3, #0
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
 800215e:	2300      	movs	r3, #0
 8002160:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002162:	2300      	movs	r3, #0
 8002164:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002166:	4b23      	ldr	r3, [pc, #140]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f003 030c 	and.w	r3, r3, #12
 8002172:	2b04      	cmp	r3, #4
 8002174:	d002      	beq.n	800217c <HAL_RCC_GetSysClockFreq+0x40>
 8002176:	2b08      	cmp	r3, #8
 8002178:	d003      	beq.n	8002182 <HAL_RCC_GetSysClockFreq+0x46>
 800217a:	e02d      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800217c:	4b1e      	ldr	r3, [pc, #120]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800217e:	623b      	str	r3, [r7, #32]
      break;
 8002180:	e02d      	b.n	80021de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	0c9b      	lsrs	r3, r3, #18
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800218e:	4413      	add	r3, r2
 8002190:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002194:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d013      	beq.n	80021c8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021a0:	4b14      	ldr	r3, [pc, #80]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	0c5b      	lsrs	r3, r3, #17
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021ae:	4413      	add	r3, r2
 80021b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021b4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	4a0f      	ldr	r2, [pc, #60]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021ba:	fb02 f203 	mul.w	r2, r2, r3
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
 80021c6:	e004      	b.n	80021d2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	4a0c      	ldr	r2, [pc, #48]	; (80021fc <HAL_RCC_GetSysClockFreq+0xc0>)
 80021cc:	fb02 f303 	mul.w	r3, r2, r3
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	623b      	str	r3, [r7, #32]
      break;
 80021d6:	e002      	b.n	80021de <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021d8:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021da:	623b      	str	r3, [r7, #32]
      break;
 80021dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021de:	6a3b      	ldr	r3, [r7, #32]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3728      	adds	r7, #40	; 0x28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc90      	pop	{r4, r7}
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	08003ee8 	.word	0x08003ee8
 80021f0:	08003ef8 	.word	0x08003ef8
 80021f4:	40021000 	.word	0x40021000
 80021f8:	007a1200 	.word	0x007a1200
 80021fc:	003d0900 	.word	0x003d0900

08002200 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002204:	4b02      	ldr	r3, [pc, #8]	; (8002210 <HAL_RCC_GetHCLKFreq+0x10>)
 8002206:	681b      	ldr	r3, [r3, #0]
}
 8002208:	4618      	mov	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr
 8002210:	20000000 	.word	0x20000000

08002214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002218:	f7ff fff2 	bl	8002200 <HAL_RCC_GetHCLKFreq>
 800221c:	4601      	mov	r1, r0
 800221e:	4b05      	ldr	r3, [pc, #20]	; (8002234 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	4a03      	ldr	r2, [pc, #12]	; (8002238 <HAL_RCC_GetPCLK1Freq+0x24>)
 800222a:	5cd3      	ldrb	r3, [r2, r3]
 800222c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002230:	4618      	mov	r0, r3
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40021000 	.word	0x40021000
 8002238:	08003f0c 	.word	0x08003f0c

0800223c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002240:	f7ff ffde 	bl	8002200 <HAL_RCC_GetHCLKFreq>
 8002244:	4601      	mov	r1, r0
 8002246:	4b05      	ldr	r3, [pc, #20]	; (800225c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	0adb      	lsrs	r3, r3, #11
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	4a03      	ldr	r2, [pc, #12]	; (8002260 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002252:	5cd3      	ldrb	r3, [r2, r3]
 8002254:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002258:	4618      	mov	r0, r3
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40021000 	.word	0x40021000
 8002260:	08003f0c 	.word	0x08003f0c

08002264 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800226c:	4b0a      	ldr	r3, [pc, #40]	; (8002298 <RCC_Delay+0x34>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a0a      	ldr	r2, [pc, #40]	; (800229c <RCC_Delay+0x38>)
 8002272:	fba2 2303 	umull	r2, r3, r2, r3
 8002276:	0a5b      	lsrs	r3, r3, #9
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	fb02 f303 	mul.w	r3, r2, r3
 800227e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002280:	bf00      	nop
  }
  while (Delay --);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	1e5a      	subs	r2, r3, #1
 8002286:	60fa      	str	r2, [r7, #12]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1f9      	bne.n	8002280 <RCC_Delay+0x1c>
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	20000000 	.word	0x20000000
 800229c:	10624dd3 	.word	0x10624dd3

080022a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e041      	b.n	8002336 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d106      	bne.n	80022cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7fe fc7c 	bl	8000bc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2202      	movs	r2, #2
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3304      	adds	r3, #4
 80022dc:	4619      	mov	r1, r3
 80022de:	4610      	mov	r0, r2
 80022e0:	f000 fc14 	bl	8002b0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b01      	cmp	r3, #1
 8002352:	d001      	beq.n	8002358 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e03a      	b.n	80023ce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2202      	movs	r2, #2
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f042 0201 	orr.w	r2, r2, #1
 800236e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a18      	ldr	r2, [pc, #96]	; (80023d8 <HAL_TIM_Base_Start_IT+0x98>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d00e      	beq.n	8002398 <HAL_TIM_Base_Start_IT+0x58>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002382:	d009      	beq.n	8002398 <HAL_TIM_Base_Start_IT+0x58>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a14      	ldr	r2, [pc, #80]	; (80023dc <HAL_TIM_Base_Start_IT+0x9c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d004      	beq.n	8002398 <HAL_TIM_Base_Start_IT+0x58>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a13      	ldr	r2, [pc, #76]	; (80023e0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d111      	bne.n	80023bc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2b06      	cmp	r3, #6
 80023a8:	d010      	beq.n	80023cc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f042 0201 	orr.w	r2, r2, #1
 80023b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ba:	e007      	b.n	80023cc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 0201 	orr.w	r2, r2, #1
 80023ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr
 80023d8:	40012c00 	.word	0x40012c00
 80023dc:	40000400 	.word	0x40000400
 80023e0:	40000800 	.word	0x40000800

080023e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e041      	b.n	800247a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d106      	bne.n	8002410 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7fe fbbc 	bl	8000b88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2202      	movs	r2, #2
 8002414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3304      	adds	r3, #4
 8002420:	4619      	mov	r1, r3
 8002422:	4610      	mov	r0, r2
 8002424:	f000 fb72 	bl	8002b0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d109      	bne.n	80024a8 <HAL_TIM_PWM_Start+0x24>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b01      	cmp	r3, #1
 800249e:	bf14      	ite	ne
 80024a0:	2301      	movne	r3, #1
 80024a2:	2300      	moveq	r3, #0
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	e022      	b.n	80024ee <HAL_TIM_PWM_Start+0x6a>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d109      	bne.n	80024c2 <HAL_TIM_PWM_Start+0x3e>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	bf14      	ite	ne
 80024ba:	2301      	movne	r3, #1
 80024bc:	2300      	moveq	r3, #0
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	e015      	b.n	80024ee <HAL_TIM_PWM_Start+0x6a>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d109      	bne.n	80024dc <HAL_TIM_PWM_Start+0x58>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	bf14      	ite	ne
 80024d4:	2301      	movne	r3, #1
 80024d6:	2300      	moveq	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	e008      	b.n	80024ee <HAL_TIM_PWM_Start+0x6a>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	bf14      	ite	ne
 80024e8:	2301      	movne	r3, #1
 80024ea:	2300      	moveq	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e05e      	b.n	80025b4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d104      	bne.n	8002506 <HAL_TIM_PWM_Start+0x82>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2202      	movs	r2, #2
 8002500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002504:	e013      	b.n	800252e <HAL_TIM_PWM_Start+0xaa>
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	2b04      	cmp	r3, #4
 800250a:	d104      	bne.n	8002516 <HAL_TIM_PWM_Start+0x92>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2202      	movs	r2, #2
 8002510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002514:	e00b      	b.n	800252e <HAL_TIM_PWM_Start+0xaa>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	2b08      	cmp	r3, #8
 800251a:	d104      	bne.n	8002526 <HAL_TIM_PWM_Start+0xa2>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2202      	movs	r2, #2
 8002520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002524:	e003      	b.n	800252e <HAL_TIM_PWM_Start+0xaa>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2202      	movs	r2, #2
 800252a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2201      	movs	r2, #1
 8002534:	6839      	ldr	r1, [r7, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f000 fd68 	bl	800300c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a1e      	ldr	r2, [pc, #120]	; (80025bc <HAL_TIM_PWM_Start+0x138>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d107      	bne.n	8002556 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002554:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a18      	ldr	r2, [pc, #96]	; (80025bc <HAL_TIM_PWM_Start+0x138>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d00e      	beq.n	800257e <HAL_TIM_PWM_Start+0xfa>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002568:	d009      	beq.n	800257e <HAL_TIM_PWM_Start+0xfa>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a14      	ldr	r2, [pc, #80]	; (80025c0 <HAL_TIM_PWM_Start+0x13c>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d004      	beq.n	800257e <HAL_TIM_PWM_Start+0xfa>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a12      	ldr	r2, [pc, #72]	; (80025c4 <HAL_TIM_PWM_Start+0x140>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d111      	bne.n	80025a2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2b06      	cmp	r3, #6
 800258e:	d010      	beq.n	80025b2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0201 	orr.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025a0:	e007      	b.n	80025b2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f042 0201 	orr.w	r2, r2, #1
 80025b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40012c00 	.word	0x40012c00
 80025c0:	40000400 	.word	0x40000400
 80025c4:	40000800 	.word	0x40000800

080025c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d122      	bne.n	8002624 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d11b      	bne.n	8002624 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f06f 0202 	mvn.w	r2, #2
 80025f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 fa62 	bl	8002ad4 <HAL_TIM_IC_CaptureCallback>
 8002610:	e005      	b.n	800261e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 fa55 	bl	8002ac2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f000 fa64 	bl	8002ae6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	f003 0304 	and.w	r3, r3, #4
 800262e:	2b04      	cmp	r3, #4
 8002630:	d122      	bne.n	8002678 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b04      	cmp	r3, #4
 800263e:	d11b      	bne.n	8002678 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f06f 0204 	mvn.w	r2, #4
 8002648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2202      	movs	r2, #2
 800264e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 fa38 	bl	8002ad4 <HAL_TIM_IC_CaptureCallback>
 8002664:	e005      	b.n	8002672 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 fa2b 	bl	8002ac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 fa3a 	bl	8002ae6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b08      	cmp	r3, #8
 8002684:	d122      	bne.n	80026cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f003 0308 	and.w	r3, r3, #8
 8002690:	2b08      	cmp	r3, #8
 8002692:	d11b      	bne.n	80026cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0208 	mvn.w	r2, #8
 800269c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2204      	movs	r2, #4
 80026a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 fa0e 	bl	8002ad4 <HAL_TIM_IC_CaptureCallback>
 80026b8:	e005      	b.n	80026c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 fa01 	bl	8002ac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 fa10 	bl	8002ae6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f003 0310 	and.w	r3, r3, #16
 80026d6:	2b10      	cmp	r3, #16
 80026d8:	d122      	bne.n	8002720 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f003 0310 	and.w	r3, r3, #16
 80026e4:	2b10      	cmp	r3, #16
 80026e6:	d11b      	bne.n	8002720 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f06f 0210 	mvn.w	r2, #16
 80026f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2208      	movs	r2, #8
 80026f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f9e4 	bl	8002ad4 <HAL_TIM_IC_CaptureCallback>
 800270c:	e005      	b.n	800271a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f9d7 	bl	8002ac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 f9e6 	bl	8002ae6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b01      	cmp	r3, #1
 800272c:	d10e      	bne.n	800274c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b01      	cmp	r3, #1
 800273a:	d107      	bne.n	800274c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f06f 0201 	mvn.w	r2, #1
 8002744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7fd fefa 	bl	8000540 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002756:	2b80      	cmp	r3, #128	; 0x80
 8002758:	d10e      	bne.n	8002778 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002764:	2b80      	cmp	r3, #128	; 0x80
 8002766:	d107      	bne.n	8002778 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 fd26 	bl	80031c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002782:	2b40      	cmp	r3, #64	; 0x40
 8002784:	d10e      	bne.n	80027a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002790:	2b40      	cmp	r3, #64	; 0x40
 8002792:	d107      	bne.n	80027a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800279c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f9aa 	bl	8002af8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	f003 0320 	and.w	r3, r3, #32
 80027ae:	2b20      	cmp	r3, #32
 80027b0:	d10e      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f003 0320 	and.w	r3, r3, #32
 80027bc:	2b20      	cmp	r3, #32
 80027be:	d107      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f06f 0220 	mvn.w	r2, #32
 80027c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 fcf1 	bl	80031b2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027d0:	bf00      	nop
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d101      	bne.n	80027f2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80027ee:	2302      	movs	r3, #2
 80027f0:	e0ac      	b.n	800294c <HAL_TIM_PWM_ConfigChannel+0x174>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b0c      	cmp	r3, #12
 80027fe:	f200 809f 	bhi.w	8002940 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002802:	a201      	add	r2, pc, #4	; (adr r2, 8002808 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002808:	0800283d 	.word	0x0800283d
 800280c:	08002941 	.word	0x08002941
 8002810:	08002941 	.word	0x08002941
 8002814:	08002941 	.word	0x08002941
 8002818:	0800287d 	.word	0x0800287d
 800281c:	08002941 	.word	0x08002941
 8002820:	08002941 	.word	0x08002941
 8002824:	08002941 	.word	0x08002941
 8002828:	080028bf 	.word	0x080028bf
 800282c:	08002941 	.word	0x08002941
 8002830:	08002941 	.word	0x08002941
 8002834:	08002941 	.word	0x08002941
 8002838:	080028ff 	.word	0x080028ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68b9      	ldr	r1, [r7, #8]
 8002842:	4618      	mov	r0, r3
 8002844:	f000 f9c4 	bl	8002bd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	699a      	ldr	r2, [r3, #24]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f042 0208 	orr.w	r2, r2, #8
 8002856:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	699a      	ldr	r2, [r3, #24]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0204 	bic.w	r2, r2, #4
 8002866:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6999      	ldr	r1, [r3, #24]
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	691a      	ldr	r2, [r3, #16]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	430a      	orrs	r2, r1
 8002878:	619a      	str	r2, [r3, #24]
      break;
 800287a:	e062      	b.n	8002942 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68b9      	ldr	r1, [r7, #8]
 8002882:	4618      	mov	r0, r3
 8002884:	f000 fa0a 	bl	8002c9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	699a      	ldr	r2, [r3, #24]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002896:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	699a      	ldr	r2, [r3, #24]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6999      	ldr	r1, [r3, #24]
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	021a      	lsls	r2, r3, #8
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	619a      	str	r2, [r3, #24]
      break;
 80028bc:	e041      	b.n	8002942 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68b9      	ldr	r1, [r7, #8]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f000 fa53 	bl	8002d70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	69da      	ldr	r2, [r3, #28]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f042 0208 	orr.w	r2, r2, #8
 80028d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	69da      	ldr	r2, [r3, #28]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 0204 	bic.w	r2, r2, #4
 80028e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	69d9      	ldr	r1, [r3, #28]
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	691a      	ldr	r2, [r3, #16]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	61da      	str	r2, [r3, #28]
      break;
 80028fc:	e021      	b.n	8002942 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	68b9      	ldr	r1, [r7, #8]
 8002904:	4618      	mov	r0, r3
 8002906:	f000 fa9d 	bl	8002e44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	69da      	ldr	r2, [r3, #28]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002918:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	69da      	ldr	r2, [r3, #28]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002928:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	69d9      	ldr	r1, [r3, #28]
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	021a      	lsls	r2, r3, #8
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	61da      	str	r2, [r3, #28]
      break;
 800293e:	e000      	b.n	8002942 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002940:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002964:	2b01      	cmp	r3, #1
 8002966:	d101      	bne.n	800296c <HAL_TIM_ConfigClockSource+0x18>
 8002968:	2302      	movs	r3, #2
 800296a:	e0a6      	b.n	8002aba <HAL_TIM_ConfigClockSource+0x166>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800298a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002992:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b40      	cmp	r3, #64	; 0x40
 80029a2:	d067      	beq.n	8002a74 <HAL_TIM_ConfigClockSource+0x120>
 80029a4:	2b40      	cmp	r3, #64	; 0x40
 80029a6:	d80b      	bhi.n	80029c0 <HAL_TIM_ConfigClockSource+0x6c>
 80029a8:	2b10      	cmp	r3, #16
 80029aa:	d073      	beq.n	8002a94 <HAL_TIM_ConfigClockSource+0x140>
 80029ac:	2b10      	cmp	r3, #16
 80029ae:	d802      	bhi.n	80029b6 <HAL_TIM_ConfigClockSource+0x62>
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d06f      	beq.n	8002a94 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80029b4:	e078      	b.n	8002aa8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80029b6:	2b20      	cmp	r3, #32
 80029b8:	d06c      	beq.n	8002a94 <HAL_TIM_ConfigClockSource+0x140>
 80029ba:	2b30      	cmp	r3, #48	; 0x30
 80029bc:	d06a      	beq.n	8002a94 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80029be:	e073      	b.n	8002aa8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80029c0:	2b70      	cmp	r3, #112	; 0x70
 80029c2:	d00d      	beq.n	80029e0 <HAL_TIM_ConfigClockSource+0x8c>
 80029c4:	2b70      	cmp	r3, #112	; 0x70
 80029c6:	d804      	bhi.n	80029d2 <HAL_TIM_ConfigClockSource+0x7e>
 80029c8:	2b50      	cmp	r3, #80	; 0x50
 80029ca:	d033      	beq.n	8002a34 <HAL_TIM_ConfigClockSource+0xe0>
 80029cc:	2b60      	cmp	r3, #96	; 0x60
 80029ce:	d041      	beq.n	8002a54 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80029d0:	e06a      	b.n	8002aa8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80029d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d6:	d066      	beq.n	8002aa6 <HAL_TIM_ConfigClockSource+0x152>
 80029d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029dc:	d017      	beq.n	8002a0e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80029de:	e063      	b.n	8002aa8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6818      	ldr	r0, [r3, #0]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	6899      	ldr	r1, [r3, #8]
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	f000 faed 	bl	8002fce <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a02:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	609a      	str	r2, [r3, #8]
      break;
 8002a0c:	e04c      	b.n	8002aa8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6818      	ldr	r0, [r3, #0]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	6899      	ldr	r1, [r3, #8]
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	f000 fad6 	bl	8002fce <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a30:	609a      	str	r2, [r3, #8]
      break;
 8002a32:	e039      	b.n	8002aa8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6818      	ldr	r0, [r3, #0]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	6859      	ldr	r1, [r3, #4]
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	461a      	mov	r2, r3
 8002a42:	f000 fa4d 	bl	8002ee0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2150      	movs	r1, #80	; 0x50
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f000 faa4 	bl	8002f9a <TIM_ITRx_SetConfig>
      break;
 8002a52:	e029      	b.n	8002aa8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6818      	ldr	r0, [r3, #0]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	6859      	ldr	r1, [r3, #4]
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	461a      	mov	r2, r3
 8002a62:	f000 fa6b 	bl	8002f3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2160      	movs	r1, #96	; 0x60
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f000 fa94 	bl	8002f9a <TIM_ITRx_SetConfig>
      break;
 8002a72:	e019      	b.n	8002aa8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6818      	ldr	r0, [r3, #0]
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	6859      	ldr	r1, [r3, #4]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	461a      	mov	r2, r3
 8002a82:	f000 fa2d 	bl	8002ee0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2140      	movs	r1, #64	; 0x40
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 fa84 	bl	8002f9a <TIM_ITRx_SetConfig>
      break;
 8002a92:	e009      	b.n	8002aa8 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4610      	mov	r0, r2
 8002aa0:	f000 fa7b 	bl	8002f9a <TIM_ITRx_SetConfig>
        break;
 8002aa4:	e000      	b.n	8002aa8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002aa6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc80      	pop	{r7}
 8002ae4:	4770      	bx	lr

08002ae6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr

08002af8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr
	...

08002b0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a29      	ldr	r2, [pc, #164]	; (8002bc4 <TIM_Base_SetConfig+0xb8>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d00b      	beq.n	8002b3c <TIM_Base_SetConfig+0x30>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b2a:	d007      	beq.n	8002b3c <TIM_Base_SetConfig+0x30>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a26      	ldr	r2, [pc, #152]	; (8002bc8 <TIM_Base_SetConfig+0xbc>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d003      	beq.n	8002b3c <TIM_Base_SetConfig+0x30>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a25      	ldr	r2, [pc, #148]	; (8002bcc <TIM_Base_SetConfig+0xc0>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d108      	bne.n	8002b4e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a1c      	ldr	r2, [pc, #112]	; (8002bc4 <TIM_Base_SetConfig+0xb8>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d00b      	beq.n	8002b6e <TIM_Base_SetConfig+0x62>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b5c:	d007      	beq.n	8002b6e <TIM_Base_SetConfig+0x62>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a19      	ldr	r2, [pc, #100]	; (8002bc8 <TIM_Base_SetConfig+0xbc>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d003      	beq.n	8002b6e <TIM_Base_SetConfig+0x62>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a18      	ldr	r2, [pc, #96]	; (8002bcc <TIM_Base_SetConfig+0xc0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d108      	bne.n	8002b80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a07      	ldr	r2, [pc, #28]	; (8002bc4 <TIM_Base_SetConfig+0xb8>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d103      	bne.n	8002bb4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	691a      	ldr	r2, [r3, #16]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	615a      	str	r2, [r3, #20]
}
 8002bba:	bf00      	nop
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr
 8002bc4:	40012c00 	.word	0x40012c00
 8002bc8:	40000400 	.word	0x40000400
 8002bcc:	40000800 	.word	0x40000800

08002bd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b087      	sub	sp, #28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	f023 0201 	bic.w	r2, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f023 0303 	bic.w	r3, r3, #3
 8002c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f023 0302 	bic.w	r3, r3, #2
 8002c18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a1c      	ldr	r2, [pc, #112]	; (8002c98 <TIM_OC1_SetConfig+0xc8>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d10c      	bne.n	8002c46 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f023 0308 	bic.w	r3, r3, #8
 8002c32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f023 0304 	bic.w	r3, r3, #4
 8002c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a13      	ldr	r2, [pc, #76]	; (8002c98 <TIM_OC1_SetConfig+0xc8>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d111      	bne.n	8002c72 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	621a      	str	r2, [r3, #32]
}
 8002c8c:	bf00      	nop
 8002c8e:	371c      	adds	r7, #28
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40012c00 	.word	0x40012c00

08002c9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b087      	sub	sp, #28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	f023 0210 	bic.w	r2, r3, #16
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	021b      	lsls	r3, r3, #8
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f023 0320 	bic.w	r3, r3, #32
 8002ce6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a1d      	ldr	r2, [pc, #116]	; (8002d6c <TIM_OC2_SetConfig+0xd0>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d10d      	bne.n	8002d18 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	68db      	ldr	r3, [r3, #12]
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4a14      	ldr	r2, [pc, #80]	; (8002d6c <TIM_OC2_SetConfig+0xd0>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d113      	bne.n	8002d48 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	621a      	str	r2, [r3, #32]
}
 8002d62:	bf00      	nop
 8002d64:	371c      	adds	r7, #28
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bc80      	pop	{r7}
 8002d6a:	4770      	bx	lr
 8002d6c:	40012c00 	.word	0x40012c00

08002d70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b087      	sub	sp, #28
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f023 0303 	bic.w	r3, r3, #3
 8002da6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002db8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	021b      	lsls	r3, r3, #8
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a1d      	ldr	r2, [pc, #116]	; (8002e40 <TIM_OC3_SetConfig+0xd0>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d10d      	bne.n	8002dea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002dd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	021b      	lsls	r3, r3, #8
 8002ddc:	697a      	ldr	r2, [r7, #20]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002de8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a14      	ldr	r2, [pc, #80]	; (8002e40 <TIM_OC3_SetConfig+0xd0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d113      	bne.n	8002e1a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002df8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	011b      	lsls	r3, r3, #4
 8002e08:	693a      	ldr	r2, [r7, #16]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685a      	ldr	r2, [r3, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	621a      	str	r2, [r3, #32]
}
 8002e34:	bf00      	nop
 8002e36:	371c      	adds	r7, #28
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bc80      	pop	{r7}
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40012c00 	.word	0x40012c00

08002e44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b087      	sub	sp, #28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	021b      	lsls	r3, r3, #8
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	031b      	lsls	r3, r3, #12
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a0f      	ldr	r2, [pc, #60]	; (8002edc <TIM_OC4_SetConfig+0x98>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d109      	bne.n	8002eb8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002eaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	019b      	lsls	r3, r3, #6
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	621a      	str	r2, [r3, #32]
}
 8002ed2:	bf00      	nop
 8002ed4:	371c      	adds	r7, #28
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr
 8002edc:	40012c00 	.word	0x40012c00

08002ee0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b087      	sub	sp, #28
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	f023 0201 	bic.w	r2, r3, #1
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	693a      	ldr	r2, [r7, #16]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f023 030a 	bic.w	r3, r3, #10
 8002f1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	693a      	ldr	r2, [r7, #16]
 8002f2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	697a      	ldr	r2, [r7, #20]
 8002f30:	621a      	str	r2, [r3, #32]
}
 8002f32:	bf00      	nop
 8002f34:	371c      	adds	r7, #28
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bc80      	pop	{r7}
 8002f3a:	4770      	bx	lr

08002f3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b087      	sub	sp, #28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	f023 0210 	bic.w	r2, r3, #16
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f66:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	031b      	lsls	r3, r3, #12
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f78:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	621a      	str	r2, [r3, #32]
}
 8002f90:	bf00      	nop
 8002f92:	371c      	adds	r7, #28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bc80      	pop	{r7}
 8002f98:	4770      	bx	lr

08002f9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b085      	sub	sp, #20
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
 8002fa2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f043 0307 	orr.w	r3, r3, #7
 8002fbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	609a      	str	r2, [r3, #8]
}
 8002fc4:	bf00      	nop
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bc80      	pop	{r7}
 8002fcc:	4770      	bx	lr

08002fce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b087      	sub	sp, #28
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	607a      	str	r2, [r7, #4]
 8002fda:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fe8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	021a      	lsls	r2, r3, #8
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	609a      	str	r2, [r3, #8]
}
 8003002:	bf00      	nop
 8003004:	371c      	adds	r7, #28
 8003006:	46bd      	mov	sp, r7
 8003008:	bc80      	pop	{r7}
 800300a:	4770      	bx	lr

0800300c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800300c:	b480      	push	{r7}
 800300e:	b087      	sub	sp, #28
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f003 031f 	and.w	r3, r3, #31
 800301e:	2201      	movs	r2, #1
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6a1a      	ldr	r2, [r3, #32]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	43db      	mvns	r3, r3
 800302e:	401a      	ands	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6a1a      	ldr	r2, [r3, #32]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f003 031f 	and.w	r3, r3, #31
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	fa01 f303 	lsl.w	r3, r1, r3
 8003044:	431a      	orrs	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	621a      	str	r2, [r3, #32]
}
 800304a:	bf00      	nop
 800304c:	371c      	adds	r7, #28
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr

08003054 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003064:	2b01      	cmp	r3, #1
 8003066:	d101      	bne.n	800306c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003068:	2302      	movs	r3, #2
 800306a:	e046      	b.n	80030fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2202      	movs	r2, #2
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003092:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	4313      	orrs	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68fa      	ldr	r2, [r7, #12]
 80030a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a16      	ldr	r2, [pc, #88]	; (8003104 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d00e      	beq.n	80030ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b8:	d009      	beq.n	80030ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a12      	ldr	r2, [pc, #72]	; (8003108 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d004      	beq.n	80030ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a10      	ldr	r2, [pc, #64]	; (800310c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d10c      	bne.n	80030e8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	4313      	orrs	r3, r2
 80030de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr
 8003104:	40012c00 	.word	0x40012c00
 8003108:	40000400 	.word	0x40000400
 800310c:	40000800 	.word	0x40000800

08003110 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800311a:	2300      	movs	r3, #0
 800311c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003124:	2b01      	cmp	r3, #1
 8003126:	d101      	bne.n	800312c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003128:	2302      	movs	r3, #2
 800312a:	e03d      	b.n	80031a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	4313      	orrs	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	4313      	orrs	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	4313      	orrs	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4313      	orrs	r3, r2
 800316a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	4313      	orrs	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	4313      	orrs	r3, r2
 8003186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	4313      	orrs	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3714      	adds	r7, #20
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bc80      	pop	{r7}
 80031b0:	4770      	bx	lr

080031b2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	bc80      	pop	{r7}
 80031c2:	4770      	bx	lr

080031c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bc80      	pop	{r7}
 80031d4:	4770      	bx	lr

080031d6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d101      	bne.n	80031e8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e03f      	b.n	8003268 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d106      	bne.n	8003202 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f7fd fd39 	bl	8000c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2224      	movs	r2, #36	; 0x24
 8003206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68da      	ldr	r2, [r3, #12]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003218:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 fd9e 	bl	8003d5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	691a      	ldr	r2, [r3, #16]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800322e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	695a      	ldr	r2, [r3, #20]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800323e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800324e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2220      	movs	r2, #32
 800325a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2220      	movs	r2, #32
 8003262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08a      	sub	sp, #40	; 0x28
 8003274:	af02      	add	r7, sp, #8
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	603b      	str	r3, [r7, #0]
 800327c:	4613      	mov	r3, r2
 800327e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b20      	cmp	r3, #32
 800328e:	d17c      	bne.n	800338a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d002      	beq.n	800329c <HAL_UART_Transmit+0x2c>
 8003296:	88fb      	ldrh	r3, [r7, #6]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e075      	b.n	800338c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d101      	bne.n	80032ae <HAL_UART_Transmit+0x3e>
 80032aa:	2302      	movs	r3, #2
 80032ac:	e06e      	b.n	800338c <HAL_UART_Transmit+0x11c>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2221      	movs	r2, #33	; 0x21
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032c4:	f7fd fe1c 	bl	8000f00 <HAL_GetTick>
 80032c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	88fa      	ldrh	r2, [r7, #6]
 80032ce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	88fa      	ldrh	r2, [r7, #6]
 80032d4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032de:	d108      	bne.n	80032f2 <HAL_UART_Transmit+0x82>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	691b      	ldr	r3, [r3, #16]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d104      	bne.n	80032f2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80032e8:	2300      	movs	r3, #0
 80032ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	61bb      	str	r3, [r7, #24]
 80032f0:	e003      	b.n	80032fa <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032f6:	2300      	movs	r3, #0
 80032f8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003302:	e02a      	b.n	800335a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	2200      	movs	r2, #0
 800330c:	2180      	movs	r1, #128	; 0x80
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 fb10 	bl	8003934 <UART_WaitOnFlagUntilTimeout>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e036      	b.n	800338c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10b      	bne.n	800333c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	461a      	mov	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003332:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	3302      	adds	r3, #2
 8003338:	61bb      	str	r3, [r7, #24]
 800333a:	e007      	b.n	800334c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	781a      	ldrb	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	3301      	adds	r3, #1
 800334a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003350:	b29b      	uxth	r3, r3
 8003352:	3b01      	subs	r3, #1
 8003354:	b29a      	uxth	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800335e:	b29b      	uxth	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1cf      	bne.n	8003304 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	2200      	movs	r2, #0
 800336c:	2140      	movs	r1, #64	; 0x40
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 fae0 	bl	8003934 <UART_WaitOnFlagUntilTimeout>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e006      	b.n	800338c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2220      	movs	r2, #32
 8003382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003386:	2300      	movs	r3, #0
 8003388:	e000      	b.n	800338c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800338a:	2302      	movs	r3, #2
  }
}
 800338c:	4618      	mov	r0, r3
 800338e:	3720      	adds	r7, #32
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	4613      	mov	r3, r2
 80033a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b20      	cmp	r3, #32
 80033ac:	d13c      	bne.n	8003428 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d002      	beq.n	80033ba <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80033b4:	88fb      	ldrh	r3, [r7, #6]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e035      	b.n	800342a <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d101      	bne.n	80033cc <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80033c8:	2302      	movs	r3, #2
 80033ca:	e02e      	b.n	800342a <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2201      	movs	r2, #1
 80033d8:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80033da:	88fb      	ldrh	r3, [r7, #6]
 80033dc:	461a      	mov	r2, r3
 80033de:	68b9      	ldr	r1, [r7, #8]
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f000 faf1 	bl	80039c8 <UART_Start_Receive_DMA>
 80033e6:	4603      	mov	r3, r0
 80033e8:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80033ea:	7dfb      	ldrb	r3, [r7, #23]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d119      	bne.n	8003424 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d113      	bne.n	8003420 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033f8:	2300      	movs	r3, #0
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	613b      	str	r3, [r7, #16]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	613b      	str	r3, [r7, #16]
 800340c:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68da      	ldr	r2, [r3, #12]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f042 0210 	orr.w	r2, r2, #16
 800341c:	60da      	str	r2, [r3, #12]
 800341e:	e001      	b.n	8003424 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8003424:	7dfb      	ldrb	r3, [r7, #23]
 8003426:	e000      	b.n	800342a <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8003428:	2302      	movs	r3, #2
  }
}
 800342a:	4618      	mov	r0, r3
 800342c:	3718      	adds	r7, #24
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
	...

08003434 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b08a      	sub	sp, #40	; 0x28
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003454:	2300      	movs	r3, #0
 8003456:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003458:	2300      	movs	r3, #0
 800345a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10d      	bne.n	8003486 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	f003 0320 	and.w	r3, r3, #32
 8003470:	2b00      	cmp	r3, #0
 8003472:	d008      	beq.n	8003486 <HAL_UART_IRQHandler+0x52>
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 fbc2 	bl	8003c08 <UART_Receive_IT>
      return;
 8003484:	e17c      	b.n	8003780 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 80b1 	beq.w	80035f0 <HAL_UART_IRQHandler+0x1bc>
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	f003 0301 	and.w	r3, r3, #1
 8003494:	2b00      	cmp	r3, #0
 8003496:	d105      	bne.n	80034a4 <HAL_UART_IRQHandler+0x70>
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 80a6 	beq.w	80035f0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00a      	beq.n	80034c4 <HAL_UART_IRQHandler+0x90>
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d005      	beq.n	80034c4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034bc:	f043 0201 	orr.w	r2, r3, #1
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	f003 0304 	and.w	r3, r3, #4
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00a      	beq.n	80034e4 <HAL_UART_IRQHandler+0xb0>
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d005      	beq.n	80034e4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034dc:	f043 0202 	orr.w	r2, r3, #2
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00a      	beq.n	8003504 <HAL_UART_IRQHandler+0xd0>
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d005      	beq.n	8003504 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fc:	f043 0204 	orr.w	r2, r3, #4
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00f      	beq.n	800352e <HAL_UART_IRQHandler+0xfa>
 800350e:	6a3b      	ldr	r3, [r7, #32]
 8003510:	f003 0320 	and.w	r3, r3, #32
 8003514:	2b00      	cmp	r3, #0
 8003516:	d104      	bne.n	8003522 <HAL_UART_IRQHandler+0xee>
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d005      	beq.n	800352e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	f043 0208 	orr.w	r2, r3, #8
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 811f 	beq.w	8003776 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	f003 0320 	and.w	r3, r3, #32
 800353e:	2b00      	cmp	r3, #0
 8003540:	d007      	beq.n	8003552 <HAL_UART_IRQHandler+0x11e>
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	f003 0320 	and.w	r3, r3, #32
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 fb5b 	bl	8003c08 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355c:	2b00      	cmp	r3, #0
 800355e:	bf14      	ite	ne
 8003560:	2301      	movne	r3, #1
 8003562:	2300      	moveq	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d102      	bne.n	800357a <HAL_UART_IRQHandler+0x146>
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d031      	beq.n	80035de <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 fa9d 	bl	8003aba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358a:	2b00      	cmp	r3, #0
 800358c:	d023      	beq.n	80035d6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	695a      	ldr	r2, [r3, #20]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800359c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d013      	beq.n	80035ce <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035aa:	4a77      	ldr	r2, [pc, #476]	; (8003788 <HAL_UART_IRQHandler+0x354>)
 80035ac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7fd fed2 	bl	800135c <HAL_DMA_Abort_IT>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d016      	beq.n	80035ec <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035c8:	4610      	mov	r0, r2
 80035ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035cc:	e00e      	b.n	80035ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f8f7 	bl	80037c2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035d4:	e00a      	b.n	80035ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f8f3 	bl	80037c2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035dc:	e006      	b.n	80035ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f8ef 	bl	80037c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80035ea:	e0c4      	b.n	8003776 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ec:	bf00      	nop
    return;
 80035ee:	e0c2      	b.n	8003776 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	f040 80a1 	bne.w	800373c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	f003 0310 	and.w	r3, r3, #16
 8003600:	2b00      	cmp	r3, #0
 8003602:	f000 809b 	beq.w	800373c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003606:	6a3b      	ldr	r3, [r7, #32]
 8003608:	f003 0310 	and.w	r3, r3, #16
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 8095 	beq.w	800373c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003612:	2300      	movs	r3, #0
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	60fb      	str	r3, [r7, #12]
 8003626:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003632:	2b00      	cmp	r3, #0
 8003634:	d04e      	beq.n	80036d4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003640:	8a3b      	ldrh	r3, [r7, #16]
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 8099 	beq.w	800377a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800364c:	8a3a      	ldrh	r2, [r7, #16]
 800364e:	429a      	cmp	r2, r3
 8003650:	f080 8093 	bcs.w	800377a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	8a3a      	ldrh	r2, [r7, #16]
 8003658:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	2b20      	cmp	r3, #32
 8003662:	d02b      	beq.n	80036bc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003672:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695a      	ldr	r2, [r3, #20]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0201 	bic.w	r2, r2, #1
 8003682:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	695a      	ldr	r2, [r3, #20]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003692:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2220      	movs	r2, #32
 8003698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68da      	ldr	r2, [r3, #12]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0210 	bic.w	r2, r2, #16
 80036b0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fd fe15 	bl	80012e6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	4619      	mov	r1, r3
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7fc fed7 	bl	8000480 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80036d2:	e052      	b.n	800377a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036dc:	b29b      	uxth	r3, r3
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d048      	beq.n	800377e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80036ec:	8a7b      	ldrh	r3, [r7, #18]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d045      	beq.n	800377e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68da      	ldr	r2, [r3, #12]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003700:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695a      	ldr	r2, [r3, #20]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 0201 	bic.w	r2, r2, #1
 8003710:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2220      	movs	r2, #32
 8003716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0210 	bic.w	r2, r2, #16
 800372e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003730:	8a7b      	ldrh	r3, [r7, #18]
 8003732:	4619      	mov	r1, r3
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f7fc fea3 	bl	8000480 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800373a:	e020      	b.n	800377e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800373c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003742:	2b00      	cmp	r3, #0
 8003744:	d008      	beq.n	8003758 <HAL_UART_IRQHandler+0x324>
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f9f2 	bl	8003b3a <UART_Transmit_IT>
    return;
 8003756:	e013      	b.n	8003780 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00e      	beq.n	8003780 <HAL_UART_IRQHandler+0x34c>
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003768:	2b00      	cmp	r3, #0
 800376a:	d009      	beq.n	8003780 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 fa33 	bl	8003bd8 <UART_EndTransmit_IT>
    return;
 8003772:	bf00      	nop
 8003774:	e004      	b.n	8003780 <HAL_UART_IRQHandler+0x34c>
    return;
 8003776:	bf00      	nop
 8003778:	e002      	b.n	8003780 <HAL_UART_IRQHandler+0x34c>
      return;
 800377a:	bf00      	nop
 800377c:	e000      	b.n	8003780 <HAL_UART_IRQHandler+0x34c>
      return;
 800377e:	bf00      	nop
  }
}
 8003780:	3728      	adds	r7, #40	; 0x28
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	08003b13 	.word	0x08003b13

0800378c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	bc80      	pop	{r7}
 800379c:	4770      	bx	lr

0800379e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr

080037b0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr

080037c2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bc80      	pop	{r7}
 80037d2:	4770      	bx	lr

080037d4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0320 	and.w	r3, r3, #32
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d12a      	bne.n	8003846 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003804:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	695a      	ldr	r2, [r3, #20]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0201 	bic.w	r2, r2, #1
 8003814:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695a      	ldr	r2, [r3, #20]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003824:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2220      	movs	r2, #32
 800382a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	2b01      	cmp	r3, #1
 8003834:	d107      	bne.n	8003846 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68da      	ldr	r2, [r3, #12]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0210 	bic.w	r2, r2, #16
 8003844:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	2b01      	cmp	r3, #1
 800384c:	d106      	bne.n	800385c <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003852:	4619      	mov	r1, r3
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f7fc fe13 	bl	8000480 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800385a:	e002      	b.n	8003862 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f7ff ff9e 	bl	800379e <HAL_UART_RxCpltCallback>
}
 8003862:	bf00      	nop
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b084      	sub	sp, #16
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387c:	2b01      	cmp	r3, #1
 800387e:	d108      	bne.n	8003892 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003884:	085b      	lsrs	r3, r3, #1
 8003886:	b29b      	uxth	r3, r3
 8003888:	4619      	mov	r1, r3
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f7fc fdf8 	bl	8000480 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003890:	e002      	b.n	8003898 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f7ff ff8c 	bl	80037b0 <HAL_UART_RxHalfCpltCallback>
}
 8003898:	bf00      	nop
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038bc:	2b00      	cmp	r3, #0
 80038be:	bf14      	ite	ne
 80038c0:	2301      	movne	r3, #1
 80038c2:	2300      	moveq	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b21      	cmp	r3, #33	; 0x21
 80038d2:	d108      	bne.n	80038e6 <UART_DMAError+0x46>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d005      	beq.n	80038e6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	2200      	movs	r2, #0
 80038de:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80038e0:	68b8      	ldr	r0, [r7, #8]
 80038e2:	f000 f8d5 	bl	8003a90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	bf14      	ite	ne
 80038f4:	2301      	movne	r3, #1
 80038f6:	2300      	moveq	r3, #0
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b22      	cmp	r3, #34	; 0x22
 8003906:	d108      	bne.n	800391a <UART_DMAError+0x7a>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d005      	beq.n	800391a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	2200      	movs	r2, #0
 8003912:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003914:	68b8      	ldr	r0, [r7, #8]
 8003916:	f000 f8d0 	bl	8003aba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391e:	f043 0210 	orr.w	r2, r3, #16
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003926:	68b8      	ldr	r0, [r7, #8]
 8003928:	f7ff ff4b 	bl	80037c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800392c:	bf00      	nop
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	603b      	str	r3, [r7, #0]
 8003940:	4613      	mov	r3, r2
 8003942:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003944:	e02c      	b.n	80039a0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394c:	d028      	beq.n	80039a0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d007      	beq.n	8003964 <UART_WaitOnFlagUntilTimeout+0x30>
 8003954:	f7fd fad4 	bl	8000f00 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	429a      	cmp	r2, r3
 8003962:	d21d      	bcs.n	80039a0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68da      	ldr	r2, [r3, #12]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003972:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695a      	ldr	r2, [r3, #20]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0201 	bic.w	r2, r2, #1
 8003982:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2220      	movs	r2, #32
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2220      	movs	r2, #32
 8003990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e00f      	b.n	80039c0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	4013      	ands	r3, r2
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	bf0c      	ite	eq
 80039b0:	2301      	moveq	r3, #1
 80039b2:	2300      	movne	r3, #0
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	461a      	mov	r2, r3
 80039b8:	79fb      	ldrb	r3, [r7, #7]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d0c3      	beq.n	8003946 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	4613      	mov	r3, r2
 80039d4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80039d6:	68ba      	ldr	r2, [r7, #8]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	88fa      	ldrh	r2, [r7, #6]
 80039e0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2222      	movs	r2, #34	; 0x22
 80039ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f4:	4a23      	ldr	r2, [pc, #140]	; (8003a84 <UART_Start_Receive_DMA+0xbc>)
 80039f6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fc:	4a22      	ldr	r2, [pc, #136]	; (8003a88 <UART_Start_Receive_DMA+0xc0>)
 80039fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a04:	4a21      	ldr	r2, [pc, #132]	; (8003a8c <UART_Start_Receive_DMA+0xc4>)
 8003a06:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003a10:	f107 0308 	add.w	r3, r7, #8
 8003a14:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3304      	adds	r3, #4
 8003a20:	4619      	mov	r1, r3
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	88fb      	ldrh	r3, [r7, #6]
 8003a28:	f7fd fbfe 	bl	8001228 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	613b      	str	r3, [r7, #16]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	613b      	str	r3, [r7, #16]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	613b      	str	r3, [r7, #16]
 8003a40:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a58:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	695a      	ldr	r2, [r3, #20]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f042 0201 	orr.w	r2, r2, #1
 8003a68:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	695a      	ldr	r2, [r3, #20]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a78:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3718      	adds	r7, #24
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	080037d5 	.word	0x080037d5
 8003a88:	0800386b 	.word	0x0800386b
 8003a8c:	080038a1 	.word	0x080038a1

08003a90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68da      	ldr	r2, [r3, #12]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003aa6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bc80      	pop	{r7}
 8003ab8:	4770      	bx	lr

08003aba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68da      	ldr	r2, [r3, #12]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ad0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	695a      	ldr	r2, [r3, #20]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0201 	bic.w	r2, r2, #1
 8003ae0:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d107      	bne.n	8003afa <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68da      	ldr	r2, [r3, #12]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 0210 	bic.w	r2, r2, #16
 8003af8:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2220      	movs	r2, #32
 8003afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bc80      	pop	{r7}
 8003b10:	4770      	bx	lr

08003b12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b084      	sub	sp, #16
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f7ff fe48 	bl	80037c2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b32:	bf00      	nop
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b085      	sub	sp, #20
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b21      	cmp	r3, #33	; 0x21
 8003b4c:	d13e      	bne.n	8003bcc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b56:	d114      	bne.n	8003b82 <UART_Transmit_IT+0x48>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d110      	bne.n	8003b82 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
 8003b64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	1c9a      	adds	r2, r3, #2
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	621a      	str	r2, [r3, #32]
 8003b80:	e008      	b.n	8003b94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	1c59      	adds	r1, r3, #1
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6211      	str	r1, [r2, #32]
 8003b8c:	781a      	ldrb	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10f      	bne.n	8003bc8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68da      	ldr	r2, [r3, #12]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bb6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bc6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	e000      	b.n	8003bce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003bcc:	2302      	movs	r3, #2
  }
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bc80      	pop	{r7}
 8003bd6:	4770      	bx	lr

08003bd8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68da      	ldr	r2, [r3, #12]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f7ff fdc7 	bl	800378c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b22      	cmp	r3, #34	; 0x22
 8003c1a:	f040 8099 	bne.w	8003d50 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c26:	d117      	bne.n	8003c58 <UART_Receive_IT+0x50>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d113      	bne.n	8003c58 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c30:	2300      	movs	r3, #0
 8003c32:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c38:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c50:	1c9a      	adds	r2, r3, #2
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	629a      	str	r2, [r3, #40]	; 0x28
 8003c56:	e026      	b.n	8003ca6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5c:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c6a:	d007      	beq.n	8003c7c <UART_Receive_IT+0x74>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10a      	bne.n	8003c8a <UART_Receive_IT+0x82>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d106      	bne.n	8003c8a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	701a      	strb	r2, [r3, #0]
 8003c88:	e008      	b.n	8003c9c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c96:	b2da      	uxtb	r2, r3
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca0:	1c5a      	adds	r2, r3, #1
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d148      	bne.n	8003d4c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0220 	bic.w	r2, r2, #32
 8003cc8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cd8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695a      	ldr	r2, [r3, #20]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0201 	bic.w	r2, r2, #1
 8003ce8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d123      	bne.n	8003d42 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 0210 	bic.w	r2, r2, #16
 8003d0e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0310 	and.w	r3, r3, #16
 8003d1a:	2b10      	cmp	r3, #16
 8003d1c:	d10a      	bne.n	8003d34 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	60fb      	str	r3, [r7, #12]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	60fb      	str	r3, [r7, #12]
 8003d32:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d38:	4619      	mov	r1, r3
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7fc fba0 	bl	8000480 <HAL_UARTEx_RxEventCallback>
 8003d40:	e002      	b.n	8003d48 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7ff fd2b 	bl	800379e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	e002      	b.n	8003d52 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	e000      	b.n	8003d52 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003d50:	2302      	movs	r3, #2
  }
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
	...

08003d5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68da      	ldr	r2, [r3, #12]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689a      	ldr	r2, [r3, #8]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003d96:	f023 030c 	bic.w	r3, r3, #12
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	6812      	ldr	r2, [r2, #0]
 8003d9e:	68b9      	ldr	r1, [r7, #8]
 8003da0:	430b      	orrs	r3, r1
 8003da2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699a      	ldr	r2, [r3, #24]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a2c      	ldr	r2, [pc, #176]	; (8003e70 <UART_SetConfig+0x114>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d103      	bne.n	8003dcc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003dc4:	f7fe fa3a 	bl	800223c <HAL_RCC_GetPCLK2Freq>
 8003dc8:	60f8      	str	r0, [r7, #12]
 8003dca:	e002      	b.n	8003dd2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003dcc:	f7fe fa22 	bl	8002214 <HAL_RCC_GetPCLK1Freq>
 8003dd0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	009a      	lsls	r2, r3, #2
 8003ddc:	441a      	add	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de8:	4a22      	ldr	r2, [pc, #136]	; (8003e74 <UART_SetConfig+0x118>)
 8003dea:	fba2 2303 	umull	r2, r3, r2, r3
 8003dee:	095b      	lsrs	r3, r3, #5
 8003df0:	0119      	lsls	r1, r3, #4
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	4613      	mov	r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	4413      	add	r3, r2
 8003dfa:	009a      	lsls	r2, r3, #2
 8003dfc:	441a      	add	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e08:	4b1a      	ldr	r3, [pc, #104]	; (8003e74 <UART_SetConfig+0x118>)
 8003e0a:	fba3 0302 	umull	r0, r3, r3, r2
 8003e0e:	095b      	lsrs	r3, r3, #5
 8003e10:	2064      	movs	r0, #100	; 0x64
 8003e12:	fb00 f303 	mul.w	r3, r0, r3
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	011b      	lsls	r3, r3, #4
 8003e1a:	3332      	adds	r3, #50	; 0x32
 8003e1c:	4a15      	ldr	r2, [pc, #84]	; (8003e74 <UART_SetConfig+0x118>)
 8003e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e28:	4419      	add	r1, r3
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	009a      	lsls	r2, r3, #2
 8003e34:	441a      	add	r2, r3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e40:	4b0c      	ldr	r3, [pc, #48]	; (8003e74 <UART_SetConfig+0x118>)
 8003e42:	fba3 0302 	umull	r0, r3, r3, r2
 8003e46:	095b      	lsrs	r3, r3, #5
 8003e48:	2064      	movs	r0, #100	; 0x64
 8003e4a:	fb00 f303 	mul.w	r3, r0, r3
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	3332      	adds	r3, #50	; 0x32
 8003e54:	4a07      	ldr	r2, [pc, #28]	; (8003e74 <UART_SetConfig+0x118>)
 8003e56:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5a:	095b      	lsrs	r3, r3, #5
 8003e5c:	f003 020f 	and.w	r2, r3, #15
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	440a      	add	r2, r1
 8003e66:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003e68:	bf00      	nop
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	40013800 	.word	0x40013800
 8003e74:	51eb851f 	.word	0x51eb851f

08003e78 <__libc_init_array>:
 8003e78:	b570      	push	{r4, r5, r6, lr}
 8003e7a:	2500      	movs	r5, #0
 8003e7c:	4e0c      	ldr	r6, [pc, #48]	; (8003eb0 <__libc_init_array+0x38>)
 8003e7e:	4c0d      	ldr	r4, [pc, #52]	; (8003eb4 <__libc_init_array+0x3c>)
 8003e80:	1ba4      	subs	r4, r4, r6
 8003e82:	10a4      	asrs	r4, r4, #2
 8003e84:	42a5      	cmp	r5, r4
 8003e86:	d109      	bne.n	8003e9c <__libc_init_array+0x24>
 8003e88:	f000 f822 	bl	8003ed0 <_init>
 8003e8c:	2500      	movs	r5, #0
 8003e8e:	4e0a      	ldr	r6, [pc, #40]	; (8003eb8 <__libc_init_array+0x40>)
 8003e90:	4c0a      	ldr	r4, [pc, #40]	; (8003ebc <__libc_init_array+0x44>)
 8003e92:	1ba4      	subs	r4, r4, r6
 8003e94:	10a4      	asrs	r4, r4, #2
 8003e96:	42a5      	cmp	r5, r4
 8003e98:	d105      	bne.n	8003ea6 <__libc_init_array+0x2e>
 8003e9a:	bd70      	pop	{r4, r5, r6, pc}
 8003e9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ea0:	4798      	blx	r3
 8003ea2:	3501      	adds	r5, #1
 8003ea4:	e7ee      	b.n	8003e84 <__libc_init_array+0xc>
 8003ea6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003eaa:	4798      	blx	r3
 8003eac:	3501      	adds	r5, #1
 8003eae:	e7f2      	b.n	8003e96 <__libc_init_array+0x1e>
 8003eb0:	08003f14 	.word	0x08003f14
 8003eb4:	08003f14 	.word	0x08003f14
 8003eb8:	08003f14 	.word	0x08003f14
 8003ebc:	08003f18 	.word	0x08003f18

08003ec0 <memset>:
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	4402      	add	r2, r0
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d100      	bne.n	8003eca <memset+0xa>
 8003ec8:	4770      	bx	lr
 8003eca:	f803 1b01 	strb.w	r1, [r3], #1
 8003ece:	e7f9      	b.n	8003ec4 <memset+0x4>

08003ed0 <_init>:
 8003ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ed2:	bf00      	nop
 8003ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ed6:	bc08      	pop	{r3}
 8003ed8:	469e      	mov	lr, r3
 8003eda:	4770      	bx	lr

08003edc <_fini>:
 8003edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ede:	bf00      	nop
 8003ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ee2:	bc08      	pop	{r3}
 8003ee4:	469e      	mov	lr, r3
 8003ee6:	4770      	bx	lr
