
MERC_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b20  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003c30  08003c30  00013c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c5c  08003c5c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c5c  08003c5c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c5c  08003c5c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c5c  08003c5c  00013c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c60  08003c60  00013c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003c64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  2000000c  08003c70  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08003c70  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a8e4  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001aa4  00000000  00000000  0002a919  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c50  00000000  00000000  0002c3c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b98  00000000  00000000  0002d010  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016fe9  00000000  00000000  0002dba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009bba  00000000  00000000  00044b91  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086b16  00000000  00000000  0004e74b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d5261  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003414  00000000  00000000  000d52dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08003c18 	.word	0x08003c18

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08003c18 	.word	0x08003c18

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <ctrl_DirMotor>:
static uint8_t dir_1 = 0;
static uint8_t dir_2 = 0;
static uint8_t dir_3 = 0;
static uint8_t dir_4 = 0;

void ctrl_DirMotor(uint8_t rxCtrlBuffer){
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
	 dir_1 = (rxCtrlBuffer & 0xC0) >> 6;
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	099b      	lsrs	r3, r3, #6
 800094a:	b2da      	uxtb	r2, r3
 800094c:	4b66      	ldr	r3, [pc, #408]	; (8000ae8 <ctrl_DirMotor+0x1ac>)
 800094e:	701a      	strb	r2, [r3, #0]
	 dir_2 = (rxCtrlBuffer & 0x30) >> 4;
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	111b      	asrs	r3, r3, #4
 8000954:	b2db      	uxtb	r3, r3
 8000956:	f003 0303 	and.w	r3, r3, #3
 800095a:	b2da      	uxtb	r2, r3
 800095c:	4b63      	ldr	r3, [pc, #396]	; (8000aec <ctrl_DirMotor+0x1b0>)
 800095e:	701a      	strb	r2, [r3, #0]
	 dir_3 = (rxCtrlBuffer & 0x0C) >> 2;
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	109b      	asrs	r3, r3, #2
 8000964:	b2db      	uxtb	r3, r3
 8000966:	f003 0303 	and.w	r3, r3, #3
 800096a:	b2da      	uxtb	r2, r3
 800096c:	4b60      	ldr	r3, [pc, #384]	; (8000af0 <ctrl_DirMotor+0x1b4>)
 800096e:	701a      	strb	r2, [r3, #0]
	 dir_4 = (rxCtrlBuffer & 0x03) >> 0;
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	f003 0303 	and.w	r3, r3, #3
 8000976:	b2da      	uxtb	r2, r3
 8000978:	4b5e      	ldr	r3, [pc, #376]	; (8000af4 <ctrl_DirMotor+0x1b8>)
 800097a:	701a      	strb	r2, [r3, #0]

	 // DIRECT MOTOR 1
	 if(dir_1 == 0x02){
 800097c:	4b5a      	ldr	r3, [pc, #360]	; (8000ae8 <ctrl_DirMotor+0x1ac>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b02      	cmp	r3, #2
 8000982:	d10c      	bne.n	800099e <ctrl_DirMotor+0x62>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, SET);
 8000984:	2201      	movs	r2, #1
 8000986:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800098a:	485b      	ldr	r0, [pc, #364]	; (8000af8 <ctrl_DirMotor+0x1bc>)
 800098c:	f001 fc2e 	bl	80021ec <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000996:	4858      	ldr	r0, [pc, #352]	; (8000af8 <ctrl_DirMotor+0x1bc>)
 8000998:	f001 fc28 	bl	80021ec <HAL_GPIO_WritePin>
 800099c:	e01c      	b.n	80009d8 <ctrl_DirMotor+0x9c>
	 }
	 else if (dir_1 == 0x01) {
 800099e:	4b52      	ldr	r3, [pc, #328]	; (8000ae8 <ctrl_DirMotor+0x1ac>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d10c      	bne.n	80009c0 <ctrl_DirMotor+0x84>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009ac:	4852      	ldr	r0, [pc, #328]	; (8000af8 <ctrl_DirMotor+0x1bc>)
 80009ae:	f001 fc1d 	bl	80021ec <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, SET);
 80009b2:	2201      	movs	r2, #1
 80009b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009b8:	484f      	ldr	r0, [pc, #316]	; (8000af8 <ctrl_DirMotor+0x1bc>)
 80009ba:	f001 fc17 	bl	80021ec <HAL_GPIO_WritePin>
 80009be:	e00b      	b.n	80009d8 <ctrl_DirMotor+0x9c>
	 }
	 else{
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009c6:	484c      	ldr	r0, [pc, #304]	; (8000af8 <ctrl_DirMotor+0x1bc>)
 80009c8:	f001 fc10 	bl	80021ec <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009d2:	4849      	ldr	r0, [pc, #292]	; (8000af8 <ctrl_DirMotor+0x1bc>)
 80009d4:	f001 fc0a 	bl	80021ec <HAL_GPIO_WritePin>
	 }

	 // DIRECT MOTOR 2
	 if(dir_2 == 0x02){
 80009d8:	4b44      	ldr	r3, [pc, #272]	; (8000aec <ctrl_DirMotor+0x1b0>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b02      	cmp	r3, #2
 80009de:	d10c      	bne.n	80009fa <ctrl_DirMotor+0xbe>
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, SET);
 80009e0:	2201      	movs	r2, #1
 80009e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009e6:	4845      	ldr	r0, [pc, #276]	; (8000afc <ctrl_DirMotor+0x1c0>)
 80009e8:	f001 fc00 	bl	80021ec <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009f2:	4842      	ldr	r0, [pc, #264]	; (8000afc <ctrl_DirMotor+0x1c0>)
 80009f4:	f001 fbfa 	bl	80021ec <HAL_GPIO_WritePin>
 80009f8:	e01c      	b.n	8000a34 <ctrl_DirMotor+0xf8>
	 }
	 else if (dir_2 == 0x01) {
 80009fa:	4b3c      	ldr	r3, [pc, #240]	; (8000aec <ctrl_DirMotor+0x1b0>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d10c      	bne.n	8000a1c <ctrl_DirMotor+0xe0>
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a08:	483c      	ldr	r0, [pc, #240]	; (8000afc <ctrl_DirMotor+0x1c0>)
 8000a0a:	f001 fbef 	bl	80021ec <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, SET);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a14:	4839      	ldr	r0, [pc, #228]	; (8000afc <ctrl_DirMotor+0x1c0>)
 8000a16:	f001 fbe9 	bl	80021ec <HAL_GPIO_WritePin>
 8000a1a:	e00b      	b.n	8000a34 <ctrl_DirMotor+0xf8>
	 }
	 else{
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a22:	4836      	ldr	r0, [pc, #216]	; (8000afc <ctrl_DirMotor+0x1c0>)
 8000a24:	f001 fbe2 	bl	80021ec <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a2e:	4833      	ldr	r0, [pc, #204]	; (8000afc <ctrl_DirMotor+0x1c0>)
 8000a30:	f001 fbdc 	bl	80021ec <HAL_GPIO_WritePin>
	 }

	 // DIRECT MOTOR 3
	 if(dir_3 == 0x02){
 8000a34:	4b2e      	ldr	r3, [pc, #184]	; (8000af0 <ctrl_DirMotor+0x1b4>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b02      	cmp	r3, #2
 8000a3a:	d10a      	bne.n	8000a52 <ctrl_DirMotor+0x116>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, SET);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2101      	movs	r1, #1
 8000a40:	482d      	ldr	r0, [pc, #180]	; (8000af8 <ctrl_DirMotor+0x1bc>)
 8000a42:	f001 fbd3 	bl	80021ec <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2102      	movs	r1, #2
 8000a4a:	482b      	ldr	r0, [pc, #172]	; (8000af8 <ctrl_DirMotor+0x1bc>)
 8000a4c:	f001 fbce 	bl	80021ec <HAL_GPIO_WritePin>
 8000a50:	e018      	b.n	8000a84 <ctrl_DirMotor+0x148>
	 }
	 else if (dir_3 == 0x01) {
 8000a52:	4b27      	ldr	r3, [pc, #156]	; (8000af0 <ctrl_DirMotor+0x1b4>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d10a      	bne.n	8000a70 <ctrl_DirMotor+0x134>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	4826      	ldr	r0, [pc, #152]	; (8000af8 <ctrl_DirMotor+0x1bc>)
 8000a60:	f001 fbc4 	bl	80021ec <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2102      	movs	r1, #2
 8000a68:	4823      	ldr	r0, [pc, #140]	; (8000af8 <ctrl_DirMotor+0x1bc>)
 8000a6a:	f001 fbbf 	bl	80021ec <HAL_GPIO_WritePin>
 8000a6e:	e009      	b.n	8000a84 <ctrl_DirMotor+0x148>
	 }
	 else{
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2101      	movs	r1, #1
 8000a74:	4820      	ldr	r0, [pc, #128]	; (8000af8 <ctrl_DirMotor+0x1bc>)
 8000a76:	f001 fbb9 	bl	80021ec <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, RESET);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2102      	movs	r1, #2
 8000a7e:	481e      	ldr	r0, [pc, #120]	; (8000af8 <ctrl_DirMotor+0x1bc>)
 8000a80:	f001 fbb4 	bl	80021ec <HAL_GPIO_WritePin>
	 }

	 // DIRECT MOTOR 4
	 if(dir_4 == 0x02){
 8000a84:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <ctrl_DirMotor+0x1b8>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d10c      	bne.n	8000aa6 <ctrl_DirMotor+0x16a>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a92:	4819      	ldr	r0, [pc, #100]	; (8000af8 <ctrl_DirMotor+0x1bc>)
 8000a94:	f001 fbaa 	bl	80021ec <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 8000a98:	2200      	movs	r2, #0
 8000a9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a9e:	4816      	ldr	r0, [pc, #88]	; (8000af8 <ctrl_DirMotor+0x1bc>)
 8000aa0:	f001 fba4 	bl	80021ec <HAL_GPIO_WritePin>
	 }
	 else{
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
	 }
}
 8000aa4:	e01c      	b.n	8000ae0 <ctrl_DirMotor+0x1a4>
	 else if (dir_4 == 0x01) {
 8000aa6:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <ctrl_DirMotor+0x1b8>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d10c      	bne.n	8000ac8 <ctrl_DirMotor+0x18c>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ab4:	4810      	ldr	r0, [pc, #64]	; (8000af8 <ctrl_DirMotor+0x1bc>)
 8000ab6:	f001 fb99 	bl	80021ec <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, SET);
 8000aba:	2201      	movs	r2, #1
 8000abc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac0:	480d      	ldr	r0, [pc, #52]	; (8000af8 <ctrl_DirMotor+0x1bc>)
 8000ac2:	f001 fb93 	bl	80021ec <HAL_GPIO_WritePin>
}
 8000ac6:	e00b      	b.n	8000ae0 <ctrl_DirMotor+0x1a4>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ace:	480a      	ldr	r0, [pc, #40]	; (8000af8 <ctrl_DirMotor+0x1bc>)
 8000ad0:	f001 fb8c 	bl	80021ec <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ada:	4807      	ldr	r0, [pc, #28]	; (8000af8 <ctrl_DirMotor+0x1bc>)
 8000adc:	f001 fb86 	bl	80021ec <HAL_GPIO_WritePin>
}
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000028 	.word	0x20000028
 8000aec:	20000029 	.word	0x20000029
 8000af0:	2000002a 	.word	0x2000002a
 8000af4:	2000002b 	.word	0x2000002b
 8000af8:	40010c00 	.word	0x40010c00
 8000afc:	40011000 	.word	0x40011000

08000b00 <prepareBuffer>:
static void MX_TIM4_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_IWDG_Init(void);
/* USER CODE BEGIN PFP */

void prepareBuffer(uint8_t* speedBuffer, uint8_t* txSpeedBuffer){
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
	*txSpeedBuffer = 0x55;
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	2255      	movs	r2, #85	; 0x55
 8000b0e:	701a      	strb	r2, [r3, #0]
	txSpeedBuffer++;
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	3301      	adds	r3, #1
 8000b14:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < 8; i++){
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	e00c      	b.n	8000b36 <prepareBuffer+0x36>
		*txSpeedBuffer = *speedBuffer;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	781a      	ldrb	r2, [r3, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	701a      	strb	r2, [r3, #0]
		txSpeedBuffer++;
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	3301      	adds	r3, #1
 8000b28:	603b      	str	r3, [r7, #0]
		speedBuffer++;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < 8; i++){
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	3301      	adds	r3, #1
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	2b07      	cmp	r3, #7
 8000b3a:	ddef      	ble.n	8000b1c <prepareBuffer+0x1c>
	}
	*txSpeedBuffer = 0xAA;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	22aa      	movs	r2, #170	; 0xaa
 8000b40:	701a      	strb	r2, [r3, #0]
}
 8000b42:	bf00      	nop
 8000b44:	3714      	adds	r7, #20
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr

08000b4c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	460b      	mov	r3, r1
 8000b56:	807b      	strh	r3, [r7, #2]
     HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxCtrlBuffer, RX_CTRL_SIZE);
 8000b58:	2202      	movs	r2, #2
 8000b5a:	4914      	ldr	r1, [pc, #80]	; (8000bac <HAL_UARTEx_RxEventCallback+0x60>)
 8000b5c:	4814      	ldr	r0, [pc, #80]	; (8000bb0 <HAL_UARTEx_RxEventCallback+0x64>)
 8000b5e:	f002 fabe 	bl	80030de <HAL_UARTEx_ReceiveToIdle_DMA>
     __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000b62:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <HAL_UARTEx_RxEventCallback+0x68>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <HAL_UARTEx_RxEventCallback+0x68>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f022 0204 	bic.w	r2, r2, #4
 8000b70:	601a      	str	r2, [r3, #0]
     if(rxCtrlBuffer[0]==0xFF){
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <HAL_UARTEx_RxEventCallback+0x60>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	2bff      	cmp	r3, #255	; 0xff
 8000b78:	d10e      	bne.n	8000b98 <HAL_UARTEx_RxEventCallback+0x4c>
    	 ctrl_DirMotor(rxCtrlBuffer[1]);
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <HAL_UARTEx_RxEventCallback+0x60>)
 8000b7c:	785b      	ldrb	r3, [r3, #1]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fedc 	bl	800093c <ctrl_DirMotor>
    	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, SET); 		// set flag connected rx
 8000b84:	2201      	movs	r2, #1
 8000b86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b8a:	480b      	ldr	r0, [pc, #44]	; (8000bb8 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000b8c:	f001 fb2e 	bl	80021ec <HAL_GPIO_WritePin>
    	 HAL_IWDG_Refresh(&hiwdg);
 8000b90:	480a      	ldr	r0, [pc, #40]	; (8000bbc <HAL_UARTEx_RxEventCallback+0x70>)
 8000b92:	f001 fb85 	bl	80022a0 <HAL_IWDG_Refresh>
     }
     else{
    	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);		// clear flag connected rx
     }
}
 8000b96:	e005      	b.n	8000ba4 <HAL_UARTEx_RxEventCallback+0x58>
    	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, RESET);		// clear flag connected rx
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b9e:	4806      	ldr	r0, [pc, #24]	; (8000bb8 <HAL_UARTEx_RxEventCallback+0x6c>)
 8000ba0:	f001 fb24 	bl	80021ec <HAL_GPIO_WritePin>
}
 8000ba4:	bf00      	nop
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000038 	.word	0x20000038
 8000bb0:	200001bc 	.word	0x200001bc
 8000bb4:	20000044 	.word	0x20000044
 8000bb8:	40010800 	.word	0x40010800
 8000bbc:	200000d0 	.word	0x200000d0

08000bc0 <read_Speed>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int16_t read_Speed(TIM_HandleTypeDef *htim){
 8000bc0:	b590      	push	{r4, r7, lr}
 8000bc2:	b087      	sub	sp, #28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
	static uint16_t preCnt_1 = 0;
	static uint16_t preCnt_2 = 0;
	static uint16_t preCnt_3 = 0;
	static uint16_t preCnt_4 = 0;
	int16_t speed = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	82fb      	strh	r3, [r7, #22]

	if(htim->Instance == htim1.Instance){
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4b4b      	ldr	r3, [pc, #300]	; (8000d00 <read_Speed+0x140>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d11d      	bne.n	8000c14 <read_Speed+0x54>
		uint16_t cnt_1 = __HAL_TIM_GET_COUNTER(&htim1);
 8000bd8:	4b49      	ldr	r3, [pc, #292]	; (8000d00 <read_Speed+0x140>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bde:	81fb      	strh	r3, [r7, #14]
		speed = (cnt_1 - preCnt_1)*4.2;
 8000be0:	89fb      	ldrh	r3, [r7, #14]
 8000be2:	4a48      	ldr	r2, [pc, #288]	; (8000d04 <read_Speed+0x144>)
 8000be4:	8812      	ldrh	r2, [r2, #0]
 8000be6:	1a9b      	subs	r3, r3, r2
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff fc03 	bl	80003f4 <__aeabi_i2d>
 8000bee:	a342      	add	r3, pc, #264	; (adr r3, 8000cf8 <read_Speed+0x138>)
 8000bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf4:	f7ff fc68 	bl	80004c8 <__aeabi_dmul>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	460c      	mov	r4, r1
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	4621      	mov	r1, r4
 8000c00:	f7ff fe74 	bl	80008ec <__aeabi_d2iz>
 8000c04:	4603      	mov	r3, r0
 8000c06:	82fb      	strh	r3, [r7, #22]
		preCnt_1 = cnt_1;
 8000c08:	4a3e      	ldr	r2, [pc, #248]	; (8000d04 <read_Speed+0x144>)
 8000c0a:	89fb      	ldrh	r3, [r7, #14]
 8000c0c:	8013      	strh	r3, [r2, #0]
		return speed;
 8000c0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c12:	e06b      	b.n	8000cec <read_Speed+0x12c>
	}
	else if(htim->Instance == htim2.Instance){
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b3b      	ldr	r3, [pc, #236]	; (8000d08 <read_Speed+0x148>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	d11d      	bne.n	8000c5c <read_Speed+0x9c>
		uint16_t cnt_2 = __HAL_TIM_GET_COUNTER(&htim2);
 8000c20:	4b39      	ldr	r3, [pc, #228]	; (8000d08 <read_Speed+0x148>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c26:	823b      	strh	r3, [r7, #16]
		speed = (cnt_2 - preCnt_2)*4.2;
 8000c28:	8a3b      	ldrh	r3, [r7, #16]
 8000c2a:	4a38      	ldr	r2, [pc, #224]	; (8000d0c <read_Speed+0x14c>)
 8000c2c:	8812      	ldrh	r2, [r2, #0]
 8000c2e:	1a9b      	subs	r3, r3, r2
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fbdf 	bl	80003f4 <__aeabi_i2d>
 8000c36:	a330      	add	r3, pc, #192	; (adr r3, 8000cf8 <read_Speed+0x138>)
 8000c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c3c:	f7ff fc44 	bl	80004c8 <__aeabi_dmul>
 8000c40:	4603      	mov	r3, r0
 8000c42:	460c      	mov	r4, r1
 8000c44:	4618      	mov	r0, r3
 8000c46:	4621      	mov	r1, r4
 8000c48:	f7ff fe50 	bl	80008ec <__aeabi_d2iz>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	82fb      	strh	r3, [r7, #22]
		preCnt_2 = cnt_2;
 8000c50:	4a2e      	ldr	r2, [pc, #184]	; (8000d0c <read_Speed+0x14c>)
 8000c52:	8a3b      	ldrh	r3, [r7, #16]
 8000c54:	8013      	strh	r3, [r2, #0]
		return speed;
 8000c56:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000c5a:	e047      	b.n	8000cec <read_Speed+0x12c>
	}
	else if(htim->Instance == htim3.Instance){
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b2b      	ldr	r3, [pc, #172]	; (8000d10 <read_Speed+0x150>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d11d      	bne.n	8000ca4 <read_Speed+0xe4>
		uint16_t cnt_3 = __HAL_TIM_GET_COUNTER(&htim3);
 8000c68:	4b29      	ldr	r3, [pc, #164]	; (8000d10 <read_Speed+0x150>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c6e:	827b      	strh	r3, [r7, #18]
		speed = (cnt_3 - preCnt_3)*4.2;
 8000c70:	8a7b      	ldrh	r3, [r7, #18]
 8000c72:	4a28      	ldr	r2, [pc, #160]	; (8000d14 <read_Speed+0x154>)
 8000c74:	8812      	ldrh	r2, [r2, #0]
 8000c76:	1a9b      	subs	r3, r3, r2
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fbbb 	bl	80003f4 <__aeabi_i2d>
 8000c7e:	a31e      	add	r3, pc, #120	; (adr r3, 8000cf8 <read_Speed+0x138>)
 8000c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c84:	f7ff fc20 	bl	80004c8 <__aeabi_dmul>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	460c      	mov	r4, r1
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	4621      	mov	r1, r4
 8000c90:	f7ff fe2c 	bl	80008ec <__aeabi_d2iz>
 8000c94:	4603      	mov	r3, r0
 8000c96:	82fb      	strh	r3, [r7, #22]
		preCnt_3 = cnt_3;
 8000c98:	4a1e      	ldr	r2, [pc, #120]	; (8000d14 <read_Speed+0x154>)
 8000c9a:	8a7b      	ldrh	r3, [r7, #18]
 8000c9c:	8013      	strh	r3, [r2, #0]
		return speed;
 8000c9e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ca2:	e023      	b.n	8000cec <read_Speed+0x12c>
	}
	else if(htim->Instance == htim4.Instance){
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <read_Speed+0x158>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d11d      	bne.n	8000cec <read_Speed+0x12c>
		uint16_t cnt_4 = __HAL_TIM_GET_COUNTER(&htim4);
 8000cb0:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <read_Speed+0x158>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb6:	82bb      	strh	r3, [r7, #20]
		speed = (cnt_4 - preCnt_4)*4.2;
 8000cb8:	8abb      	ldrh	r3, [r7, #20]
 8000cba:	4a18      	ldr	r2, [pc, #96]	; (8000d1c <read_Speed+0x15c>)
 8000cbc:	8812      	ldrh	r2, [r2, #0]
 8000cbe:	1a9b      	subs	r3, r3, r2
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fb97 	bl	80003f4 <__aeabi_i2d>
 8000cc6:	a30c      	add	r3, pc, #48	; (adr r3, 8000cf8 <read_Speed+0x138>)
 8000cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ccc:	f7ff fbfc 	bl	80004c8 <__aeabi_dmul>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	460c      	mov	r4, r1
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	4621      	mov	r1, r4
 8000cd8:	f7ff fe08 	bl	80008ec <__aeabi_d2iz>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	82fb      	strh	r3, [r7, #22]
		preCnt_4 = cnt_4;
 8000ce0:	4a0e      	ldr	r2, [pc, #56]	; (8000d1c <read_Speed+0x15c>)
 8000ce2:	8abb      	ldrh	r3, [r7, #20]
 8000ce4:	8013      	strh	r3, [r2, #0]
		return speed;
 8000ce6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000cea:	e7ff      	b.n	8000cec <read_Speed+0x12c>
	}
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	371c      	adds	r7, #28
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd90      	pop	{r4, r7, pc}
 8000cf4:	f3af 8000 	nop.w
 8000cf8:	cccccccd 	.word	0xcccccccd
 8000cfc:	4010cccc 	.word	0x4010cccc
 8000d00:	2000012c 	.word	0x2000012c
 8000d04:	2000003a 	.word	0x2000003a
 8000d08:	20000174 	.word	0x20000174
 8000d0c:	2000003c 	.word	0x2000003c
 8000d10:	200000dc 	.word	0x200000dc
 8000d14:	2000003e 	.word	0x2000003e
 8000d18:	20000088 	.word	0x20000088
 8000d1c:	20000040 	.word	0x20000040

08000d20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d24:	f000 fcd8 	bl	80016d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d28:	f000 f874 	bl	8000e14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d2c:	f000 fa70 	bl	8001210 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d30:	f000 fa50 	bl	80011d4 <MX_DMA_Init>
  MX_TIM1_Init();
 8000d34:	f000 f8d0 	bl	8000ed8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d38:	f000 f926 	bl	8000f88 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d3c:	f000 f978 	bl	8001030 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d40:	f000 f9ca 	bl	80010d8 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000d44:	f000 fa1c 	bl	8001180 <MX_USART2_UART_Init>
  MX_IWDG_Init();
 8000d48:	f000 f8ac 	bl	8000ea4 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rxCtrlBuffer, RX_CTRL_SIZE);
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	4927      	ldr	r1, [pc, #156]	; (8000dec <main+0xcc>)
 8000d50:	4827      	ldr	r0, [pc, #156]	; (8000df0 <main+0xd0>)
 8000d52:	f002 f9c4 	bl	80030de <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8000d56:	4b27      	ldr	r3, [pc, #156]	; (8000df4 <main+0xd4>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4b25      	ldr	r3, [pc, #148]	; (8000df4 <main+0xd4>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f022 0204 	bic.w	r2, r2, #4
 8000d64:	601a      	str	r2, [r3, #0]

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1|TIM_CHANNEL_2);
 8000d66:	2104      	movs	r1, #4
 8000d68:	4823      	ldr	r0, [pc, #140]	; (8000df8 <main+0xd8>)
 8000d6a:	f001 ff67 	bl	8002c3c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1|TIM_CHANNEL_2);
 8000d6e:	2104      	movs	r1, #4
 8000d70:	4822      	ldr	r0, [pc, #136]	; (8000dfc <main+0xdc>)
 8000d72:	f001 ff63 	bl	8002c3c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1|TIM_CHANNEL_2);
 8000d76:	2104      	movs	r1, #4
 8000d78:	4821      	ldr	r0, [pc, #132]	; (8000e00 <main+0xe0>)
 8000d7a:	f001 ff5f 	bl	8002c3c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1|TIM_CHANNEL_2);
 8000d7e:	2104      	movs	r1, #4
 8000d80:	4820      	ldr	r0, [pc, #128]	; (8000e04 <main+0xe4>)
 8000d82:	f001 ff5b 	bl	8002c3c <HAL_TIM_Encoder_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  speedBuffer.speed_1 = read_Speed(&htim1);
 8000d86:	481c      	ldr	r0, [pc, #112]	; (8000df8 <main+0xd8>)
 8000d88:	f7ff ff1a 	bl	8000bc0 <read_Speed>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	461a      	mov	r2, r3
 8000d90:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <main+0xe8>)
 8000d92:	801a      	strh	r2, [r3, #0]
	  speedBuffer.speed_2 = read_Speed(&htim2);
 8000d94:	4819      	ldr	r0, [pc, #100]	; (8000dfc <main+0xdc>)
 8000d96:	f7ff ff13 	bl	8000bc0 <read_Speed>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <main+0xe8>)
 8000da0:	805a      	strh	r2, [r3, #2]
	  speedBuffer.speed_3 = read_Speed(&htim3);
 8000da2:	4817      	ldr	r0, [pc, #92]	; (8000e00 <main+0xe0>)
 8000da4:	f7ff ff0c 	bl	8000bc0 <read_Speed>
 8000da8:	4603      	mov	r3, r0
 8000daa:	461a      	mov	r2, r3
 8000dac:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <main+0xe8>)
 8000dae:	809a      	strh	r2, [r3, #4]
	  speedBuffer.speed_4 = read_Speed(&htim4);
 8000db0:	4814      	ldr	r0, [pc, #80]	; (8000e04 <main+0xe4>)
 8000db2:	f7ff ff05 	bl	8000bc0 <read_Speed>
 8000db6:	4603      	mov	r3, r0
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <main+0xe8>)
 8000dbc:	80da      	strh	r2, [r3, #6]
	  HAL_Delay(10);
 8000dbe:	200a      	movs	r0, #10
 8000dc0:	f000 fcec 	bl	800179c <HAL_Delay>

	  prepareBuffer(&speedBuffer, &txSpeedBuffer);
 8000dc4:	4911      	ldr	r1, [pc, #68]	; (8000e0c <main+0xec>)
 8000dc6:	4810      	ldr	r0, [pc, #64]	; (8000e08 <main+0xe8>)
 8000dc8:	f7ff fe9a 	bl	8000b00 <prepareBuffer>

	  if (HAL_UART_Transmit(&huart2, txSpeedBuffer, TX_SPEED_SIZE, 10) != HAL_OK)
 8000dcc:	230a      	movs	r3, #10
 8000dce:	220a      	movs	r2, #10
 8000dd0:	490e      	ldr	r1, [pc, #56]	; (8000e0c <main+0xec>)
 8000dd2:	4807      	ldr	r0, [pc, #28]	; (8000df0 <main+0xd0>)
 8000dd4:	f002 f8f1 	bl	8002fba <HAL_UART_Transmit>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d0d3      	beq.n	8000d86 <main+0x66>
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 8000dde:	2200      	movs	r2, #0
 8000de0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000de4:	480a      	ldr	r0, [pc, #40]	; (8000e10 <main+0xf0>)
 8000de6:	f001 fa01 	bl	80021ec <HAL_GPIO_WritePin>
	  speedBuffer.speed_1 = read_Speed(&htim1);
 8000dea:	e7cc      	b.n	8000d86 <main+0x66>
 8000dec:	20000038 	.word	0x20000038
 8000df0:	200001bc 	.word	0x200001bc
 8000df4:	20000044 	.word	0x20000044
 8000df8:	2000012c 	.word	0x2000012c
 8000dfc:	20000174 	.word	0x20000174
 8000e00:	200000dc 	.word	0x200000dc
 8000e04:	20000088 	.word	0x20000088
 8000e08:	20000124 	.word	0x20000124
 8000e0c:	2000002c 	.word	0x2000002c
 8000e10:	40011000 	.word	0x40011000

08000e14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b090      	sub	sp, #64	; 0x40
 8000e18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1a:	f107 0318 	add.w	r3, r7, #24
 8000e1e:	2228      	movs	r2, #40	; 0x28
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f002 fef0 	bl	8003c08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
 8000e34:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000e36:	2309      	movs	r3, #9
 8000e38:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e3e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e40:	2300      	movs	r3, #0
 8000e42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e44:	2301      	movs	r3, #1
 8000e46:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e56:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e5c:	f107 0318 	add.w	r3, r7, #24
 8000e60:	4618      	mov	r0, r3
 8000e62:	f001 fa2d 	bl	80022c0 <HAL_RCC_OscConfig>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000e6c:	f000 fa56 	bl	800131c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e70:	230f      	movs	r3, #15
 8000e72:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e74:	2302      	movs	r3, #2
 8000e76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	2102      	movs	r1, #2
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f001 fc98 	bl	80027c0 <HAL_RCC_ClockConfig>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000e96:	f000 fa41 	bl	800131c <Error_Handler>
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	3740      	adds	r7, #64	; 0x40
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000ea8:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <MX_IWDG_Init+0x2c>)
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ed4 <MX_IWDG_Init+0x30>)
 8000eac:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000eae:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <MX_IWDG_Init+0x2c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 149;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <MX_IWDG_Init+0x2c>)
 8000eb6:	2295      	movs	r2, #149	; 0x95
 8000eb8:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000eba:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <MX_IWDG_Init+0x2c>)
 8000ebc:	f001 f9ae 	bl	800221c <HAL_IWDG_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_IWDG_Init+0x26>
  {
    Error_Handler();
 8000ec6:	f000 fa29 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200000d0 	.word	0x200000d0
 8000ed4:	40003000 	.word	0x40003000

08000ed8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b08c      	sub	sp, #48	; 0x30
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ede:	f107 030c 	add.w	r3, r7, #12
 8000ee2:	2224      	movs	r2, #36	; 0x24
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f002 fe8e 	bl	8003c08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ef4:	4b22      	ldr	r3, [pc, #136]	; (8000f80 <MX_TIM1_Init+0xa8>)
 8000ef6:	4a23      	ldr	r2, [pc, #140]	; (8000f84 <MX_TIM1_Init+0xac>)
 8000ef8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000efa:	4b21      	ldr	r3, [pc, #132]	; (8000f80 <MX_TIM1_Init+0xa8>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f00:	4b1f      	ldr	r3, [pc, #124]	; (8000f80 <MX_TIM1_Init+0xa8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000f06:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <MX_TIM1_Init+0xa8>)
 8000f08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f0c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f0e:	4b1c      	ldr	r3, [pc, #112]	; (8000f80 <MX_TIM1_Init+0xa8>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f14:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <MX_TIM1_Init+0xa8>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f1a:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <MX_TIM1_Init+0xa8>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f20:	2301      	movs	r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f24:	2300      	movs	r3, #0
 8000f26:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f34:	2300      	movs	r3, #0
 8000f36:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f40:	2300      	movs	r3, #0
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480d      	ldr	r0, [pc, #52]	; (8000f80 <MX_TIM1_Init+0xa8>)
 8000f4c:	f001 fdd4 	bl	8002af8 <HAL_TIM_Encoder_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000f56:	f000 f9e1 	bl	800131c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	4619      	mov	r1, r3
 8000f66:	4806      	ldr	r0, [pc, #24]	; (8000f80 <MX_TIM1_Init+0xa8>)
 8000f68:	f001 ff7c 	bl	8002e64 <HAL_TIMEx_MasterConfigSynchronization>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000f72:	f000 f9d3 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	3730      	adds	r7, #48	; 0x30
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	2000012c 	.word	0x2000012c
 8000f84:	40012c00 	.word	0x40012c00

08000f88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08c      	sub	sp, #48	; 0x30
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f8e:	f107 030c 	add.w	r3, r7, #12
 8000f92:	2224      	movs	r2, #36	; 0x24
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f002 fe36 	bl	8003c08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fa4:	4b21      	ldr	r3, [pc, #132]	; (800102c <MX_TIM2_Init+0xa4>)
 8000fa6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000faa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000fac:	4b1f      	ldr	r3, [pc, #124]	; (800102c <MX_TIM2_Init+0xa4>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb2:	4b1e      	ldr	r3, [pc, #120]	; (800102c <MX_TIM2_Init+0xa4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000fb8:	4b1c      	ldr	r3, [pc, #112]	; (800102c <MX_TIM2_Init+0xa4>)
 8000fba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fbe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc0:	4b1a      	ldr	r3, [pc, #104]	; (800102c <MX_TIM2_Init+0xa4>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc6:	4b19      	ldr	r3, [pc, #100]	; (800102c <MX_TIM2_Init+0xa4>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	480d      	ldr	r0, [pc, #52]	; (800102c <MX_TIM2_Init+0xa4>)
 8000ff8:	f001 fd7e 	bl	8002af8 <HAL_TIM_Encoder_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001002:	f000 f98b 	bl	800131c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001006:	2300      	movs	r3, #0
 8001008:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	4619      	mov	r1, r3
 8001012:	4806      	ldr	r0, [pc, #24]	; (800102c <MX_TIM2_Init+0xa4>)
 8001014:	f001 ff26 	bl	8002e64 <HAL_TIMEx_MasterConfigSynchronization>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800101e:	f000 f97d 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001022:	bf00      	nop
 8001024:	3730      	adds	r7, #48	; 0x30
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000174 	.word	0x20000174

08001030 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08c      	sub	sp, #48	; 0x30
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001036:	f107 030c 	add.w	r3, r7, #12
 800103a:	2224      	movs	r2, #36	; 0x24
 800103c:	2100      	movs	r1, #0
 800103e:	4618      	mov	r0, r3
 8001040:	f002 fde2 	bl	8003c08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800104c:	4b20      	ldr	r3, [pc, #128]	; (80010d0 <MX_TIM3_Init+0xa0>)
 800104e:	4a21      	ldr	r2, [pc, #132]	; (80010d4 <MX_TIM3_Init+0xa4>)
 8001050:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001052:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <MX_TIM3_Init+0xa0>)
 8001054:	2200      	movs	r2, #0
 8001056:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001058:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <MX_TIM3_Init+0xa0>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800105e:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <MX_TIM3_Init+0xa0>)
 8001060:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001064:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001066:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <MX_TIM3_Init+0xa0>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800106c:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <MX_TIM3_Init+0xa0>)
 800106e:	2200      	movs	r2, #0
 8001070:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001072:	2301      	movs	r3, #1
 8001074:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800107a:	2301      	movs	r3, #1
 800107c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800107e:	2300      	movs	r3, #0
 8001080:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001086:	2300      	movs	r3, #0
 8001088:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800108a:	2301      	movs	r3, #1
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800108e:	2300      	movs	r3, #0
 8001090:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001096:	f107 030c 	add.w	r3, r7, #12
 800109a:	4619      	mov	r1, r3
 800109c:	480c      	ldr	r0, [pc, #48]	; (80010d0 <MX_TIM3_Init+0xa0>)
 800109e:	f001 fd2b 	bl	8002af8 <HAL_TIM_Encoder_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80010a8:	f000 f938 	bl	800131c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ac:	2300      	movs	r3, #0
 80010ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	4619      	mov	r1, r3
 80010b8:	4805      	ldr	r0, [pc, #20]	; (80010d0 <MX_TIM3_Init+0xa0>)
 80010ba:	f001 fed3 	bl	8002e64 <HAL_TIMEx_MasterConfigSynchronization>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80010c4:	f000 f92a 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	3730      	adds	r7, #48	; 0x30
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	200000dc 	.word	0x200000dc
 80010d4:	40000400 	.word	0x40000400

080010d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08c      	sub	sp, #48	; 0x30
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	2224      	movs	r2, #36	; 0x24
 80010e4:	2100      	movs	r1, #0
 80010e6:	4618      	mov	r0, r3
 80010e8:	f002 fd8e 	bl	8003c08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010f4:	4b20      	ldr	r3, [pc, #128]	; (8001178 <MX_TIM4_Init+0xa0>)
 80010f6:	4a21      	ldr	r2, [pc, #132]	; (800117c <MX_TIM4_Init+0xa4>)
 80010f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80010fa:	4b1f      	ldr	r3, [pc, #124]	; (8001178 <MX_TIM4_Init+0xa0>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001100:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <MX_TIM4_Init+0xa0>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001106:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <MX_TIM4_Init+0xa0>)
 8001108:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800110c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800110e:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <MX_TIM4_Init+0xa0>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <MX_TIM4_Init+0xa0>)
 8001116:	2200      	movs	r2, #0
 8001118:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800111a:	2301      	movs	r3, #1
 800111c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001122:	2301      	movs	r3, #1
 8001124:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001126:	2300      	movs	r3, #0
 8001128:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800112e:	2300      	movs	r3, #0
 8001130:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001132:	2301      	movs	r3, #1
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001136:	2300      	movs	r3, #0
 8001138:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800113e:	f107 030c 	add.w	r3, r7, #12
 8001142:	4619      	mov	r1, r3
 8001144:	480c      	ldr	r0, [pc, #48]	; (8001178 <MX_TIM4_Init+0xa0>)
 8001146:	f001 fcd7 	bl	8002af8 <HAL_TIM_Encoder_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001150:	f000 f8e4 	bl	800131c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001154:	2300      	movs	r3, #0
 8001156:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001158:	2300      	movs	r3, #0
 800115a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	4619      	mov	r1, r3
 8001160:	4805      	ldr	r0, [pc, #20]	; (8001178 <MX_TIM4_Init+0xa0>)
 8001162:	f001 fe7f 	bl	8002e64 <HAL_TIMEx_MasterConfigSynchronization>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800116c:	f000 f8d6 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001170:	bf00      	nop
 8001172:	3730      	adds	r7, #48	; 0x30
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000088 	.word	0x20000088
 800117c:	40000800 	.word	0x40000800

08001180 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 8001186:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <MX_USART2_UART_Init+0x50>)
 8001188:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800118a:	4b10      	ldr	r3, [pc, #64]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 800118c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001190:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 800119a:	2200      	movs	r2, #0
 800119c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800119e:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011a4:	4b09      	ldr	r3, [pc, #36]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 80011a6:	220c      	movs	r2, #12
 80011a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011aa:	4b08      	ldr	r3, [pc, #32]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011b6:	4805      	ldr	r0, [pc, #20]	; (80011cc <MX_USART2_UART_Init+0x4c>)
 80011b8:	f001 feb2 	bl	8002f20 <HAL_UART_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011c2:	f000 f8ab 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200001bc 	.word	0x200001bc
 80011d0:	40004400 	.word	0x40004400

080011d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <MX_DMA_Init+0x38>)
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	4a0b      	ldr	r2, [pc, #44]	; (800120c <MX_DMA_Init+0x38>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6153      	str	r3, [r2, #20]
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <MX_DMA_Init+0x38>)
 80011e8:	695b      	ldr	r3, [r3, #20]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2100      	movs	r1, #0
 80011f6:	2010      	movs	r0, #16
 80011f8:	f000 fbc9 	bl	800198e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80011fc:	2010      	movs	r0, #16
 80011fe:	f000 fbe2 	bl	80019c6 <HAL_NVIC_EnableIRQ>

}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40021000 	.word	0x40021000

08001210 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001216:	f107 0310 	add.w	r3, r7, #16
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001224:	4b39      	ldr	r3, [pc, #228]	; (800130c <MX_GPIO_Init+0xfc>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	4a38      	ldr	r2, [pc, #224]	; (800130c <MX_GPIO_Init+0xfc>)
 800122a:	f043 0310 	orr.w	r3, r3, #16
 800122e:	6193      	str	r3, [r2, #24]
 8001230:	4b36      	ldr	r3, [pc, #216]	; (800130c <MX_GPIO_Init+0xfc>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	f003 0310 	and.w	r3, r3, #16
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800123c:	4b33      	ldr	r3, [pc, #204]	; (800130c <MX_GPIO_Init+0xfc>)
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	4a32      	ldr	r2, [pc, #200]	; (800130c <MX_GPIO_Init+0xfc>)
 8001242:	f043 0320 	orr.w	r3, r3, #32
 8001246:	6193      	str	r3, [r2, #24]
 8001248:	4b30      	ldr	r3, [pc, #192]	; (800130c <MX_GPIO_Init+0xfc>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	f003 0320 	and.w	r3, r3, #32
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001254:	4b2d      	ldr	r3, [pc, #180]	; (800130c <MX_GPIO_Init+0xfc>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	4a2c      	ldr	r2, [pc, #176]	; (800130c <MX_GPIO_Init+0xfc>)
 800125a:	f043 0304 	orr.w	r3, r3, #4
 800125e:	6193      	str	r3, [r2, #24]
 8001260:	4b2a      	ldr	r3, [pc, #168]	; (800130c <MX_GPIO_Init+0xfc>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126c:	4b27      	ldr	r3, [pc, #156]	; (800130c <MX_GPIO_Init+0xfc>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	4a26      	ldr	r2, [pc, #152]	; (800130c <MX_GPIO_Init+0xfc>)
 8001272:	f043 0308 	orr.w	r3, r3, #8
 8001276:	6193      	str	r3, [r2, #24]
 8001278:	4b24      	ldr	r3, [pc, #144]	; (800130c <MX_GPIO_Init+0xfc>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f003 0308 	and.w	r3, r3, #8
 8001280:	603b      	str	r3, [r7, #0]
 8001282:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001284:	2200      	movs	r2, #0
 8001286:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800128a:	4821      	ldr	r0, [pc, #132]	; (8001310 <MX_GPIO_Init+0x100>)
 800128c:	f000 ffae 	bl	80021ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14
 8001290:	2200      	movs	r2, #0
 8001292:	f24c 3107 	movw	r1, #49927	; 0xc307
 8001296:	481f      	ldr	r0, [pc, #124]	; (8001314 <MX_GPIO_Init+0x104>)
 8001298:	f000 ffa8 	bl	80021ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012a2:	481d      	ldr	r0, [pc, #116]	; (8001318 <MX_GPIO_Init+0x108>)
 80012a4:	f000 ffa2 	bl	80021ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80012a8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80012ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2302      	movs	r3, #2
 80012b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ba:	f107 0310 	add.w	r3, r7, #16
 80012be:	4619      	mov	r1, r3
 80012c0:	4813      	ldr	r0, [pc, #76]	; (8001310 <MX_GPIO_Init+0x100>)
 80012c2:	f000 fe39 	bl	8001f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB14
                           PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14
 80012c6:	f24c 3307 	movw	r3, #49927	; 0xc307
 80012ca:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2302      	movs	r3, #2
 80012d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d8:	f107 0310 	add.w	r3, r7, #16
 80012dc:	4619      	mov	r1, r3
 80012de:	480d      	ldr	r0, [pc, #52]	; (8001314 <MX_GPIO_Init+0x104>)
 80012e0:	f000 fe2a 	bl	8001f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f2:	2302      	movs	r3, #2
 80012f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f6:	f107 0310 	add.w	r3, r7, #16
 80012fa:	4619      	mov	r1, r3
 80012fc:	4806      	ldr	r0, [pc, #24]	; (8001318 <MX_GPIO_Init+0x108>)
 80012fe:	f000 fe1b 	bl	8001f38 <HAL_GPIO_Init>

}
 8001302:	bf00      	nop
 8001304:	3720      	adds	r7, #32
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40021000 	.word	0x40021000
 8001310:	40011000 	.word	0x40011000
 8001314:	40010c00 	.word	0x40010c00
 8001318:	40010800 	.word	0x40010800

0800131c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001320:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001322:	e7fe      	b.n	8001322 <Error_Handler+0x6>

08001324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <HAL_MspInit+0x5c>)
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	4a14      	ldr	r2, [pc, #80]	; (8001380 <HAL_MspInit+0x5c>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6193      	str	r3, [r2, #24]
 8001336:	4b12      	ldr	r3, [pc, #72]	; (8001380 <HAL_MspInit+0x5c>)
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <HAL_MspInit+0x5c>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	4a0e      	ldr	r2, [pc, #56]	; (8001380 <HAL_MspInit+0x5c>)
 8001348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800134c:	61d3      	str	r3, [r2, #28]
 800134e:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <HAL_MspInit+0x5c>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800135a:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <HAL_MspInit+0x60>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	4a04      	ldr	r2, [pc, #16]	; (8001384 <HAL_MspInit+0x60>)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001376:	bf00      	nop
 8001378:	3714      	adds	r7, #20
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr
 8001380:	40021000 	.word	0x40021000
 8001384:	40010000 	.word	0x40010000

08001388 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08e      	sub	sp, #56	; 0x38
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a55      	ldr	r2, [pc, #340]	; (80014f8 <HAL_TIM_Encoder_MspInit+0x170>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d125      	bne.n	80013f4 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013a8:	4b54      	ldr	r3, [pc, #336]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	4a53      	ldr	r2, [pc, #332]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 80013ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013b2:	6193      	str	r3, [r2, #24]
 80013b4:	4b51      	ldr	r3, [pc, #324]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
 80013be:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c0:	4b4e      	ldr	r3, [pc, #312]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	4a4d      	ldr	r2, [pc, #308]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 80013c6:	f043 0304 	orr.w	r3, r3, #4
 80013ca:	6193      	str	r3, [r2, #24]
 80013cc:	4b4b      	ldr	r3, [pc, #300]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	623b      	str	r3, [r7, #32]
 80013d6:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013de:	2300      	movs	r3, #0
 80013e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ea:	4619      	mov	r1, r3
 80013ec:	4844      	ldr	r0, [pc, #272]	; (8001500 <HAL_TIM_Encoder_MspInit+0x178>)
 80013ee:	f000 fda3 	bl	8001f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80013f2:	e07c      	b.n	80014ee <HAL_TIM_Encoder_MspInit+0x166>
  else if(htim_encoder->Instance==TIM2)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013fc:	d124      	bne.n	8001448 <HAL_TIM_Encoder_MspInit+0xc0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013fe:	4b3f      	ldr	r3, [pc, #252]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	4a3e      	ldr	r2, [pc, #248]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	61d3      	str	r3, [r2, #28]
 800140a:	4b3c      	ldr	r3, [pc, #240]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	61fb      	str	r3, [r7, #28]
 8001414:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	4b39      	ldr	r3, [pc, #228]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	4a38      	ldr	r2, [pc, #224]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 800141c:	f043 0304 	orr.w	r3, r3, #4
 8001420:	6193      	str	r3, [r2, #24]
 8001422:	4b36      	ldr	r3, [pc, #216]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	61bb      	str	r3, [r7, #24]
 800142c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800142e:	2303      	movs	r3, #3
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001432:	2300      	movs	r3, #0
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800143e:	4619      	mov	r1, r3
 8001440:	482f      	ldr	r0, [pc, #188]	; (8001500 <HAL_TIM_Encoder_MspInit+0x178>)
 8001442:	f000 fd79 	bl	8001f38 <HAL_GPIO_Init>
}
 8001446:	e052      	b.n	80014ee <HAL_TIM_Encoder_MspInit+0x166>
  else if(htim_encoder->Instance==TIM3)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a2d      	ldr	r2, [pc, #180]	; (8001504 <HAL_TIM_Encoder_MspInit+0x17c>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d124      	bne.n	800149c <HAL_TIM_Encoder_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001452:	4b2a      	ldr	r3, [pc, #168]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	4a29      	ldr	r2, [pc, #164]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 8001458:	f043 0302 	orr.w	r3, r3, #2
 800145c:	61d3      	str	r3, [r2, #28]
 800145e:	4b27      	ldr	r3, [pc, #156]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	4b24      	ldr	r3, [pc, #144]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	4a23      	ldr	r2, [pc, #140]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	6193      	str	r3, [r2, #24]
 8001476:	4b21      	ldr	r3, [pc, #132]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001482:	23c0      	movs	r3, #192	; 0xc0
 8001484:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001486:	2300      	movs	r3, #0
 8001488:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001492:	4619      	mov	r1, r3
 8001494:	481a      	ldr	r0, [pc, #104]	; (8001500 <HAL_TIM_Encoder_MspInit+0x178>)
 8001496:	f000 fd4f 	bl	8001f38 <HAL_GPIO_Init>
}
 800149a:	e028      	b.n	80014ee <HAL_TIM_Encoder_MspInit+0x166>
  else if(htim_encoder->Instance==TIM4)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a19      	ldr	r2, [pc, #100]	; (8001508 <HAL_TIM_Encoder_MspInit+0x180>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d123      	bne.n	80014ee <HAL_TIM_Encoder_MspInit+0x166>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	4a14      	ldr	r2, [pc, #80]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 80014ac:	f043 0304 	orr.w	r3, r3, #4
 80014b0:	61d3      	str	r3, [r2, #28]
 80014b2:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	4a0e      	ldr	r2, [pc, #56]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 80014c4:	f043 0308 	orr.w	r3, r3, #8
 80014c8:	6193      	str	r3, [r2, #24]
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <HAL_TIM_Encoder_MspInit+0x174>)
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014d6:	23c0      	movs	r3, #192	; 0xc0
 80014d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014da:	2300      	movs	r3, #0
 80014dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014e6:	4619      	mov	r1, r3
 80014e8:	4808      	ldr	r0, [pc, #32]	; (800150c <HAL_TIM_Encoder_MspInit+0x184>)
 80014ea:	f000 fd25 	bl	8001f38 <HAL_GPIO_Init>
}
 80014ee:	bf00      	nop
 80014f0:	3738      	adds	r7, #56	; 0x38
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40012c00 	.word	0x40012c00
 80014fc:	40021000 	.word	0x40021000
 8001500:	40010800 	.word	0x40010800
 8001504:	40000400 	.word	0x40000400
 8001508:	40000800 	.word	0x40000800
 800150c:	40010c00 	.word	0x40010c00

08001510 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 0310 	add.w	r3, r7, #16
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a32      	ldr	r2, [pc, #200]	; (80015f4 <HAL_UART_MspInit+0xe4>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d15d      	bne.n	80015ec <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001530:	4b31      	ldr	r3, [pc, #196]	; (80015f8 <HAL_UART_MspInit+0xe8>)
 8001532:	69db      	ldr	r3, [r3, #28]
 8001534:	4a30      	ldr	r2, [pc, #192]	; (80015f8 <HAL_UART_MspInit+0xe8>)
 8001536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800153a:	61d3      	str	r3, [r2, #28]
 800153c:	4b2e      	ldr	r3, [pc, #184]	; (80015f8 <HAL_UART_MspInit+0xe8>)
 800153e:	69db      	ldr	r3, [r3, #28]
 8001540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001548:	4b2b      	ldr	r3, [pc, #172]	; (80015f8 <HAL_UART_MspInit+0xe8>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	4a2a      	ldr	r2, [pc, #168]	; (80015f8 <HAL_UART_MspInit+0xe8>)
 800154e:	f043 0304 	orr.w	r3, r3, #4
 8001552:	6193      	str	r3, [r2, #24]
 8001554:	4b28      	ldr	r3, [pc, #160]	; (80015f8 <HAL_UART_MspInit+0xe8>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001560:	2304      	movs	r3, #4
 8001562:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001568:	2303      	movs	r3, #3
 800156a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156c:	f107 0310 	add.w	r3, r7, #16
 8001570:	4619      	mov	r1, r3
 8001572:	4822      	ldr	r0, [pc, #136]	; (80015fc <HAL_UART_MspInit+0xec>)
 8001574:	f000 fce0 	bl	8001f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001578:	2308      	movs	r3, #8
 800157a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	4619      	mov	r1, r3
 800158a:	481c      	ldr	r0, [pc, #112]	; (80015fc <HAL_UART_MspInit+0xec>)
 800158c:	f000 fcd4 	bl	8001f38 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <HAL_UART_MspInit+0xf0>)
 8001592:	4a1c      	ldr	r2, [pc, #112]	; (8001604 <HAL_UART_MspInit+0xf4>)
 8001594:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001596:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <HAL_UART_MspInit+0xf0>)
 8001598:	2200      	movs	r2, #0
 800159a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800159c:	4b18      	ldr	r3, [pc, #96]	; (8001600 <HAL_UART_MspInit+0xf0>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015a2:	4b17      	ldr	r3, [pc, #92]	; (8001600 <HAL_UART_MspInit+0xf0>)
 80015a4:	2280      	movs	r2, #128	; 0x80
 80015a6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015a8:	4b15      	ldr	r3, [pc, #84]	; (8001600 <HAL_UART_MspInit+0xf0>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015ae:	4b14      	ldr	r3, [pc, #80]	; (8001600 <HAL_UART_MspInit+0xf0>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80015b4:	4b12      	ldr	r3, [pc, #72]	; (8001600 <HAL_UART_MspInit+0xf0>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015ba:	4b11      	ldr	r3, [pc, #68]	; (8001600 <HAL_UART_MspInit+0xf0>)
 80015bc:	2200      	movs	r2, #0
 80015be:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80015c0:	480f      	ldr	r0, [pc, #60]	; (8001600 <HAL_UART_MspInit+0xf0>)
 80015c2:	f000 fa1b 	bl	80019fc <HAL_DMA_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80015cc:	f7ff fea6 	bl	800131c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a0b      	ldr	r2, [pc, #44]	; (8001600 <HAL_UART_MspInit+0xf0>)
 80015d4:	639a      	str	r2, [r3, #56]	; 0x38
 80015d6:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <HAL_UART_MspInit+0xf0>)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015dc:	2200      	movs	r2, #0
 80015de:	2100      	movs	r1, #0
 80015e0:	2026      	movs	r0, #38	; 0x26
 80015e2:	f000 f9d4 	bl	800198e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015e6:	2026      	movs	r0, #38	; 0x26
 80015e8:	f000 f9ed 	bl	80019c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015ec:	bf00      	nop
 80015ee:	3720      	adds	r7, #32
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40004400 	.word	0x40004400
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40010800 	.word	0x40010800
 8001600:	20000044 	.word	0x20000044
 8001604:	4002006c 	.word	0x4002006c

08001608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800160c:	e7fe      	b.n	800160c <NMI_Handler+0x4>

0800160e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001612:	e7fe      	b.n	8001612 <HardFault_Handler+0x4>

08001614 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <MemManage_Handler+0x4>

0800161a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800161e:	e7fe      	b.n	800161e <BusFault_Handler+0x4>

08001620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <UsageFault_Handler+0x4>

08001626 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr

08001632 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr

0800163e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr

0800164a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800164e:	f000 f889 	bl	8001764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
	...

08001658 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800165c:	4802      	ldr	r0, [pc, #8]	; (8001668 <DMA1_Channel6_IRQHandler+0x10>)
 800165e:	f000 fb37 	bl	8001cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000044 	.word	0x20000044

0800166c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001670:	4802      	ldr	r0, [pc, #8]	; (800167c <USART2_IRQHandler+0x10>)
 8001672:	f001 fd83 	bl	800317c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200001bc 	.word	0x200001bc

08001680 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr

0800168c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800168c:	480c      	ldr	r0, [pc, #48]	; (80016c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800168e:	490d      	ldr	r1, [pc, #52]	; (80016c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001690:	4a0d      	ldr	r2, [pc, #52]	; (80016c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001694:	e002      	b.n	800169c <LoopCopyDataInit>

08001696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169a:	3304      	adds	r3, #4

0800169c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800169c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800169e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a0:	d3f9      	bcc.n	8001696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a2:	4a0a      	ldr	r2, [pc, #40]	; (80016cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016a4:	4c0a      	ldr	r4, [pc, #40]	; (80016d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a8:	e001      	b.n	80016ae <LoopFillZerobss>

080016aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016ac:	3204      	adds	r2, #4

080016ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b0:	d3fb      	bcc.n	80016aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016b2:	f7ff ffe5 	bl	8001680 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016b6:	f002 fa83 	bl	8003bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016ba:	f7ff fb31 	bl	8000d20 <main>
  bx lr
 80016be:	4770      	bx	lr
  ldr r0, =_sdata
 80016c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016c8:	08003c64 	.word	0x08003c64
  ldr r2, =_sbss
 80016cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80016d0:	20000204 	.word	0x20000204

080016d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016d4:	e7fe      	b.n	80016d4 <ADC1_2_IRQHandler>
	...

080016d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <HAL_Init+0x28>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a07      	ldr	r2, [pc, #28]	; (8001700 <HAL_Init+0x28>)
 80016e2:	f043 0310 	orr.w	r3, r3, #16
 80016e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e8:	2003      	movs	r0, #3
 80016ea:	f000 f945 	bl	8001978 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ee:	2000      	movs	r0, #0
 80016f0:	f000 f808 	bl	8001704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016f4:	f7ff fe16 	bl	8001324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40022000 	.word	0x40022000

08001704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <HAL_InitTick+0x54>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_InitTick+0x58>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	4619      	mov	r1, r3
 8001716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800171a:	fbb3 f3f1 	udiv	r3, r3, r1
 800171e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001722:	4618      	mov	r0, r3
 8001724:	f000 f95d 	bl	80019e2 <HAL_SYSTICK_Config>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e00e      	b.n	8001750 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b0f      	cmp	r3, #15
 8001736:	d80a      	bhi.n	800174e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001738:	2200      	movs	r2, #0
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	f04f 30ff 	mov.w	r0, #4294967295
 8001740:	f000 f925 	bl	800198e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001744:	4a06      	ldr	r2, [pc, #24]	; (8001760 <HAL_InitTick+0x5c>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	e000      	b.n	8001750 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
}
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000000 	.word	0x20000000
 800175c:	20000008 	.word	0x20000008
 8001760:	20000004 	.word	0x20000004

08001764 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <HAL_IncTick+0x1c>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	4b05      	ldr	r3, [pc, #20]	; (8001784 <HAL_IncTick+0x20>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4413      	add	r3, r2
 8001774:	4a03      	ldr	r2, [pc, #12]	; (8001784 <HAL_IncTick+0x20>)
 8001776:	6013      	str	r3, [r2, #0]
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	20000008 	.word	0x20000008
 8001784:	20000200 	.word	0x20000200

08001788 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return uwTick;
 800178c:	4b02      	ldr	r3, [pc, #8]	; (8001798 <HAL_GetTick+0x10>)
 800178e:	681b      	ldr	r3, [r3, #0]
}
 8001790:	4618      	mov	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr
 8001798:	20000200 	.word	0x20000200

0800179c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017a4:	f7ff fff0 	bl	8001788 <HAL_GetTick>
 80017a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b4:	d005      	beq.n	80017c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <HAL_Delay+0x40>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	461a      	mov	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4413      	add	r3, r2
 80017c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017c2:	bf00      	nop
 80017c4:	f7ff ffe0 	bl	8001788 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d8f7      	bhi.n	80017c4 <HAL_Delay+0x28>
  {
  }
}
 80017d4:	bf00      	nop
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000008 	.word	0x20000008

080017e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <__NVIC_SetPriorityGrouping+0x44>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017f6:	68ba      	ldr	r2, [r7, #8]
 80017f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017fc:	4013      	ands	r3, r2
 80017fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001808:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800180c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001812:	4a04      	ldr	r2, [pc, #16]	; (8001824 <__NVIC_SetPriorityGrouping+0x44>)
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	60d3      	str	r3, [r2, #12]
}
 8001818:	bf00      	nop
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800182c:	4b04      	ldr	r3, [pc, #16]	; (8001840 <__NVIC_GetPriorityGrouping+0x18>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	0a1b      	lsrs	r3, r3, #8
 8001832:	f003 0307 	and.w	r3, r3, #7
}
 8001836:	4618      	mov	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	4603      	mov	r3, r0
 800184c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	2b00      	cmp	r3, #0
 8001854:	db0b      	blt.n	800186e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	f003 021f 	and.w	r2, r3, #31
 800185c:	4906      	ldr	r1, [pc, #24]	; (8001878 <__NVIC_EnableIRQ+0x34>)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	095b      	lsrs	r3, r3, #5
 8001864:	2001      	movs	r0, #1
 8001866:	fa00 f202 	lsl.w	r2, r0, r2
 800186a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr
 8001878:	e000e100 	.word	0xe000e100

0800187c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	6039      	str	r1, [r7, #0]
 8001886:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188c:	2b00      	cmp	r3, #0
 800188e:	db0a      	blt.n	80018a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	b2da      	uxtb	r2, r3
 8001894:	490c      	ldr	r1, [pc, #48]	; (80018c8 <__NVIC_SetPriority+0x4c>)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	0112      	lsls	r2, r2, #4
 800189c:	b2d2      	uxtb	r2, r2
 800189e:	440b      	add	r3, r1
 80018a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018a4:	e00a      	b.n	80018bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4908      	ldr	r1, [pc, #32]	; (80018cc <__NVIC_SetPriority+0x50>)
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	f003 030f 	and.w	r3, r3, #15
 80018b2:	3b04      	subs	r3, #4
 80018b4:	0112      	lsls	r2, r2, #4
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	440b      	add	r3, r1
 80018ba:	761a      	strb	r2, [r3, #24]
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000e100 	.word	0xe000e100
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b089      	sub	sp, #36	; 0x24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f1c3 0307 	rsb	r3, r3, #7
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	bf28      	it	cs
 80018ee:	2304      	movcs	r3, #4
 80018f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3304      	adds	r3, #4
 80018f6:	2b06      	cmp	r3, #6
 80018f8:	d902      	bls.n	8001900 <NVIC_EncodePriority+0x30>
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3b03      	subs	r3, #3
 80018fe:	e000      	b.n	8001902 <NVIC_EncodePriority+0x32>
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001904:	f04f 32ff 	mov.w	r2, #4294967295
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43da      	mvns	r2, r3
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	401a      	ands	r2, r3
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001918:	f04f 31ff 	mov.w	r1, #4294967295
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	fa01 f303 	lsl.w	r3, r1, r3
 8001922:	43d9      	mvns	r1, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	4313      	orrs	r3, r2
         );
}
 800192a:	4618      	mov	r0, r3
 800192c:	3724      	adds	r7, #36	; 0x24
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr

08001934 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3b01      	subs	r3, #1
 8001940:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001944:	d301      	bcc.n	800194a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001946:	2301      	movs	r3, #1
 8001948:	e00f      	b.n	800196a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800194a:	4a0a      	ldr	r2, [pc, #40]	; (8001974 <SysTick_Config+0x40>)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3b01      	subs	r3, #1
 8001950:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001952:	210f      	movs	r1, #15
 8001954:	f04f 30ff 	mov.w	r0, #4294967295
 8001958:	f7ff ff90 	bl	800187c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <SysTick_Config+0x40>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001962:	4b04      	ldr	r3, [pc, #16]	; (8001974 <SysTick_Config+0x40>)
 8001964:	2207      	movs	r2, #7
 8001966:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	e000e010 	.word	0xe000e010

08001978 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	f7ff ff2d 	bl	80017e0 <__NVIC_SetPriorityGrouping>
}
 8001986:	bf00      	nop
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198e:	b580      	push	{r7, lr}
 8001990:	b086      	sub	sp, #24
 8001992:	af00      	add	r7, sp, #0
 8001994:	4603      	mov	r3, r0
 8001996:	60b9      	str	r1, [r7, #8]
 8001998:	607a      	str	r2, [r7, #4]
 800199a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019a0:	f7ff ff42 	bl	8001828 <__NVIC_GetPriorityGrouping>
 80019a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	68b9      	ldr	r1, [r7, #8]
 80019aa:	6978      	ldr	r0, [r7, #20]
 80019ac:	f7ff ff90 	bl	80018d0 <NVIC_EncodePriority>
 80019b0:	4602      	mov	r2, r0
 80019b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff ff5f 	bl	800187c <__NVIC_SetPriority>
}
 80019be:	bf00      	nop
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	4603      	mov	r3, r0
 80019ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ff35 	bl	8001844 <__NVIC_EnableIRQ>
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff ffa2 	bl	8001934 <SysTick_Config>
 80019f0:	4603      	mov	r3, r0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
	...

080019fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e043      	b.n	8001a9a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	4b22      	ldr	r3, [pc, #136]	; (8001aa4 <HAL_DMA_Init+0xa8>)
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4a22      	ldr	r2, [pc, #136]	; (8001aa8 <HAL_DMA_Init+0xac>)
 8001a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a22:	091b      	lsrs	r3, r3, #4
 8001a24:	009a      	lsls	r2, r3, #2
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a1f      	ldr	r2, [pc, #124]	; (8001aac <HAL_DMA_Init+0xb0>)
 8001a2e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2202      	movs	r2, #2
 8001a34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a46:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001a4a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001a54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr
 8001aa4:	bffdfff8 	.word	0xbffdfff8
 8001aa8:	cccccccd 	.word	0xcccccccd
 8001aac:	40020000 	.word	0x40020000

08001ab0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
 8001abc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d101      	bne.n	8001ad0 <HAL_DMA_Start_IT+0x20>
 8001acc:	2302      	movs	r3, #2
 8001ace:	e04a      	b.n	8001b66 <HAL_DMA_Start_IT+0xb6>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d13a      	bne.n	8001b58 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2200      	movs	r2, #0
 8001aee:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0201 	bic.w	r2, r2, #1
 8001afe:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	68b9      	ldr	r1, [r7, #8]
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 f9e8 	bl	8001edc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d008      	beq.n	8001b26 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f042 020e 	orr.w	r2, r2, #14
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	e00f      	b.n	8001b46 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0204 	bic.w	r2, r2, #4
 8001b34:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f042 020a 	orr.w	r2, r2, #10
 8001b44:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f042 0201 	orr.w	r2, r2, #1
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	e005      	b.n	8001b64 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b60:	2302      	movs	r3, #2
 8001b62:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b085      	sub	sp, #20
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b76:	2300      	movs	r3, #0
 8001b78:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d008      	beq.n	8001b96 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2204      	movs	r2, #4
 8001b88:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e020      	b.n	8001bd8 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 020e 	bic.w	r2, r2, #14
 8001ba4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0201 	bic.w	r2, r2, #1
 8001bb4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bbe:	2101      	movs	r1, #1
 8001bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bc4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
	...

08001be4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d005      	beq.n	8001c06 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2204      	movs	r2, #4
 8001bfe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	73fb      	strb	r3, [r7, #15]
 8001c04:	e051      	b.n	8001caa <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f022 020e 	bic.w	r2, r2, #14
 8001c14:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 0201 	bic.w	r2, r2, #1
 8001c24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a22      	ldr	r2, [pc, #136]	; (8001cb4 <HAL_DMA_Abort_IT+0xd0>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d029      	beq.n	8001c84 <HAL_DMA_Abort_IT+0xa0>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a20      	ldr	r2, [pc, #128]	; (8001cb8 <HAL_DMA_Abort_IT+0xd4>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d022      	beq.n	8001c80 <HAL_DMA_Abort_IT+0x9c>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a1f      	ldr	r2, [pc, #124]	; (8001cbc <HAL_DMA_Abort_IT+0xd8>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d01a      	beq.n	8001c7a <HAL_DMA_Abort_IT+0x96>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a1d      	ldr	r2, [pc, #116]	; (8001cc0 <HAL_DMA_Abort_IT+0xdc>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d012      	beq.n	8001c74 <HAL_DMA_Abort_IT+0x90>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a1c      	ldr	r2, [pc, #112]	; (8001cc4 <HAL_DMA_Abort_IT+0xe0>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d00a      	beq.n	8001c6e <HAL_DMA_Abort_IT+0x8a>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a1a      	ldr	r2, [pc, #104]	; (8001cc8 <HAL_DMA_Abort_IT+0xe4>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d102      	bne.n	8001c68 <HAL_DMA_Abort_IT+0x84>
 8001c62:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001c66:	e00e      	b.n	8001c86 <HAL_DMA_Abort_IT+0xa2>
 8001c68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c6c:	e00b      	b.n	8001c86 <HAL_DMA_Abort_IT+0xa2>
 8001c6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c72:	e008      	b.n	8001c86 <HAL_DMA_Abort_IT+0xa2>
 8001c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c78:	e005      	b.n	8001c86 <HAL_DMA_Abort_IT+0xa2>
 8001c7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c7e:	e002      	b.n	8001c86 <HAL_DMA_Abort_IT+0xa2>
 8001c80:	2310      	movs	r3, #16
 8001c82:	e000      	b.n	8001c86 <HAL_DMA_Abort_IT+0xa2>
 8001c84:	2301      	movs	r3, #1
 8001c86:	4a11      	ldr	r2, [pc, #68]	; (8001ccc <HAL_DMA_Abort_IT+0xe8>)
 8001c88:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	4798      	blx	r3
    } 
  }
  return status;
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40020008 	.word	0x40020008
 8001cb8:	4002001c 	.word	0x4002001c
 8001cbc:	40020030 	.word	0x40020030
 8001cc0:	40020044 	.word	0x40020044
 8001cc4:	40020058 	.word	0x40020058
 8001cc8:	4002006c 	.word	0x4002006c
 8001ccc:	40020000 	.word	0x40020000

08001cd0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	2204      	movs	r2, #4
 8001cee:	409a      	lsls	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d04f      	beq.n	8001d98 <HAL_DMA_IRQHandler+0xc8>
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d04a      	beq.n	8001d98 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0320 	and.w	r3, r3, #32
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d107      	bne.n	8001d20 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0204 	bic.w	r2, r2, #4
 8001d1e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a66      	ldr	r2, [pc, #408]	; (8001ec0 <HAL_DMA_IRQHandler+0x1f0>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d029      	beq.n	8001d7e <HAL_DMA_IRQHandler+0xae>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a65      	ldr	r2, [pc, #404]	; (8001ec4 <HAL_DMA_IRQHandler+0x1f4>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d022      	beq.n	8001d7a <HAL_DMA_IRQHandler+0xaa>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a63      	ldr	r2, [pc, #396]	; (8001ec8 <HAL_DMA_IRQHandler+0x1f8>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d01a      	beq.n	8001d74 <HAL_DMA_IRQHandler+0xa4>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a62      	ldr	r2, [pc, #392]	; (8001ecc <HAL_DMA_IRQHandler+0x1fc>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d012      	beq.n	8001d6e <HAL_DMA_IRQHandler+0x9e>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a60      	ldr	r2, [pc, #384]	; (8001ed0 <HAL_DMA_IRQHandler+0x200>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d00a      	beq.n	8001d68 <HAL_DMA_IRQHandler+0x98>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a5f      	ldr	r2, [pc, #380]	; (8001ed4 <HAL_DMA_IRQHandler+0x204>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d102      	bne.n	8001d62 <HAL_DMA_IRQHandler+0x92>
 8001d5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d60:	e00e      	b.n	8001d80 <HAL_DMA_IRQHandler+0xb0>
 8001d62:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001d66:	e00b      	b.n	8001d80 <HAL_DMA_IRQHandler+0xb0>
 8001d68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001d6c:	e008      	b.n	8001d80 <HAL_DMA_IRQHandler+0xb0>
 8001d6e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d72:	e005      	b.n	8001d80 <HAL_DMA_IRQHandler+0xb0>
 8001d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d78:	e002      	b.n	8001d80 <HAL_DMA_IRQHandler+0xb0>
 8001d7a:	2340      	movs	r3, #64	; 0x40
 8001d7c:	e000      	b.n	8001d80 <HAL_DMA_IRQHandler+0xb0>
 8001d7e:	2304      	movs	r3, #4
 8001d80:	4a55      	ldr	r2, [pc, #340]	; (8001ed8 <HAL_DMA_IRQHandler+0x208>)
 8001d82:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 8094 	beq.w	8001eb6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001d96:	e08e      	b.n	8001eb6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	409a      	lsls	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d056      	beq.n	8001e56 <HAL_DMA_IRQHandler+0x186>
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d051      	beq.n	8001e56 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0320 	and.w	r3, r3, #32
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d10b      	bne.n	8001dd8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 020a 	bic.w	r2, r2, #10
 8001dce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a38      	ldr	r2, [pc, #224]	; (8001ec0 <HAL_DMA_IRQHandler+0x1f0>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d029      	beq.n	8001e36 <HAL_DMA_IRQHandler+0x166>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a37      	ldr	r2, [pc, #220]	; (8001ec4 <HAL_DMA_IRQHandler+0x1f4>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d022      	beq.n	8001e32 <HAL_DMA_IRQHandler+0x162>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a35      	ldr	r2, [pc, #212]	; (8001ec8 <HAL_DMA_IRQHandler+0x1f8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d01a      	beq.n	8001e2c <HAL_DMA_IRQHandler+0x15c>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a34      	ldr	r2, [pc, #208]	; (8001ecc <HAL_DMA_IRQHandler+0x1fc>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d012      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x156>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a32      	ldr	r2, [pc, #200]	; (8001ed0 <HAL_DMA_IRQHandler+0x200>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d00a      	beq.n	8001e20 <HAL_DMA_IRQHandler+0x150>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a31      	ldr	r2, [pc, #196]	; (8001ed4 <HAL_DMA_IRQHandler+0x204>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d102      	bne.n	8001e1a <HAL_DMA_IRQHandler+0x14a>
 8001e14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e18:	e00e      	b.n	8001e38 <HAL_DMA_IRQHandler+0x168>
 8001e1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e1e:	e00b      	b.n	8001e38 <HAL_DMA_IRQHandler+0x168>
 8001e20:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e24:	e008      	b.n	8001e38 <HAL_DMA_IRQHandler+0x168>
 8001e26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e2a:	e005      	b.n	8001e38 <HAL_DMA_IRQHandler+0x168>
 8001e2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e30:	e002      	b.n	8001e38 <HAL_DMA_IRQHandler+0x168>
 8001e32:	2320      	movs	r3, #32
 8001e34:	e000      	b.n	8001e38 <HAL_DMA_IRQHandler+0x168>
 8001e36:	2302      	movs	r3, #2
 8001e38:	4a27      	ldr	r2, [pc, #156]	; (8001ed8 <HAL_DMA_IRQHandler+0x208>)
 8001e3a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d034      	beq.n	8001eb6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001e54:	e02f      	b.n	8001eb6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	2208      	movs	r2, #8
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4013      	ands	r3, r2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d028      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0x1e8>
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d023      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 020e 	bic.w	r2, r2, #14
 8001e7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e88:	2101      	movs	r1, #1
 8001e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e8e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d004      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	4798      	blx	r3
    }
  }
  return;
 8001eb6:	bf00      	nop
 8001eb8:	bf00      	nop
}
 8001eba:	3710      	adds	r7, #16
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40020008 	.word	0x40020008
 8001ec4:	4002001c 	.word	0x4002001c
 8001ec8:	40020030 	.word	0x40020030
 8001ecc:	40020044 	.word	0x40020044
 8001ed0:	40020058 	.word	0x40020058
 8001ed4:	4002006c 	.word	0x4002006c
 8001ed8:	40020000 	.word	0x40020000

08001edc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
 8001ee8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b10      	cmp	r3, #16
 8001f08:	d108      	bne.n	8001f1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f1a:	e007      	b.n	8001f2c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	60da      	str	r2, [r3, #12]
}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bc80      	pop	{r7}
 8001f34:	4770      	bx	lr
	...

08001f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b08b      	sub	sp, #44	; 0x2c
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f42:	2300      	movs	r3, #0
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f46:	2300      	movs	r3, #0
 8001f48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f4a:	e127      	b.n	800219c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	69fa      	ldr	r2, [r7, #28]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	f040 8116 	bne.w	8002196 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b12      	cmp	r3, #18
 8001f70:	d034      	beq.n	8001fdc <HAL_GPIO_Init+0xa4>
 8001f72:	2b12      	cmp	r3, #18
 8001f74:	d80d      	bhi.n	8001f92 <HAL_GPIO_Init+0x5a>
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d02b      	beq.n	8001fd2 <HAL_GPIO_Init+0x9a>
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d804      	bhi.n	8001f88 <HAL_GPIO_Init+0x50>
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d031      	beq.n	8001fe6 <HAL_GPIO_Init+0xae>
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d01c      	beq.n	8001fc0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f86:	e048      	b.n	800201a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d043      	beq.n	8002014 <HAL_GPIO_Init+0xdc>
 8001f8c:	2b11      	cmp	r3, #17
 8001f8e:	d01b      	beq.n	8001fc8 <HAL_GPIO_Init+0x90>
          break;
 8001f90:	e043      	b.n	800201a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f92:	4a89      	ldr	r2, [pc, #548]	; (80021b8 <HAL_GPIO_Init+0x280>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d026      	beq.n	8001fe6 <HAL_GPIO_Init+0xae>
 8001f98:	4a87      	ldr	r2, [pc, #540]	; (80021b8 <HAL_GPIO_Init+0x280>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d806      	bhi.n	8001fac <HAL_GPIO_Init+0x74>
 8001f9e:	4a87      	ldr	r2, [pc, #540]	; (80021bc <HAL_GPIO_Init+0x284>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d020      	beq.n	8001fe6 <HAL_GPIO_Init+0xae>
 8001fa4:	4a86      	ldr	r2, [pc, #536]	; (80021c0 <HAL_GPIO_Init+0x288>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d01d      	beq.n	8001fe6 <HAL_GPIO_Init+0xae>
          break;
 8001faa:	e036      	b.n	800201a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001fac:	4a85      	ldr	r2, [pc, #532]	; (80021c4 <HAL_GPIO_Init+0x28c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d019      	beq.n	8001fe6 <HAL_GPIO_Init+0xae>
 8001fb2:	4a85      	ldr	r2, [pc, #532]	; (80021c8 <HAL_GPIO_Init+0x290>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d016      	beq.n	8001fe6 <HAL_GPIO_Init+0xae>
 8001fb8:	4a84      	ldr	r2, [pc, #528]	; (80021cc <HAL_GPIO_Init+0x294>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d013      	beq.n	8001fe6 <HAL_GPIO_Init+0xae>
          break;
 8001fbe:	e02c      	b.n	800201a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	623b      	str	r3, [r7, #32]
          break;
 8001fc6:	e028      	b.n	800201a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	3304      	adds	r3, #4
 8001fce:	623b      	str	r3, [r7, #32]
          break;
 8001fd0:	e023      	b.n	800201a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	3308      	adds	r3, #8
 8001fd8:	623b      	str	r3, [r7, #32]
          break;
 8001fda:	e01e      	b.n	800201a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	330c      	adds	r3, #12
 8001fe2:	623b      	str	r3, [r7, #32]
          break;
 8001fe4:	e019      	b.n	800201a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d102      	bne.n	8001ff4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fee:	2304      	movs	r3, #4
 8001ff0:	623b      	str	r3, [r7, #32]
          break;
 8001ff2:	e012      	b.n	800201a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d105      	bne.n	8002008 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ffc:	2308      	movs	r3, #8
 8001ffe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69fa      	ldr	r2, [r7, #28]
 8002004:	611a      	str	r2, [r3, #16]
          break;
 8002006:	e008      	b.n	800201a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002008:	2308      	movs	r3, #8
 800200a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69fa      	ldr	r2, [r7, #28]
 8002010:	615a      	str	r2, [r3, #20]
          break;
 8002012:	e002      	b.n	800201a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002014:	2300      	movs	r3, #0
 8002016:	623b      	str	r3, [r7, #32]
          break;
 8002018:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	2bff      	cmp	r3, #255	; 0xff
 800201e:	d801      	bhi.n	8002024 <HAL_GPIO_Init+0xec>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	e001      	b.n	8002028 <HAL_GPIO_Init+0xf0>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	3304      	adds	r3, #4
 8002028:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	2bff      	cmp	r3, #255	; 0xff
 800202e:	d802      	bhi.n	8002036 <HAL_GPIO_Init+0xfe>
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	e002      	b.n	800203c <HAL_GPIO_Init+0x104>
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	3b08      	subs	r3, #8
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	210f      	movs	r1, #15
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	fa01 f303 	lsl.w	r3, r1, r3
 800204a:	43db      	mvns	r3, r3
 800204c:	401a      	ands	r2, r3
 800204e:	6a39      	ldr	r1, [r7, #32]
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	fa01 f303 	lsl.w	r3, r1, r3
 8002056:	431a      	orrs	r2, r3
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 8096 	beq.w	8002196 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800206a:	4b59      	ldr	r3, [pc, #356]	; (80021d0 <HAL_GPIO_Init+0x298>)
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	4a58      	ldr	r2, [pc, #352]	; (80021d0 <HAL_GPIO_Init+0x298>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	6193      	str	r3, [r2, #24]
 8002076:	4b56      	ldr	r3, [pc, #344]	; (80021d0 <HAL_GPIO_Init+0x298>)
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002082:	4a54      	ldr	r2, [pc, #336]	; (80021d4 <HAL_GPIO_Init+0x29c>)
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	089b      	lsrs	r3, r3, #2
 8002088:	3302      	adds	r3, #2
 800208a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	220f      	movs	r2, #15
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	4013      	ands	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a4b      	ldr	r2, [pc, #300]	; (80021d8 <HAL_GPIO_Init+0x2a0>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d013      	beq.n	80020d6 <HAL_GPIO_Init+0x19e>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a4a      	ldr	r2, [pc, #296]	; (80021dc <HAL_GPIO_Init+0x2a4>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d00d      	beq.n	80020d2 <HAL_GPIO_Init+0x19a>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a49      	ldr	r2, [pc, #292]	; (80021e0 <HAL_GPIO_Init+0x2a8>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d007      	beq.n	80020ce <HAL_GPIO_Init+0x196>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a48      	ldr	r2, [pc, #288]	; (80021e4 <HAL_GPIO_Init+0x2ac>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d101      	bne.n	80020ca <HAL_GPIO_Init+0x192>
 80020c6:	2303      	movs	r3, #3
 80020c8:	e006      	b.n	80020d8 <HAL_GPIO_Init+0x1a0>
 80020ca:	2304      	movs	r3, #4
 80020cc:	e004      	b.n	80020d8 <HAL_GPIO_Init+0x1a0>
 80020ce:	2302      	movs	r3, #2
 80020d0:	e002      	b.n	80020d8 <HAL_GPIO_Init+0x1a0>
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <HAL_GPIO_Init+0x1a0>
 80020d6:	2300      	movs	r3, #0
 80020d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020da:	f002 0203 	and.w	r2, r2, #3
 80020de:	0092      	lsls	r2, r2, #2
 80020e0:	4093      	lsls	r3, r2
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020e8:	493a      	ldr	r1, [pc, #232]	; (80021d4 <HAL_GPIO_Init+0x29c>)
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	089b      	lsrs	r3, r3, #2
 80020ee:	3302      	adds	r3, #2
 80020f0:	68fa      	ldr	r2, [r7, #12]
 80020f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d006      	beq.n	8002110 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002102:	4b39      	ldr	r3, [pc, #228]	; (80021e8 <HAL_GPIO_Init+0x2b0>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	4938      	ldr	r1, [pc, #224]	; (80021e8 <HAL_GPIO_Init+0x2b0>)
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	600b      	str	r3, [r1, #0]
 800210e:	e006      	b.n	800211e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002110:	4b35      	ldr	r3, [pc, #212]	; (80021e8 <HAL_GPIO_Init+0x2b0>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	43db      	mvns	r3, r3
 8002118:	4933      	ldr	r1, [pc, #204]	; (80021e8 <HAL_GPIO_Init+0x2b0>)
 800211a:	4013      	ands	r3, r2
 800211c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d006      	beq.n	8002138 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800212a:	4b2f      	ldr	r3, [pc, #188]	; (80021e8 <HAL_GPIO_Init+0x2b0>)
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	492e      	ldr	r1, [pc, #184]	; (80021e8 <HAL_GPIO_Init+0x2b0>)
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	4313      	orrs	r3, r2
 8002134:	604b      	str	r3, [r1, #4]
 8002136:	e006      	b.n	8002146 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002138:	4b2b      	ldr	r3, [pc, #172]	; (80021e8 <HAL_GPIO_Init+0x2b0>)
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	43db      	mvns	r3, r3
 8002140:	4929      	ldr	r1, [pc, #164]	; (80021e8 <HAL_GPIO_Init+0x2b0>)
 8002142:	4013      	ands	r3, r2
 8002144:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d006      	beq.n	8002160 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002152:	4b25      	ldr	r3, [pc, #148]	; (80021e8 <HAL_GPIO_Init+0x2b0>)
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	4924      	ldr	r1, [pc, #144]	; (80021e8 <HAL_GPIO_Init+0x2b0>)
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	4313      	orrs	r3, r2
 800215c:	608b      	str	r3, [r1, #8]
 800215e:	e006      	b.n	800216e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002160:	4b21      	ldr	r3, [pc, #132]	; (80021e8 <HAL_GPIO_Init+0x2b0>)
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	43db      	mvns	r3, r3
 8002168:	491f      	ldr	r1, [pc, #124]	; (80021e8 <HAL_GPIO_Init+0x2b0>)
 800216a:	4013      	ands	r3, r2
 800216c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d006      	beq.n	8002188 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800217a:	4b1b      	ldr	r3, [pc, #108]	; (80021e8 <HAL_GPIO_Init+0x2b0>)
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	491a      	ldr	r1, [pc, #104]	; (80021e8 <HAL_GPIO_Init+0x2b0>)
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	4313      	orrs	r3, r2
 8002184:	60cb      	str	r3, [r1, #12]
 8002186:	e006      	b.n	8002196 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002188:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <HAL_GPIO_Init+0x2b0>)
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	43db      	mvns	r3, r3
 8002190:	4915      	ldr	r1, [pc, #84]	; (80021e8 <HAL_GPIO_Init+0x2b0>)
 8002192:	4013      	ands	r3, r2
 8002194:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	3301      	adds	r3, #1
 800219a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	fa22 f303 	lsr.w	r3, r2, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f47f aed0 	bne.w	8001f4c <HAL_GPIO_Init+0x14>
  }
}
 80021ac:	bf00      	nop
 80021ae:	372c      	adds	r7, #44	; 0x2c
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	10210000 	.word	0x10210000
 80021bc:	10110000 	.word	0x10110000
 80021c0:	10120000 	.word	0x10120000
 80021c4:	10310000 	.word	0x10310000
 80021c8:	10320000 	.word	0x10320000
 80021cc:	10220000 	.word	0x10220000
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40010000 	.word	0x40010000
 80021d8:	40010800 	.word	0x40010800
 80021dc:	40010c00 	.word	0x40010c00
 80021e0:	40011000 	.word	0x40011000
 80021e4:	40011400 	.word	0x40011400
 80021e8:	40010400 	.word	0x40010400

080021ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	807b      	strh	r3, [r7, #2]
 80021f8:	4613      	mov	r3, r2
 80021fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021fc:	787b      	ldrb	r3, [r7, #1]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002202:	887a      	ldrh	r2, [r7, #2]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002208:	e003      	b.n	8002212 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800220a:	887b      	ldrh	r3, [r7, #2]
 800220c:	041a      	lsls	r2, r3, #16
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	611a      	str	r2, [r3, #16]
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr

0800221c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e034      	b.n	8002298 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8002236:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f245 5255 	movw	r2, #21845	; 0x5555
 8002240:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6852      	ldr	r2, [r2, #4]
 800224a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6892      	ldr	r2, [r2, #8]
 8002254:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002256:	f7ff fa97 	bl	8001788 <HAL_GetTick>
 800225a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800225c:	e00f      	b.n	800227e <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800225e:	f7ff fa93 	bl	8001788 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b27      	cmp	r3, #39	; 0x27
 800226a:	d908      	bls.n	800227e <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e00c      	b.n	8002298 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1e8      	bne.n	800225e <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002294:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80022b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc80      	pop	{r7}
 80022bc:	4770      	bx	lr
	...

080022c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d101      	bne.n	80022d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e26c      	b.n	80027ac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f000 8087 	beq.w	80023ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022e0:	4b92      	ldr	r3, [pc, #584]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 030c 	and.w	r3, r3, #12
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d00c      	beq.n	8002306 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022ec:	4b8f      	ldr	r3, [pc, #572]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 030c 	and.w	r3, r3, #12
 80022f4:	2b08      	cmp	r3, #8
 80022f6:	d112      	bne.n	800231e <HAL_RCC_OscConfig+0x5e>
 80022f8:	4b8c      	ldr	r3, [pc, #560]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002304:	d10b      	bne.n	800231e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002306:	4b89      	ldr	r3, [pc, #548]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d06c      	beq.n	80023ec <HAL_RCC_OscConfig+0x12c>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d168      	bne.n	80023ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e246      	b.n	80027ac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002326:	d106      	bne.n	8002336 <HAL_RCC_OscConfig+0x76>
 8002328:	4b80      	ldr	r3, [pc, #512]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a7f      	ldr	r2, [pc, #508]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 800232e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	e02e      	b.n	8002394 <HAL_RCC_OscConfig+0xd4>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d10c      	bne.n	8002358 <HAL_RCC_OscConfig+0x98>
 800233e:	4b7b      	ldr	r3, [pc, #492]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a7a      	ldr	r2, [pc, #488]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	4b78      	ldr	r3, [pc, #480]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a77      	ldr	r2, [pc, #476]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002350:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	e01d      	b.n	8002394 <HAL_RCC_OscConfig+0xd4>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002360:	d10c      	bne.n	800237c <HAL_RCC_OscConfig+0xbc>
 8002362:	4b72      	ldr	r3, [pc, #456]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a71      	ldr	r2, [pc, #452]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	4b6f      	ldr	r3, [pc, #444]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a6e      	ldr	r2, [pc, #440]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	e00b      	b.n	8002394 <HAL_RCC_OscConfig+0xd4>
 800237c:	4b6b      	ldr	r3, [pc, #428]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a6a      	ldr	r2, [pc, #424]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002386:	6013      	str	r3, [r2, #0]
 8002388:	4b68      	ldr	r3, [pc, #416]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a67      	ldr	r2, [pc, #412]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 800238e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002392:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d013      	beq.n	80023c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239c:	f7ff f9f4 	bl	8001788 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a4:	f7ff f9f0 	bl	8001788 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b64      	cmp	r3, #100	; 0x64
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e1fa      	b.n	80027ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b6:	4b5d      	ldr	r3, [pc, #372]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0f0      	beq.n	80023a4 <HAL_RCC_OscConfig+0xe4>
 80023c2:	e014      	b.n	80023ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c4:	f7ff f9e0 	bl	8001788 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023cc:	f7ff f9dc 	bl	8001788 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b64      	cmp	r3, #100	; 0x64
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e1e6      	b.n	80027ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023de:	4b53      	ldr	r3, [pc, #332]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f0      	bne.n	80023cc <HAL_RCC_OscConfig+0x10c>
 80023ea:	e000      	b.n	80023ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d063      	beq.n	80024c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023fa:	4b4c      	ldr	r3, [pc, #304]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00b      	beq.n	800241e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002406:	4b49      	ldr	r3, [pc, #292]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 030c 	and.w	r3, r3, #12
 800240e:	2b08      	cmp	r3, #8
 8002410:	d11c      	bne.n	800244c <HAL_RCC_OscConfig+0x18c>
 8002412:	4b46      	ldr	r3, [pc, #280]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d116      	bne.n	800244c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241e:	4b43      	ldr	r3, [pc, #268]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <HAL_RCC_OscConfig+0x176>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d001      	beq.n	8002436 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e1ba      	b.n	80027ac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002436:	4b3d      	ldr	r3, [pc, #244]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4939      	ldr	r1, [pc, #228]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002446:	4313      	orrs	r3, r2
 8002448:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244a:	e03a      	b.n	80024c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d020      	beq.n	8002496 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002454:	4b36      	ldr	r3, [pc, #216]	; (8002530 <HAL_RCC_OscConfig+0x270>)
 8002456:	2201      	movs	r2, #1
 8002458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245a:	f7ff f995 	bl	8001788 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002462:	f7ff f991 	bl	8001788 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e19b      	b.n	80027ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002474:	4b2d      	ldr	r3, [pc, #180]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0f0      	beq.n	8002462 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002480:	4b2a      	ldr	r3, [pc, #168]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	4927      	ldr	r1, [pc, #156]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 8002490:	4313      	orrs	r3, r2
 8002492:	600b      	str	r3, [r1, #0]
 8002494:	e015      	b.n	80024c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002496:	4b26      	ldr	r3, [pc, #152]	; (8002530 <HAL_RCC_OscConfig+0x270>)
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249c:	f7ff f974 	bl	8001788 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a4:	f7ff f970 	bl	8001788 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e17a      	b.n	80027ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b6:	4b1d      	ldr	r3, [pc, #116]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d03a      	beq.n	8002544 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d019      	beq.n	800250a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024d6:	4b17      	ldr	r3, [pc, #92]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 80024d8:	2201      	movs	r2, #1
 80024da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024dc:	f7ff f954 	bl	8001788 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e4:	f7ff f950 	bl	8001788 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e15a      	b.n	80027ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f6:	4b0d      	ldr	r3, [pc, #52]	; (800252c <HAL_RCC_OscConfig+0x26c>)
 80024f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f0      	beq.n	80024e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002502:	2001      	movs	r0, #1
 8002504:	f000 fada 	bl	8002abc <RCC_Delay>
 8002508:	e01c      	b.n	8002544 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800250a:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <HAL_RCC_OscConfig+0x274>)
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002510:	f7ff f93a 	bl	8001788 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002516:	e00f      	b.n	8002538 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002518:	f7ff f936 	bl	8001788 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d908      	bls.n	8002538 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e140      	b.n	80027ac <HAL_RCC_OscConfig+0x4ec>
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000
 8002530:	42420000 	.word	0x42420000
 8002534:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002538:	4b9e      	ldr	r3, [pc, #632]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1e9      	bne.n	8002518 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 80a6 	beq.w	800269e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002552:	2300      	movs	r3, #0
 8002554:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002556:	4b97      	ldr	r3, [pc, #604]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10d      	bne.n	800257e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002562:	4b94      	ldr	r3, [pc, #592]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	4a93      	ldr	r2, [pc, #588]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 8002568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800256c:	61d3      	str	r3, [r2, #28]
 800256e:	4b91      	ldr	r3, [pc, #580]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002576:	60bb      	str	r3, [r7, #8]
 8002578:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800257a:	2301      	movs	r3, #1
 800257c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257e:	4b8e      	ldr	r3, [pc, #568]	; (80027b8 <HAL_RCC_OscConfig+0x4f8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002586:	2b00      	cmp	r3, #0
 8002588:	d118      	bne.n	80025bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800258a:	4b8b      	ldr	r3, [pc, #556]	; (80027b8 <HAL_RCC_OscConfig+0x4f8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a8a      	ldr	r2, [pc, #552]	; (80027b8 <HAL_RCC_OscConfig+0x4f8>)
 8002590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002594:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002596:	f7ff f8f7 	bl	8001788 <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259e:	f7ff f8f3 	bl	8001788 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b64      	cmp	r3, #100	; 0x64
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e0fd      	b.n	80027ac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b0:	4b81      	ldr	r3, [pc, #516]	; (80027b8 <HAL_RCC_OscConfig+0x4f8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d106      	bne.n	80025d2 <HAL_RCC_OscConfig+0x312>
 80025c4:	4b7b      	ldr	r3, [pc, #492]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	4a7a      	ldr	r2, [pc, #488]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	6213      	str	r3, [r2, #32]
 80025d0:	e02d      	b.n	800262e <HAL_RCC_OscConfig+0x36e>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10c      	bne.n	80025f4 <HAL_RCC_OscConfig+0x334>
 80025da:	4b76      	ldr	r3, [pc, #472]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	4a75      	ldr	r2, [pc, #468]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 80025e0:	f023 0301 	bic.w	r3, r3, #1
 80025e4:	6213      	str	r3, [r2, #32]
 80025e6:	4b73      	ldr	r3, [pc, #460]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	4a72      	ldr	r2, [pc, #456]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 80025ec:	f023 0304 	bic.w	r3, r3, #4
 80025f0:	6213      	str	r3, [r2, #32]
 80025f2:	e01c      	b.n	800262e <HAL_RCC_OscConfig+0x36e>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	2b05      	cmp	r3, #5
 80025fa:	d10c      	bne.n	8002616 <HAL_RCC_OscConfig+0x356>
 80025fc:	4b6d      	ldr	r3, [pc, #436]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	4a6c      	ldr	r2, [pc, #432]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 8002602:	f043 0304 	orr.w	r3, r3, #4
 8002606:	6213      	str	r3, [r2, #32]
 8002608:	4b6a      	ldr	r3, [pc, #424]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	4a69      	ldr	r2, [pc, #420]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	6213      	str	r3, [r2, #32]
 8002614:	e00b      	b.n	800262e <HAL_RCC_OscConfig+0x36e>
 8002616:	4b67      	ldr	r3, [pc, #412]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	4a66      	ldr	r2, [pc, #408]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 800261c:	f023 0301 	bic.w	r3, r3, #1
 8002620:	6213      	str	r3, [r2, #32]
 8002622:	4b64      	ldr	r3, [pc, #400]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	4a63      	ldr	r2, [pc, #396]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 8002628:	f023 0304 	bic.w	r3, r3, #4
 800262c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d015      	beq.n	8002662 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002636:	f7ff f8a7 	bl	8001788 <HAL_GetTick>
 800263a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263c:	e00a      	b.n	8002654 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800263e:	f7ff f8a3 	bl	8001788 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	f241 3288 	movw	r2, #5000	; 0x1388
 800264c:	4293      	cmp	r3, r2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e0ab      	b.n	80027ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002654:	4b57      	ldr	r3, [pc, #348]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0ee      	beq.n	800263e <HAL_RCC_OscConfig+0x37e>
 8002660:	e014      	b.n	800268c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002662:	f7ff f891 	bl	8001788 <HAL_GetTick>
 8002666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002668:	e00a      	b.n	8002680 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800266a:	f7ff f88d 	bl	8001788 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	f241 3288 	movw	r2, #5000	; 0x1388
 8002678:	4293      	cmp	r3, r2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e095      	b.n	80027ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002680:	4b4c      	ldr	r3, [pc, #304]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1ee      	bne.n	800266a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800268c:	7dfb      	ldrb	r3, [r7, #23]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d105      	bne.n	800269e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002692:	4b48      	ldr	r3, [pc, #288]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	4a47      	ldr	r2, [pc, #284]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 8002698:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800269c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 8081 	beq.w	80027aa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026a8:	4b42      	ldr	r3, [pc, #264]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 030c 	and.w	r3, r3, #12
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d061      	beq.n	8002778 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d146      	bne.n	800274a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026bc:	4b3f      	ldr	r3, [pc, #252]	; (80027bc <HAL_RCC_OscConfig+0x4fc>)
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c2:	f7ff f861 	bl	8001788 <HAL_GetTick>
 80026c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026c8:	e008      	b.n	80026dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ca:	f7ff f85d 	bl	8001788 <HAL_GetTick>
 80026ce:	4602      	mov	r2, r0
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d901      	bls.n	80026dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026d8:	2303      	movs	r3, #3
 80026da:	e067      	b.n	80027ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026dc:	4b35      	ldr	r3, [pc, #212]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1f0      	bne.n	80026ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026f0:	d108      	bne.n	8002704 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026f2:	4b30      	ldr	r3, [pc, #192]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	492d      	ldr	r1, [pc, #180]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 8002700:	4313      	orrs	r3, r2
 8002702:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002704:	4b2b      	ldr	r3, [pc, #172]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a19      	ldr	r1, [r3, #32]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	430b      	orrs	r3, r1
 8002716:	4927      	ldr	r1, [pc, #156]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 8002718:	4313      	orrs	r3, r2
 800271a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800271c:	4b27      	ldr	r3, [pc, #156]	; (80027bc <HAL_RCC_OscConfig+0x4fc>)
 800271e:	2201      	movs	r2, #1
 8002720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002722:	f7ff f831 	bl	8001788 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800272a:	f7ff f82d 	bl	8001788 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e037      	b.n	80027ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800273c:	4b1d      	ldr	r3, [pc, #116]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0f0      	beq.n	800272a <HAL_RCC_OscConfig+0x46a>
 8002748:	e02f      	b.n	80027aa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274a:	4b1c      	ldr	r3, [pc, #112]	; (80027bc <HAL_RCC_OscConfig+0x4fc>)
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002750:	f7ff f81a 	bl	8001788 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002758:	f7ff f816 	bl	8001788 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e020      	b.n	80027ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800276a:	4b12      	ldr	r3, [pc, #72]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0x498>
 8002776:	e018      	b.n	80027aa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e013      	b.n	80027ac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002784:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <HAL_RCC_OscConfig+0x4f4>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	429a      	cmp	r2, r3
 8002796:	d106      	bne.n	80027a6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d001      	beq.n	80027aa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40021000 	.word	0x40021000
 80027b8:	40007000 	.word	0x40007000
 80027bc:	42420060 	.word	0x42420060

080027c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e0d0      	b.n	8002976 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027d4:	4b6a      	ldr	r3, [pc, #424]	; (8002980 <HAL_RCC_ClockConfig+0x1c0>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d910      	bls.n	8002804 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e2:	4b67      	ldr	r3, [pc, #412]	; (8002980 <HAL_RCC_ClockConfig+0x1c0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 0207 	bic.w	r2, r3, #7
 80027ea:	4965      	ldr	r1, [pc, #404]	; (8002980 <HAL_RCC_ClockConfig+0x1c0>)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f2:	4b63      	ldr	r3, [pc, #396]	; (8002980 <HAL_RCC_ClockConfig+0x1c0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0b8      	b.n	8002976 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d020      	beq.n	8002852 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800281c:	4b59      	ldr	r3, [pc, #356]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	4a58      	ldr	r2, [pc, #352]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 8002822:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002826:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0308 	and.w	r3, r3, #8
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002834:	4b53      	ldr	r3, [pc, #332]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	4a52      	ldr	r2, [pc, #328]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 800283a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800283e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002840:	4b50      	ldr	r3, [pc, #320]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	494d      	ldr	r1, [pc, #308]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 800284e:	4313      	orrs	r3, r2
 8002850:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d040      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d107      	bne.n	8002876 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002866:	4b47      	ldr	r3, [pc, #284]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d115      	bne.n	800289e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e07f      	b.n	8002976 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d107      	bne.n	800288e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287e:	4b41      	ldr	r3, [pc, #260]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d109      	bne.n	800289e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e073      	b.n	8002976 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800288e:	4b3d      	ldr	r3, [pc, #244]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e06b      	b.n	8002976 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800289e:	4b39      	ldr	r3, [pc, #228]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f023 0203 	bic.w	r2, r3, #3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	4936      	ldr	r1, [pc, #216]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028b0:	f7fe ff6a 	bl	8001788 <HAL_GetTick>
 80028b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b6:	e00a      	b.n	80028ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028b8:	f7fe ff66 	bl	8001788 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e053      	b.n	8002976 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ce:	4b2d      	ldr	r3, [pc, #180]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 020c 	and.w	r2, r3, #12
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	429a      	cmp	r2, r3
 80028de:	d1eb      	bne.n	80028b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028e0:	4b27      	ldr	r3, [pc, #156]	; (8002980 <HAL_RCC_ClockConfig+0x1c0>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d210      	bcs.n	8002910 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ee:	4b24      	ldr	r3, [pc, #144]	; (8002980 <HAL_RCC_ClockConfig+0x1c0>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f023 0207 	bic.w	r2, r3, #7
 80028f6:	4922      	ldr	r1, [pc, #136]	; (8002980 <HAL_RCC_ClockConfig+0x1c0>)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fe:	4b20      	ldr	r3, [pc, #128]	; (8002980 <HAL_RCC_ClockConfig+0x1c0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d001      	beq.n	8002910 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e032      	b.n	8002976 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d008      	beq.n	800292e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800291c:	4b19      	ldr	r3, [pc, #100]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	4916      	ldr	r1, [pc, #88]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 800292a:	4313      	orrs	r3, r2
 800292c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0308 	and.w	r3, r3, #8
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800293a:	4b12      	ldr	r3, [pc, #72]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	490e      	ldr	r1, [pc, #56]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 800294a:	4313      	orrs	r3, r2
 800294c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800294e:	f000 f821 	bl	8002994 <HAL_RCC_GetSysClockFreq>
 8002952:	4601      	mov	r1, r0
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <HAL_RCC_ClockConfig+0x1c4>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	091b      	lsrs	r3, r3, #4
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	4a0a      	ldr	r2, [pc, #40]	; (8002988 <HAL_RCC_ClockConfig+0x1c8>)
 8002960:	5cd3      	ldrb	r3, [r2, r3]
 8002962:	fa21 f303 	lsr.w	r3, r1, r3
 8002966:	4a09      	ldr	r2, [pc, #36]	; (800298c <HAL_RCC_ClockConfig+0x1cc>)
 8002968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800296a:	4b09      	ldr	r3, [pc, #36]	; (8002990 <HAL_RCC_ClockConfig+0x1d0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f7fe fec8 	bl	8001704 <HAL_InitTick>

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40022000 	.word	0x40022000
 8002984:	40021000 	.word	0x40021000
 8002988:	08003c44 	.word	0x08003c44
 800298c:	20000000 	.word	0x20000000
 8002990:	20000004 	.word	0x20000004

08002994 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002994:	b490      	push	{r4, r7}
 8002996:	b08a      	sub	sp, #40	; 0x28
 8002998:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800299a:	4b2a      	ldr	r3, [pc, #168]	; (8002a44 <HAL_RCC_GetSysClockFreq+0xb0>)
 800299c:	1d3c      	adds	r4, r7, #4
 800299e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80029a4:	4b28      	ldr	r3, [pc, #160]	; (8002a48 <HAL_RCC_GetSysClockFreq+0xb4>)
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	61fb      	str	r3, [r7, #28]
 80029ae:	2300      	movs	r3, #0
 80029b0:	61bb      	str	r3, [r7, #24]
 80029b2:	2300      	movs	r3, #0
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029be:	4b23      	ldr	r3, [pc, #140]	; (8002a4c <HAL_RCC_GetSysClockFreq+0xb8>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f003 030c 	and.w	r3, r3, #12
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d002      	beq.n	80029d4 <HAL_RCC_GetSysClockFreq+0x40>
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d003      	beq.n	80029da <HAL_RCC_GetSysClockFreq+0x46>
 80029d2:	e02d      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029d4:	4b1e      	ldr	r3, [pc, #120]	; (8002a50 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029d6:	623b      	str	r3, [r7, #32]
      break;
 80029d8:	e02d      	b.n	8002a36 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	0c9b      	lsrs	r3, r3, #18
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029e6:	4413      	add	r3, r2
 80029e8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80029ec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d013      	beq.n	8002a20 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029f8:	4b14      	ldr	r3, [pc, #80]	; (8002a4c <HAL_RCC_GetSysClockFreq+0xb8>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	0c5b      	lsrs	r3, r3, #17
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002a06:	4413      	add	r3, r2
 8002a08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002a0c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	4a0f      	ldr	r2, [pc, #60]	; (8002a50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a12:	fb02 f203 	mul.w	r2, r2, r3
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1e:	e004      	b.n	8002a2a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	4a0c      	ldr	r2, [pc, #48]	; (8002a54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a24:	fb02 f303 	mul.w	r3, r2, r3
 8002a28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	623b      	str	r3, [r7, #32]
      break;
 8002a2e:	e002      	b.n	8002a36 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a30:	4b07      	ldr	r3, [pc, #28]	; (8002a50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a32:	623b      	str	r3, [r7, #32]
      break;
 8002a34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a36:	6a3b      	ldr	r3, [r7, #32]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3728      	adds	r7, #40	; 0x28
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc90      	pop	{r4, r7}
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	08003c30 	.word	0x08003c30
 8002a48:	08003c40 	.word	0x08003c40
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	007a1200 	.word	0x007a1200
 8002a54:	003d0900 	.word	0x003d0900

08002a58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a5c:	4b02      	ldr	r3, [pc, #8]	; (8002a68 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr
 8002a68:	20000000 	.word	0x20000000

08002a6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a70:	f7ff fff2 	bl	8002a58 <HAL_RCC_GetHCLKFreq>
 8002a74:	4601      	mov	r1, r0
 8002a76:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	0a1b      	lsrs	r3, r3, #8
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	4a03      	ldr	r2, [pc, #12]	; (8002a90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a82:	5cd3      	ldrb	r3, [r2, r3]
 8002a84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	08003c54 	.word	0x08003c54

08002a94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a98:	f7ff ffde 	bl	8002a58 <HAL_RCC_GetHCLKFreq>
 8002a9c:	4601      	mov	r1, r0
 8002a9e:	4b05      	ldr	r3, [pc, #20]	; (8002ab4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	0adb      	lsrs	r3, r3, #11
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	4a03      	ldr	r2, [pc, #12]	; (8002ab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002aaa:	5cd3      	ldrb	r3, [r2, r3]
 8002aac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	08003c54 	.word	0x08003c54

08002abc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ac4:	4b0a      	ldr	r3, [pc, #40]	; (8002af0 <RCC_Delay+0x34>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a0a      	ldr	r2, [pc, #40]	; (8002af4 <RCC_Delay+0x38>)
 8002aca:	fba2 2303 	umull	r2, r3, r2, r3
 8002ace:	0a5b      	lsrs	r3, r3, #9
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	fb02 f303 	mul.w	r3, r2, r3
 8002ad6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ad8:	bf00      	nop
  }
  while (Delay --);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	1e5a      	subs	r2, r3, #1
 8002ade:	60fa      	str	r2, [r7, #12]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d1f9      	bne.n	8002ad8 <RCC_Delay+0x1c>
}
 8002ae4:	bf00      	nop
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	20000000 	.word	0x20000000
 8002af4:	10624dd3 	.word	0x10624dd3

08002af8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e093      	b.n	8002c34 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d106      	bne.n	8002b26 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7fe fc31 	bl	8001388 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2202      	movs	r2, #2
 8002b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b3c:	f023 0307 	bic.w	r3, r3, #7
 8002b40:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4610      	mov	r0, r2
 8002b4e:	f000 f903 	bl	8002d58 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	697a      	ldr	r2, [r7, #20]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b7a:	f023 0303 	bic.w	r3, r3, #3
 8002b7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	021b      	lsls	r3, r3, #8
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002b98:	f023 030c 	bic.w	r3, r3, #12
 8002b9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ba4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ba8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	68da      	ldr	r2, [r3, #12]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	021b      	lsls	r3, r3, #8
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	011a      	lsls	r2, r3, #4
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	031b      	lsls	r3, r3, #12
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002bd6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	4313      	orrs	r3, r2
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c4c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c54:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c5c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002c64:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d110      	bne.n	8002c8e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d102      	bne.n	8002c78 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c72:	7b7b      	ldrb	r3, [r7, #13]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d001      	beq.n	8002c7c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e068      	b.n	8002d4e <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c8c:	e031      	b.n	8002cf2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2b04      	cmp	r3, #4
 8002c92:	d110      	bne.n	8002cb6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c94:	7bbb      	ldrb	r3, [r7, #14]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d102      	bne.n	8002ca0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c9a:	7b3b      	ldrb	r3, [r7, #12]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d001      	beq.n	8002ca4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e054      	b.n	8002d4e <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cb4:	e01d      	b.n	8002cf2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cb6:	7bfb      	ldrb	r3, [r7, #15]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d108      	bne.n	8002cce <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cbc:	7bbb      	ldrb	r3, [r7, #14]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d105      	bne.n	8002cce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cc2:	7b7b      	ldrb	r3, [r7, #13]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d102      	bne.n	8002cce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002cc8:	7b3b      	ldrb	r3, [r7, #12]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d001      	beq.n	8002cd2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e03d      	b.n	8002d4e <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2202      	movs	r2, #2
 8002cde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2202      	movs	r2, #2
 8002cee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d002      	beq.n	8002cfe <HAL_TIM_Encoder_Start+0xc2>
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d008      	beq.n	8002d0e <HAL_TIM_Encoder_Start+0xd2>
 8002cfc:	e00f      	b.n	8002d1e <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2201      	movs	r2, #1
 8002d04:	2100      	movs	r1, #0
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 f888 	bl	8002e1c <TIM_CCxChannelCmd>
      break;
 8002d0c:	e016      	b.n	8002d3c <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2201      	movs	r2, #1
 8002d14:	2104      	movs	r1, #4
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 f880 	bl	8002e1c <TIM_CCxChannelCmd>
      break;
 8002d1c:	e00e      	b.n	8002d3c <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2201      	movs	r2, #1
 8002d24:	2100      	movs	r1, #0
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 f878 	bl	8002e1c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2201      	movs	r2, #1
 8002d32:	2104      	movs	r1, #4
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 f871 	bl	8002e1c <TIM_CCxChannelCmd>
      break;
 8002d3a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 0201 	orr.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
	...

08002d58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a29      	ldr	r2, [pc, #164]	; (8002e10 <TIM_Base_SetConfig+0xb8>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d00b      	beq.n	8002d88 <TIM_Base_SetConfig+0x30>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d76:	d007      	beq.n	8002d88 <TIM_Base_SetConfig+0x30>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a26      	ldr	r2, [pc, #152]	; (8002e14 <TIM_Base_SetConfig+0xbc>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d003      	beq.n	8002d88 <TIM_Base_SetConfig+0x30>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a25      	ldr	r2, [pc, #148]	; (8002e18 <TIM_Base_SetConfig+0xc0>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d108      	bne.n	8002d9a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a1c      	ldr	r2, [pc, #112]	; (8002e10 <TIM_Base_SetConfig+0xb8>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d00b      	beq.n	8002dba <TIM_Base_SetConfig+0x62>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da8:	d007      	beq.n	8002dba <TIM_Base_SetConfig+0x62>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a19      	ldr	r2, [pc, #100]	; (8002e14 <TIM_Base_SetConfig+0xbc>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d003      	beq.n	8002dba <TIM_Base_SetConfig+0x62>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a18      	ldr	r2, [pc, #96]	; (8002e18 <TIM_Base_SetConfig+0xc0>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d108      	bne.n	8002dcc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a07      	ldr	r2, [pc, #28]	; (8002e10 <TIM_Base_SetConfig+0xb8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d103      	bne.n	8002e00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	691a      	ldr	r2, [r3, #16]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	615a      	str	r2, [r3, #20]
}
 8002e06:	bf00      	nop
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr
 8002e10:	40012c00 	.word	0x40012c00
 8002e14:	40000400 	.word	0x40000400
 8002e18:	40000800 	.word	0x40000800

08002e1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b087      	sub	sp, #28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	f003 031f 	and.w	r3, r3, #31
 8002e2e:	2201      	movs	r2, #1
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a1a      	ldr	r2, [r3, #32]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	401a      	ands	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a1a      	ldr	r2, [r3, #32]
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f003 031f 	and.w	r3, r3, #31
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	fa01 f303 	lsl.w	r3, r1, r3
 8002e54:	431a      	orrs	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	621a      	str	r2, [r3, #32]
}
 8002e5a:	bf00      	nop
 8002e5c:	371c      	adds	r7, #28
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr

08002e64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d101      	bne.n	8002e7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	e046      	b.n	8002f0a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2202      	movs	r2, #2
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ea2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a16      	ldr	r2, [pc, #88]	; (8002f14 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d00e      	beq.n	8002ede <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec8:	d009      	beq.n	8002ede <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a12      	ldr	r2, [pc, #72]	; (8002f18 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d004      	beq.n	8002ede <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a10      	ldr	r2, [pc, #64]	; (8002f1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d10c      	bne.n	8002ef8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ee4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr
 8002f14:	40012c00 	.word	0x40012c00
 8002f18:	40000400 	.word	0x40000400
 8002f1c:	40000800 	.word	0x40000800

08002f20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e03f      	b.n	8002fb2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d106      	bne.n	8002f4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7fe fae2 	bl	8001510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2224      	movs	r2, #36	; 0x24
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68da      	ldr	r2, [r3, #12]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 fd9d 	bl	8003aa4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	691a      	ldr	r2, [r3, #16]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695a      	ldr	r2, [r3, #20]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2220      	movs	r2, #32
 8002fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b08a      	sub	sp, #40	; 0x28
 8002fbe:	af02      	add	r7, sp, #8
 8002fc0:	60f8      	str	r0, [r7, #12]
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	603b      	str	r3, [r7, #0]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b20      	cmp	r3, #32
 8002fd8:	d17c      	bne.n	80030d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d002      	beq.n	8002fe6 <HAL_UART_Transmit+0x2c>
 8002fe0:	88fb      	ldrh	r3, [r7, #6]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e075      	b.n	80030d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <HAL_UART_Transmit+0x3e>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	e06e      	b.n	80030d6 <HAL_UART_Transmit+0x11c>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2221      	movs	r2, #33	; 0x21
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800300e:	f7fe fbbb 	bl	8001788 <HAL_GetTick>
 8003012:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	88fa      	ldrh	r2, [r7, #6]
 8003018:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	88fa      	ldrh	r2, [r7, #6]
 800301e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003028:	d108      	bne.n	800303c <HAL_UART_Transmit+0x82>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d104      	bne.n	800303c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003032:	2300      	movs	r3, #0
 8003034:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	61bb      	str	r3, [r7, #24]
 800303a:	e003      	b.n	8003044 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003040:	2300      	movs	r3, #0
 8003042:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800304c:	e02a      	b.n	80030a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2200      	movs	r2, #0
 8003056:	2180      	movs	r1, #128	; 0x80
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 fb0f 	bl	800367c <UART_WaitOnFlagUntilTimeout>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e036      	b.n	80030d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10b      	bne.n	8003086 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	881b      	ldrh	r3, [r3, #0]
 8003072:	461a      	mov	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800307c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	3302      	adds	r3, #2
 8003082:	61bb      	str	r3, [r7, #24]
 8003084:	e007      	b.n	8003096 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	781a      	ldrb	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	3301      	adds	r3, #1
 8003094:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800309a:	b29b      	uxth	r3, r3
 800309c:	3b01      	subs	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1cf      	bne.n	800304e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2200      	movs	r2, #0
 80030b6:	2140      	movs	r1, #64	; 0x40
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 fadf 	bl	800367c <UART_WaitOnFlagUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e006      	b.n	80030d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	e000      	b.n	80030d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80030d4:	2302      	movs	r3, #2
  }
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3720      	adds	r7, #32
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b086      	sub	sp, #24
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	4613      	mov	r3, r2
 80030ea:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b20      	cmp	r3, #32
 80030f6:	d13c      	bne.n	8003172 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d002      	beq.n	8003104 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80030fe:	88fb      	ldrh	r3, [r7, #6]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e035      	b.n	8003174 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800310e:	2b01      	cmp	r3, #1
 8003110:	d101      	bne.n	8003116 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8003112:	2302      	movs	r3, #2
 8003114:	e02e      	b.n	8003174 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2201      	movs	r2, #1
 8003122:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003124:	88fb      	ldrh	r3, [r7, #6]
 8003126:	461a      	mov	r2, r3
 8003128:	68b9      	ldr	r1, [r7, #8]
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 faf0 	bl	8003710 <UART_Start_Receive_DMA>
 8003130:	4603      	mov	r3, r0
 8003132:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003134:	7dfb      	ldrb	r3, [r7, #23]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d119      	bne.n	800316e <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	2b01      	cmp	r3, #1
 8003140:	d113      	bne.n	800316a <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003142:	2300      	movs	r3, #0
 8003144:	613b      	str	r3, [r7, #16]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	613b      	str	r3, [r7, #16]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	613b      	str	r3, [r7, #16]
 8003156:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68da      	ldr	r2, [r3, #12]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0210 	orr.w	r2, r2, #16
 8003166:	60da      	str	r2, [r3, #12]
 8003168:	e001      	b.n	800316e <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 800316e:	7dfb      	ldrb	r3, [r7, #23]
 8003170:	e000      	b.n	8003174 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8003172:	2302      	movs	r3, #2
  }
}
 8003174:	4618      	mov	r0, r3
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08a      	sub	sp, #40	; 0x28
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800319c:	2300      	movs	r3, #0
 800319e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10d      	bne.n	80031ce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	f003 0320 	and.w	r3, r3, #32
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d008      	beq.n	80031ce <HAL_UART_IRQHandler+0x52>
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	f003 0320 	and.w	r3, r3, #32
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fbc2 	bl	8003950 <UART_Receive_IT>
      return;
 80031cc:	e17c      	b.n	80034c8 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 80b1 	beq.w	8003338 <HAL_UART_IRQHandler+0x1bc>
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d105      	bne.n	80031ec <HAL_UART_IRQHandler+0x70>
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 80a6 	beq.w	8003338 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00a      	beq.n	800320c <HAL_UART_IRQHandler+0x90>
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	f043 0201 	orr.w	r2, r3, #1
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00a      	beq.n	800322c <HAL_UART_IRQHandler+0xb0>
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	d005      	beq.n	800322c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	f043 0202 	orr.w	r2, r3, #2
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00a      	beq.n	800324c <HAL_UART_IRQHandler+0xd0>
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	f043 0204 	orr.w	r2, r3, #4
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00f      	beq.n	8003276 <HAL_UART_IRQHandler+0xfa>
 8003256:	6a3b      	ldr	r3, [r7, #32]
 8003258:	f003 0320 	and.w	r3, r3, #32
 800325c:	2b00      	cmp	r3, #0
 800325e:	d104      	bne.n	800326a <HAL_UART_IRQHandler+0xee>
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d005      	beq.n	8003276 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	f043 0208 	orr.w	r2, r3, #8
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 811f 	beq.w	80034be <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	f003 0320 	and.w	r3, r3, #32
 8003286:	2b00      	cmp	r3, #0
 8003288:	d007      	beq.n	800329a <HAL_UART_IRQHandler+0x11e>
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	f003 0320 	and.w	r3, r3, #32
 8003290:	2b00      	cmp	r3, #0
 8003292:	d002      	beq.n	800329a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 fb5b 	bl	8003950 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	bf14      	ite	ne
 80032a8:	2301      	movne	r3, #1
 80032aa:	2300      	moveq	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d102      	bne.n	80032c2 <HAL_UART_IRQHandler+0x146>
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d031      	beq.n	8003326 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fa9d 	bl	8003802 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d023      	beq.n	800331e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	695a      	ldr	r2, [r3, #20]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032e4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d013      	beq.n	8003316 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f2:	4a77      	ldr	r2, [pc, #476]	; (80034d0 <HAL_UART_IRQHandler+0x354>)
 80032f4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fe fc72 	bl	8001be4 <HAL_DMA_Abort_IT>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d016      	beq.n	8003334 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003310:	4610      	mov	r0, r2
 8003312:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003314:	e00e      	b.n	8003334 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f8f7 	bl	800350a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800331c:	e00a      	b.n	8003334 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f8f3 	bl	800350a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003324:	e006      	b.n	8003334 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f8ef 	bl	800350a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003332:	e0c4      	b.n	80034be <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003334:	bf00      	nop
    return;
 8003336:	e0c2      	b.n	80034be <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333c:	2b01      	cmp	r3, #1
 800333e:	f040 80a1 	bne.w	8003484 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	f003 0310 	and.w	r3, r3, #16
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 809b 	beq.w	8003484 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800334e:	6a3b      	ldr	r3, [r7, #32]
 8003350:	f003 0310 	and.w	r3, r3, #16
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 8095 	beq.w	8003484 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800335a:	2300      	movs	r3, #0
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	60fb      	str	r3, [r7, #12]
 800336e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800337a:	2b00      	cmp	r3, #0
 800337c:	d04e      	beq.n	800341c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003388:	8a3b      	ldrh	r3, [r7, #16]
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 8099 	beq.w	80034c2 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003394:	8a3a      	ldrh	r2, [r7, #16]
 8003396:	429a      	cmp	r2, r3
 8003398:	f080 8093 	bcs.w	80034c2 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	8a3a      	ldrh	r2, [r7, #16]
 80033a0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	2b20      	cmp	r3, #32
 80033aa:	d02b      	beq.n	8003404 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033ba:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	695a      	ldr	r2, [r3, #20]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0201 	bic.w	r2, r2, #1
 80033ca:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	695a      	ldr	r2, [r3, #20]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033da:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68da      	ldr	r2, [r3, #12]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0210 	bic.w	r2, r2, #16
 80033f8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fe fbb5 	bl	8001b6e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800340c:	b29b      	uxth	r3, r3
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	b29b      	uxth	r3, r3
 8003412:	4619      	mov	r1, r3
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7fd fb99 	bl	8000b4c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800341a:	e052      	b.n	80034c2 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003424:	b29b      	uxth	r3, r3
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800342e:	b29b      	uxth	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d048      	beq.n	80034c6 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8003434:	8a7b      	ldrh	r3, [r7, #18]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d045      	beq.n	80034c6 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68da      	ldr	r2, [r3, #12]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003448:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695a      	ldr	r2, [r3, #20]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 0201 	bic.w	r2, r2, #1
 8003458:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2220      	movs	r2, #32
 800345e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f022 0210 	bic.w	r2, r2, #16
 8003476:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003478:	8a7b      	ldrh	r3, [r7, #18]
 800347a:	4619      	mov	r1, r3
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7fd fb65 	bl	8000b4c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003482:	e020      	b.n	80034c6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800348a:	2b00      	cmp	r3, #0
 800348c:	d008      	beq.n	80034a0 <HAL_UART_IRQHandler+0x324>
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f000 f9f2 	bl	8003882 <UART_Transmit_IT>
    return;
 800349e:	e013      	b.n	80034c8 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00e      	beq.n	80034c8 <HAL_UART_IRQHandler+0x34c>
 80034aa:	6a3b      	ldr	r3, [r7, #32]
 80034ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d009      	beq.n	80034c8 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 fa33 	bl	8003920 <UART_EndTransmit_IT>
    return;
 80034ba:	bf00      	nop
 80034bc:	e004      	b.n	80034c8 <HAL_UART_IRQHandler+0x34c>
    return;
 80034be:	bf00      	nop
 80034c0:	e002      	b.n	80034c8 <HAL_UART_IRQHandler+0x34c>
      return;
 80034c2:	bf00      	nop
 80034c4:	e000      	b.n	80034c8 <HAL_UART_IRQHandler+0x34c>
      return;
 80034c6:	bf00      	nop
  }
}
 80034c8:	3728      	adds	r7, #40	; 0x28
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	0800385b 	.word	0x0800385b

080034d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bc80      	pop	{r7}
 80034e4:	4770      	bx	lr

080034e6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr

080034f8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr

0800350a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	bc80      	pop	{r7}
 800351a:	4770      	bx	lr

0800351c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b00      	cmp	r3, #0
 8003536:	d12a      	bne.n	800358e <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800354c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	695a      	ldr	r2, [r3, #20]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0201 	bic.w	r2, r2, #1
 800355c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695a      	ldr	r2, [r3, #20]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800356c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2220      	movs	r2, #32
 8003572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	2b01      	cmp	r3, #1
 800357c:	d107      	bne.n	800358e <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68da      	ldr	r2, [r3, #12]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0210 	bic.w	r2, r2, #16
 800358c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	2b01      	cmp	r3, #1
 8003594:	d106      	bne.n	80035a4 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800359a:	4619      	mov	r1, r3
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f7fd fad5 	bl	8000b4c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80035a2:	e002      	b.n	80035aa <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f7ff ff9e 	bl	80034e6 <HAL_UART_RxCpltCallback>
}
 80035aa:	bf00      	nop
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b084      	sub	sp, #16
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d108      	bne.n	80035da <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80035cc:	085b      	lsrs	r3, r3, #1
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	4619      	mov	r1, r3
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f7fd faba 	bl	8000b4c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80035d8:	e002      	b.n	80035e0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f7ff ff8c 	bl	80034f8 <HAL_UART_RxHalfCpltCallback>
}
 80035e0:	bf00      	nop
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80035f0:	2300      	movs	r3, #0
 80035f2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003604:	2b00      	cmp	r3, #0
 8003606:	bf14      	ite	ne
 8003608:	2301      	movne	r3, #1
 800360a:	2300      	moveq	r3, #0
 800360c:	b2db      	uxtb	r3, r3
 800360e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b21      	cmp	r3, #33	; 0x21
 800361a:	d108      	bne.n	800362e <UART_DMAError+0x46>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d005      	beq.n	800362e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2200      	movs	r2, #0
 8003626:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003628:	68b8      	ldr	r0, [r7, #8]
 800362a:	f000 f8d5 	bl	80037d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003638:	2b00      	cmp	r3, #0
 800363a:	bf14      	ite	ne
 800363c:	2301      	movne	r3, #1
 800363e:	2300      	moveq	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b22      	cmp	r3, #34	; 0x22
 800364e:	d108      	bne.n	8003662 <UART_DMAError+0x7a>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d005      	beq.n	8003662 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	2200      	movs	r2, #0
 800365a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800365c:	68b8      	ldr	r0, [r7, #8]
 800365e:	f000 f8d0 	bl	8003802 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	f043 0210 	orr.w	r2, r3, #16
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800366e:	68b8      	ldr	r0, [r7, #8]
 8003670:	f7ff ff4b 	bl	800350a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003674:	bf00      	nop
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	603b      	str	r3, [r7, #0]
 8003688:	4613      	mov	r3, r2
 800368a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800368c:	e02c      	b.n	80036e8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003694:	d028      	beq.n	80036e8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d007      	beq.n	80036ac <UART_WaitOnFlagUntilTimeout+0x30>
 800369c:	f7fe f874 	bl	8001788 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d21d      	bcs.n	80036e8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68da      	ldr	r2, [r3, #12]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036ba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695a      	ldr	r2, [r3, #20]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0201 	bic.w	r2, r2, #1
 80036ca:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e00f      	b.n	8003708 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	4013      	ands	r3, r2
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	bf0c      	ite	eq
 80036f8:	2301      	moveq	r3, #1
 80036fa:	2300      	movne	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	461a      	mov	r2, r3
 8003700:	79fb      	ldrb	r3, [r7, #7]
 8003702:	429a      	cmp	r2, r3
 8003704:	d0c3      	beq.n	800368e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	4613      	mov	r3, r2
 800371c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	88fa      	ldrh	r2, [r7, #6]
 8003728:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2222      	movs	r2, #34	; 0x22
 8003734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373c:	4a23      	ldr	r2, [pc, #140]	; (80037cc <UART_Start_Receive_DMA+0xbc>)
 800373e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003744:	4a22      	ldr	r2, [pc, #136]	; (80037d0 <UART_Start_Receive_DMA+0xc0>)
 8003746:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374c:	4a21      	ldr	r2, [pc, #132]	; (80037d4 <UART_Start_Receive_DMA+0xc4>)
 800374e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003754:	2200      	movs	r2, #0
 8003756:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003758:	f107 0308 	add.w	r3, r7, #8
 800375c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	3304      	adds	r3, #4
 8003768:	4619      	mov	r1, r3
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	88fb      	ldrh	r3, [r7, #6]
 8003770:	f7fe f99e 	bl	8001ab0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003774:	2300      	movs	r3, #0
 8003776:	613b      	str	r3, [r7, #16]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	613b      	str	r3, [r7, #16]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	613b      	str	r3, [r7, #16]
 8003788:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68da      	ldr	r2, [r3, #12]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037a0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	695a      	ldr	r2, [r3, #20]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f042 0201 	orr.w	r2, r2, #1
 80037b0:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	695a      	ldr	r2, [r3, #20]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037c0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	0800351d 	.word	0x0800351d
 80037d0:	080035b3 	.word	0x080035b3
 80037d4:	080035e9 	.word	0x080035e9

080037d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68da      	ldr	r2, [r3, #12]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80037ee:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bc80      	pop	{r7}
 8003800:	4770      	bx	lr

08003802 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003802:	b480      	push	{r7}
 8003804:	b083      	sub	sp, #12
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003818:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695a      	ldr	r2, [r3, #20]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0201 	bic.w	r2, r2, #1
 8003828:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	2b01      	cmp	r3, #1
 8003830:	d107      	bne.n	8003842 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0210 	bic.w	r2, r2, #16
 8003840:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2220      	movs	r2, #32
 8003846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	bc80      	pop	{r7}
 8003858:	4770      	bx	lr

0800385a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b084      	sub	sp, #16
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f7ff fe48 	bl	800350a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800387a:	bf00      	nop
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003882:	b480      	push	{r7}
 8003884:	b085      	sub	sp, #20
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b21      	cmp	r3, #33	; 0x21
 8003894:	d13e      	bne.n	8003914 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800389e:	d114      	bne.n	80038ca <UART_Transmit_IT+0x48>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d110      	bne.n	80038ca <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	881b      	ldrh	r3, [r3, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	1c9a      	adds	r2, r3, #2
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	621a      	str	r2, [r3, #32]
 80038c8:	e008      	b.n	80038dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	1c59      	adds	r1, r3, #1
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6211      	str	r1, [r2, #32]
 80038d4:	781a      	ldrb	r2, [r3, #0]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	4619      	mov	r1, r3
 80038ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10f      	bne.n	8003910 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68da      	ldr	r2, [r3, #12]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68da      	ldr	r2, [r3, #12]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800390e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003910:	2300      	movs	r3, #0
 8003912:	e000      	b.n	8003916 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003914:	2302      	movs	r3, #2
  }
}
 8003916:	4618      	mov	r0, r3
 8003918:	3714      	adds	r7, #20
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr

08003920 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68da      	ldr	r2, [r3, #12]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003936:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2220      	movs	r2, #32
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff fdc7 	bl	80034d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b22      	cmp	r3, #34	; 0x22
 8003962:	f040 8099 	bne.w	8003a98 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800396e:	d117      	bne.n	80039a0 <UART_Receive_IT+0x50>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d113      	bne.n	80039a0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003978:	2300      	movs	r3, #0
 800397a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003980:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	b29b      	uxth	r3, r3
 800398a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800398e:	b29a      	uxth	r2, r3
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003998:	1c9a      	adds	r2, r3, #2
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	629a      	str	r2, [r3, #40]	; 0x28
 800399e:	e026      	b.n	80039ee <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a4:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80039a6:	2300      	movs	r3, #0
 80039a8:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b2:	d007      	beq.n	80039c4 <UART_Receive_IT+0x74>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10a      	bne.n	80039d2 <UART_Receive_IT+0x82>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d106      	bne.n	80039d2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	701a      	strb	r2, [r3, #0]
 80039d0:	e008      	b.n	80039e4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039de:	b2da      	uxtb	r2, r3
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e8:	1c5a      	adds	r2, r3, #1
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	3b01      	subs	r3, #1
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	4619      	mov	r1, r3
 80039fc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d148      	bne.n	8003a94 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68da      	ldr	r2, [r3, #12]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0220 	bic.w	r2, r2, #32
 8003a10:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a20:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	695a      	ldr	r2, [r3, #20]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0201 	bic.w	r2, r2, #1
 8003a30:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2220      	movs	r2, #32
 8003a36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d123      	bne.n	8003a8a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0210 	bic.w	r2, r2, #16
 8003a56:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0310 	and.w	r3, r3, #16
 8003a62:	2b10      	cmp	r3, #16
 8003a64:	d10a      	bne.n	8003a7c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a66:	2300      	movs	r3, #0
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	60fb      	str	r3, [r7, #12]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	60fb      	str	r3, [r7, #12]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a80:	4619      	mov	r1, r3
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7fd f862 	bl	8000b4c <HAL_UARTEx_RxEventCallback>
 8003a88:	e002      	b.n	8003a90 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7ff fd2b 	bl	80034e6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a90:	2300      	movs	r3, #0
 8003a92:	e002      	b.n	8003a9a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003a94:	2300      	movs	r3, #0
 8003a96:	e000      	b.n	8003a9a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003a98:	2302      	movs	r3, #2
  }
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3718      	adds	r7, #24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
	...

08003aa4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68da      	ldr	r2, [r3, #12]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	689a      	ldr	r2, [r3, #8]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	431a      	orrs	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ade:	f023 030c 	bic.w	r3, r3, #12
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6812      	ldr	r2, [r2, #0]
 8003ae6:	68b9      	ldr	r1, [r7, #8]
 8003ae8:	430b      	orrs	r3, r1
 8003aea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699a      	ldr	r2, [r3, #24]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a2c      	ldr	r2, [pc, #176]	; (8003bb8 <UART_SetConfig+0x114>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d103      	bne.n	8003b14 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b0c:	f7fe ffc2 	bl	8002a94 <HAL_RCC_GetPCLK2Freq>
 8003b10:	60f8      	str	r0, [r7, #12]
 8003b12:	e002      	b.n	8003b1a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b14:	f7fe ffaa 	bl	8002a6c <HAL_RCC_GetPCLK1Freq>
 8003b18:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	009a      	lsls	r2, r3, #2
 8003b24:	441a      	add	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b30:	4a22      	ldr	r2, [pc, #136]	; (8003bbc <UART_SetConfig+0x118>)
 8003b32:	fba2 2303 	umull	r2, r3, r2, r3
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	0119      	lsls	r1, r3, #4
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	009a      	lsls	r2, r3, #2
 8003b44:	441a      	add	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b50:	4b1a      	ldr	r3, [pc, #104]	; (8003bbc <UART_SetConfig+0x118>)
 8003b52:	fba3 0302 	umull	r0, r3, r3, r2
 8003b56:	095b      	lsrs	r3, r3, #5
 8003b58:	2064      	movs	r0, #100	; 0x64
 8003b5a:	fb00 f303 	mul.w	r3, r0, r3
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	3332      	adds	r3, #50	; 0x32
 8003b64:	4a15      	ldr	r2, [pc, #84]	; (8003bbc <UART_SetConfig+0x118>)
 8003b66:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6a:	095b      	lsrs	r3, r3, #5
 8003b6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b70:	4419      	add	r1, r3
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	4613      	mov	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	009a      	lsls	r2, r3, #2
 8003b7c:	441a      	add	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b88:	4b0c      	ldr	r3, [pc, #48]	; (8003bbc <UART_SetConfig+0x118>)
 8003b8a:	fba3 0302 	umull	r0, r3, r3, r2
 8003b8e:	095b      	lsrs	r3, r3, #5
 8003b90:	2064      	movs	r0, #100	; 0x64
 8003b92:	fb00 f303 	mul.w	r3, r0, r3
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	3332      	adds	r3, #50	; 0x32
 8003b9c:	4a07      	ldr	r2, [pc, #28]	; (8003bbc <UART_SetConfig+0x118>)
 8003b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba2:	095b      	lsrs	r3, r3, #5
 8003ba4:	f003 020f 	and.w	r2, r3, #15
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	440a      	add	r2, r1
 8003bae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003bb0:	bf00      	nop
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40013800 	.word	0x40013800
 8003bbc:	51eb851f 	.word	0x51eb851f

08003bc0 <__libc_init_array>:
 8003bc0:	b570      	push	{r4, r5, r6, lr}
 8003bc2:	2500      	movs	r5, #0
 8003bc4:	4e0c      	ldr	r6, [pc, #48]	; (8003bf8 <__libc_init_array+0x38>)
 8003bc6:	4c0d      	ldr	r4, [pc, #52]	; (8003bfc <__libc_init_array+0x3c>)
 8003bc8:	1ba4      	subs	r4, r4, r6
 8003bca:	10a4      	asrs	r4, r4, #2
 8003bcc:	42a5      	cmp	r5, r4
 8003bce:	d109      	bne.n	8003be4 <__libc_init_array+0x24>
 8003bd0:	f000 f822 	bl	8003c18 <_init>
 8003bd4:	2500      	movs	r5, #0
 8003bd6:	4e0a      	ldr	r6, [pc, #40]	; (8003c00 <__libc_init_array+0x40>)
 8003bd8:	4c0a      	ldr	r4, [pc, #40]	; (8003c04 <__libc_init_array+0x44>)
 8003bda:	1ba4      	subs	r4, r4, r6
 8003bdc:	10a4      	asrs	r4, r4, #2
 8003bde:	42a5      	cmp	r5, r4
 8003be0:	d105      	bne.n	8003bee <__libc_init_array+0x2e>
 8003be2:	bd70      	pop	{r4, r5, r6, pc}
 8003be4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003be8:	4798      	blx	r3
 8003bea:	3501      	adds	r5, #1
 8003bec:	e7ee      	b.n	8003bcc <__libc_init_array+0xc>
 8003bee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bf2:	4798      	blx	r3
 8003bf4:	3501      	adds	r5, #1
 8003bf6:	e7f2      	b.n	8003bde <__libc_init_array+0x1e>
 8003bf8:	08003c5c 	.word	0x08003c5c
 8003bfc:	08003c5c 	.word	0x08003c5c
 8003c00:	08003c5c 	.word	0x08003c5c
 8003c04:	08003c60 	.word	0x08003c60

08003c08 <memset>:
 8003c08:	4603      	mov	r3, r0
 8003c0a:	4402      	add	r2, r0
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d100      	bne.n	8003c12 <memset+0xa>
 8003c10:	4770      	bx	lr
 8003c12:	f803 1b01 	strb.w	r1, [r3], #1
 8003c16:	e7f9      	b.n	8003c0c <memset+0x4>

08003c18 <_init>:
 8003c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c1a:	bf00      	nop
 8003c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c1e:	bc08      	pop	{r3}
 8003c20:	469e      	mov	lr, r3
 8003c22:	4770      	bx	lr

08003c24 <_fini>:
 8003c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c26:	bf00      	nop
 8003c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c2a:	bc08      	pop	{r3}
 8003c2c:	469e      	mov	lr, r3
 8003c2e:	4770      	bx	lr
